% \iffalse meta-comment
%
% Copyright 1993-2014
%
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% This file is part of the Standard LaTeX `Tools Bundle'.
% -------------------------------------------------------
%
% It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% The list of all files belonging to the LaTeX `Tools Bundle' is
% given in the file `manifest.txt'.
%
% \fi
% \iffalse
%% File: hhline.dtx Copyright (C) 1991-1994 David Carlisle
%
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{hhline}
%<package>         [2014/10/28 v2.03 Table rule package (DPC)]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[ltxdoc,inputenc,fontenc,babel]{translatex-fr}
\usepackage{hhline}
\GetFileInfo{hhline.sty}
\begin{document}
\title{L'extension \textsf{hhline}\thanks{Ce fichier a pour numéro de
        version \fileversion\ et a été mis à jour le \filedatefr. La
        première traduction, basée sur la version v2.03, a été publiée par 
        Jean-Pierre Drucbert en 2000.}}

\author{David Carlisle}
\date{\filedatefr}
 \MaintainedByLaTeXTeam{tools}
 \maketitle
 \DeleteShortVerb{\|}
 \DocInput{hhline-fr.dtx}
\end{document}
%</driver>
% \fi
%
%
% \changes{v1.00}{1991/06/04}{Initial Version}
% \changes{v2.00}{1991/11/06}
%     {Add tilde which allows \cmd\cline-like constructions.}
% \changes{v2.01}{1992/06/26}
%    {Re-issue for the new  doc and docstrip.}
% \changes{v2.02}{1994/03/14}
%    {Update for LaTeX2e.}
% \changes{v2.03}{1994/05/23}
%    {New style warning.}
%
%
%
% \MakeShortVerb{\"}
%
% \begin{abstract}
% Cette extension augmente les possibilités de filets horizontaux et verticaux 
% dans un environnement "array" ou "tabular". Il introduit la nouvelle
% commande "\hhline" qui produit un filet comme "\hline" ou un double filet comme
% "\hline\hline", sauf pour leur interaction avec les filets verticaux.
% \end{abstract}

%
% \arrayrulewidth=1pt
% \doublerulesep=3pt
%
% \section{Introduction}
% L'argument de "\hhline" est similaire au préambule d'un environnement
% \texttt{array} ou \texttt{tabular}. Il consiste en une liste d'unités 
% lexicales (\emph{tokens}) ayant les significations suivantes :
% \[
% \begin{tabular}{cl}
%     "="   & Un filet horizontal double sur la largeur d'une colonne.\\
%     "-"   & Un filet horizontal simple sur la largeur d'une colonne.\\[10pt]
%     "~"   & Une colonne sans filet horizontal.\\[10pt]
%     
%     "|"   & Un filet vertical qui croise un filet horizontal simple ou 
%             double.\\
%     ":"   & Un filet vertical qui est brisé par une filet horizontal double.
%             \\[10pt]
% 
%     "#"   & Un filet horizontal double segment entre deux filets verticaux.\\
%     "t"   & La moitié supérieure d'un filet horizontal double.\\
%     "b"   & La moitié inférieure d'un filet horizontal double.\\
% 
%     "*"   & \verb|*{3}{==#}| se développe en \verb|==#==#==#|,
%             comme avec \texttt{*} dans le préambule. \\
%
% \end{tabular}
% \]
% Si un double filet vertical est spécifié ("||" ou "::") alors les filets
% horizontaux produits par "\hhline" sont brisés. Pour obtenir l'effet d'un
% filet horizontal \og passant au travers \fg d'un filet vertical double,
% utilisez un "#" ou omettez les spécificateurs de filets verticaux, selon
% que vous vouliez que le double filet vertical soit brisé ou pas.
%
% Les unités lexicales "t" et "b" doivent être utilisées entre deux filets
% verticaux. La combinaison "|tb|" produit les mêmes lignes que "#" mais est
% moins efficace. Ces unités lexicales sont plutôt pensées pour faire des
% combinaisons telles que "|t:" (coin supérieur gauche) et ":b|" (coin
% inférieur droit).
%
% Si "\hhline" est utilisée pour faire un simple filet horizontal, alors
% son argument ne doit contenir que des unités lexicales "-", "~" et "|" (et
% des expressions débutant par "*").
%
% Voici un exemple utilisant la plupart de ces possibilités:
% \[
% \vcenter{\hsize=2in\begin{verbatim}
% \begin{tabular}{||cc||c|c||}
% \hhline{|t:==:t:==:t|}
% a&b&c&d\\
% \hhline{|:==:|~|~||}
% 1&2&3&4\\
% \hhline{#==#~|=#}
% i&j&k&l\\
% \hhline{||--||--||}
% w&x&y&z\\
% \hhline{|b:==:b:==:b|}
% \end{tabular}
% \end{verbatim}
% }
% \qquad
% \begin{tabular}{||cc||c|c||}
% \hhline{|t:==:t:==:t|}
% a&b&c&d\\
% \hhline{|:==:|~|~||}
% 1&2&3&4\\
% \hhline{#==#~|=#}
% i&j&k&l\\
% \hhline{||--||--||}
% w&x&y&z\\
% \hhline{|b:==:b:==:b|}
% \end{tabular}
% \]
%
% Les filets produits par la commande "\hline" de \LaTeX{} sont formées par
% une seule primitive de \TeX, "\hrule". Les filets produits par "\hhline"
% sont constitués de nombreux petits segments. \TeX\ les place très
% précisément dans le fichier \texttt{.dvi}, mais le programme que vous 
% utilisez pour imprimer le fichier \texttt{.dvi} peut ne pas les aligner 
% exactement (un problème similaire peut survenir avec les lignes obliques
% dans l'environnement \texttt{picture}). 
%
% Si ceci pose un problème, vous pouvez soit essayer un autre programme
% d'impression (si cela est possible), soit augmenter la dimension 
% "\arrayrulewidth" pour essayer de réduire les effets.
%
% \StopEventually{}
%
% \section{Implémentation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \begin{macro}{\HH@box}
% Construit une boîte contenant un segment de double filet horizontal. Dans
% le cas le plus courant, deux filets de longueur "\doublerulesep" seront
% stockés dans la boîte "\box1". Ceci n'est pas initialisé tant que "\hhline"
% n'est pas appelé car l'utilisateur peut changer les paramètres
% "\doublerulesep" et "\arrayrulewidth". Les deux arguments de "\HH@box" sont
% les largeurs (autrement dit les longueurs) du filet du haut et du filet du
% bas.
%    \begin{macrocode}
\def\HH@box#1#2{\vbox{%
  \hrule \@height \arrayrulewidth \@width #1
  \vskip \doublerulesep
  \hrule \@height \arrayrulewidth \@width #2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\HH@add}
% Développe le préambule dans le registre "\toks@".
%    \begin{macrocode}
\def\HH@add#1{\toks@\expandafter{\the\toks@#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\HH@xexpast}
% \begin{macro}{\HH@xexnoop}
% Nous \og empruntons \fg la version de "\@xexpast" de l'extension de
% Frank Mittelbach, car ceci permet de faire apparaître "#" dans la liste des
% arguments. 
%    \begin{macrocode}
\def\HH@xexpast#1*#2#3#4\@@{%
   \@tempcnta #2
   \toks@={#1}\@temptokena={#3}%
   \let\the@toksz\relax \let\the@toks\relax
   \def\@tempa{\the@toksz}%
   \ifnum\@tempcnta >0 \@whilenum\@tempcnta >0\do
     {\edef\@tempa{\@tempa\the@toks}\advance \@tempcnta \m@ne}%
       \let \@tempb \HH@xexpast \else
       \let \@tempb \HH@xexnoop \fi
   \def\the@toksz{\the\toks@}\def\the@toks{\the\@temptokena}%
   \edef\@tempa{\@tempa}%
   \expandafter \@tempb \@tempa #4\@@}

\def\HH@xexnoop#1\@@{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\hhline}
% La commande utilise une version simplifiée de "\@mkpream" pour décomposer
% l'argument à destination de "\hhline". En fait, elle est fortement
% simplifiée. Elle suppose que les filets verticaux sont en fin de colonne.
% Si vous aviez à spécifier "c|@{xx}|" dans l'argument du tableau, alors 
% "\hhline" ne serait pas capable d'accéder au premier filet vertical
% (il devrait y avoir une option "@{}" et l'ajout de "\leaders" jusqu'à 
% atteindre la largeur de la boîte contenant l'expression "@{}"). Nous 
% utilisons une boucle avec "\futurelet" plutôt que "\@tfor" afin que nous
% puissions utiliser "#" pour indiquer le croisement d'un filet vertical
% double avec un filet horizontal double.\\
% "\if@firstamp" est vraie dans la première colonne et faux sinon.\\
% "\if@tempswa" est vraie si la précédente entrée était un filet vertical
% (":", "|" or "#").
%    \begin{macrocode}
\def\hhline#1{\omit\@firstamptrue\@tempswafalse
%    \end{macrocode}
% Place deux filets de largeur "\doublerulesep" dans "\box1".
%    \begin{macrocode}
\global\setbox\@ne\HH@box\doublerulesep\doublerulesep
%    \end{macrocode}
% Si l'extension \textsf{array} de Frank Mittelbach est chargée, nous n'avons
% pas besoin d'une commande "\hskip" négative autour des filets verticaux.
%    \begin{macrocode}
  \xdef\@tempc{\ifx\extrarowheight\HH@undef\hskip-.5\arrayrulewidth\fi}%
%    \end{macrocode}
% Maintenant les éléments avec "*" sont développés et des unités lexicales
% fictives ( "\relax" et "`" ) sont ajoutés aux deux extrémités de la liste
% des unités lexicales. La commande "\HH@let" est appelée pour commencer le
% traitement de cette liste.
%    \begin{macrocode}
    \HH@xexpast\relax#1*0x\@@\toks@{}\expandafter\HH@let\@tempa`}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\HH@let}
% La dernière unité lexicale est écartée et la suivante est analysée.
%    \begin{macrocode}
\def\HH@let#1{\futurelet\@tempb\HH@loop}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\HH@loop}
% La boucle principale. Notez que nous utilisons "\ifx" plutôt que "\if" en
% version~2 car la nouvelle unité lexicale "~" est active.
%    \begin{macrocode}
\def\HH@loop{%
%    \end{macrocode}
% Si l'unité lexicale suivante est "`", la boucle est arrêtée et les filets 
% sont placés dans la rangée.
%    \begin{macrocode}
  \ifx\@tempb`\def\next##1{\the\toks@\cr}\else\let\next\HH@let
%    \end{macrocode}
% "|" ajoute un filet vertical (en travers d'un simple ou d'un double filet
% horizontal).
%    \begin{macrocode}
  \ifx\@tempb|\if@tempswa\HH@add{\hskip\doublerulesep}\fi\@tempswatrue
          \HH@add{\@tempc\vline\@tempc}\else
%    \end{macrocode}
% ":" ajoute un filet vertical brisé (à travers un double filet horizontal).
%    \begin{macrocode}
  \ifx\@tempb:\if@tempswa\HH@add{\hskip\doublerulesep}\fi\@tempswatrue
      \HH@add{\@tempc\HH@box\arrayrulewidth\arrayrulewidth\@tempc}\else
%    \end{macrocode}
% "#" ajoute un double filet horizontal entre deux filets verticaux.
%    \begin{macrocode}
  \ifx\@tempb##\if@tempswa\HH@add{\hskip\doublerulesep}\fi\@tempswatrue
         \HH@add{\@tempc\vline\@tempc\copy\@ne\@tempc\vline\@tempc}\else
%    \end{macrocode}
% "~" ajoute une colonne sans filet horizontal (ce qui donne un effet
% similaire à \verb+\cline+).
%    \begin{macrocode}
  \ifx\@tempb~\@tempswafalse
           \if@firstamp\@firstampfalse\else\HH@add{&\omit}\fi
              \HH@add{\hfil}\else
%    \end{macrocode}
% "-" ajoute un filet horizontal simple à travers de la colonne.
%    \begin{macrocode}
  \ifx\@tempb-\@tempswafalse
           \if@firstamp\@firstampfalse\else\HH@add{&\omit}\fi
              \HH@add{\leaders\hrule\@height\arrayrulewidth\hfil}\else
%    \end{macrocode}
% "=" ajoute un filet horizontal double à travers de la colonne.
%    \begin{macrocode}
  \ifx\@tempb=\@tempswafalse
       \if@firstamp\@firstampfalse\else\HH@add{&\omit}\fi
%    \end{macrocode}
%     Place autant de copies de "\box1" que possible avec la commande
%     "\leaders", ceci peut laisser des vides aux extrémités, aussi une
%     boîte supplémentaire est placée à chaque extrémité, superposées aux
%     "\leaders".
%    \begin{macrocode}
       \HH@add
          {\rlap{\copy\@ne}\leaders\copy\@ne\hfil\llap{\copy\@ne}}\else
%    \end{macrocode}
% "t" ajoute la moitié haute d'un segment de filet horizontal double dans
% une commande "\rlap" afin qu'elle puisse être utilisée avec "b".
%    \begin{macrocode}
  \ifx\@tempb t\HH@add{\rlap{\HH@box\doublerulesep\z@}}\else
%    \end{macrocode}
% "b" ajoute la moitié basse d'un segment de filet horizontal double dans
% une commande "\rlap" afin qu'elle puisse être utilisée avec "t".
%    \begin{macrocode}
  \ifx\@tempb b\HH@add{\rlap{\HH@box\z@\doublerulesep}}\else
%    \end{macrocode}
% Sinon, l'unité lexicale est ignorée, avec un avertissement l'indiquant.
%    \begin{macrocode}
  \PackageWarning{hhline}%
      {\meaning\@tempb\space ignored in \noexpand\hhline argument%
       \MessageBreak}%
  \fi\fi\fi\fi\fi\fi\fi\fi\fi
%    \end{macrocode}
% Puis la boucle est parcourue à nouveau.
%    \begin{macrocode}
  \next}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale
\endinput
