% \iffalse meta-comment
%
% Copyright 1993-2014
%
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% This file is part of the Standard LaTeX `Tools Bundle'.
% -------------------------------------------------------
%
% It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% The list of all files belonging to the LaTeX `Tools Bundle' is
% given in the file `manifest.txt'.
%
% \fi
% \iffalse
%% File: afterpage.dtx Copyright (C) 1994 1994 1995 David Carlisle
%
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{afterpage}
%<package>         [2014/10/28 v1.08 After-Page Package (DPC)]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[ltxdoc,fontenc,inputenc,babel]{translatex-fr}
\usepackage{afterpage}
\GetFileInfo{afterpage.sty}
\begin{document}
\title{L'extension \texttt{afterpage}\thanks{Ce fichier a pour numéro de
        version \fileversion\ et a été mis à jour le \filedatefr.}}
\author{David Carlisle}
\date{\filedatefr}
\MaintainedByLaTeXTeam{tools}
\maketitle
\DocInput{afterpage-fr.dtx}
\end{document}
%</driver>
% \fi
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \changes{v1.00}{1993/01/25}{Initial version}
% \changes{v1.05}{1993/07/14}{First public version}
% \changes{v1.06}{1994/02/01}{Update for LaTeX2e}
% \changes{v1.07}{1994/05/23}{Documentation Changes}
% \changes{v1.08}{1995/10/27}
%      {Use \cs{par} not \cs{endgraf}, for tools/1579}
% \changes{v1.08}{1995/10/27}
%      {Try and do something sensible with nested \cs{clearpage},
%       for tools/1880}
% \changes{v1.08}{1995/10/27}
%      {Try and do something sensible with footnotes, for tools/1884}
%
%
% Cette extension implémente une commande, |\afterpage|, qui permet aux
% commandes placées en argument d'être développées après que la page courante
% ait été livrée\footnote{Il s'agit vraiment d'une préversion afin de voir si
% des personnes recherchent une telle commande. L'implémentation \emph{n'est 
% pas} particulièrement robuste. Elle ne fonctionne pas en mode deux colonnes
% et peut être \og perturbée \fg{} par les environnements flottants de 
% \LaTeX.}.
%
% \begin{enumerate}
% \item Parfois, le mécanisme de positionnement de flottants de \LaTeX se
% retrouve surchargé et chaque |figure| et |table| flottante est alors placée
% en fin de document. Il est possible de forcer la mise en place des flottants
% non encore traités en utilisant la commande |\clearpage|, mais ceci impose
% une fin prématurée de la page courante. Maintenant, vous pouvez saisir 
% |\afterpage{\clearpage}| : la page courante sera remplie de texte
% normalement et une commande |\clearpage| forcera la mise en place des
% flottants dès la page suivante, avant que du texte ne soit disposé.
% \item Il existe un mécanisme plus ancien pour aider au placement des 
% flottants, à savoir l'argument optionnel |[H]| (pour \emph{HERE!}, \og ici
% \fg{}) ajouté à l'origine aux environnements standards de flottants par 
% |here.sty|, et maintenant proposé par |float.sty|. Toutefois, des 
% utilisateurs de ce |[H]| ont indiqué qu'ils ne souhaitaient pas vraiment
% placer le flottant \og ici \fg{} : ils le voulaient juste placé \og dans 
% les parages \fg{}. Ceci peut maintenant être obtenu par \\
%  |\afterpage{\clearpage\begin{figure}[H] |\ldots
%  |\end{figure}}|\\
% Ceci garantit que la figure est en haut de la page suivante. (La commande
% |\clearpage| empêche toute autre figure de dériver après la figure associée
% au |H|.)
% \item les tables \textsf{longtable} flottantes. L'extension 
% \textsf{longtable} fournit un environnement |longtable|, une version sur
% plusieurs pages de |tabular|. De nombreux utilisateurs de |longtable| m'ont
% dit rencontrer des difficultés pour gérer le texte autour de ce type de table
% et qu'ils voulaient disposer d'une version flottante. Comme, par principe
% même, ces tables sont longues, elles sont probablement trop grandes pour
% tenir en mémoire et être gérées comme des |table| flottantes. Cependant,
% si la table est dans un fichier séparé, par exemple |ltable.tex|, vous 
% pouvez utiliser une des deux lignes suivantes :\\
% |\afterpage{\clearpage\input{ltable}}|\\
% |\afterpage{\clearpage\input{ltable}\clearpage}|.\\
% La première forme fait apparaître du texte sur la même page que la fin de
% la |longtable|, la seconde garantit que le texte encadrant commence aussi 
% sur une nouvelle page.
% \end{enumerate}
%
% \StopEventually{}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \begin{macro}{\afterpage}
% Le registre d'unités lexicales (\emph{token}) utilisé pour sauvegarder 
% l'ancienne routine de sortie.
%    \begin{macrocode}
\newtoks\AP@output
\global\AP@output\expandafter{\the\output}
%    \end{macrocode}
%
% Un registre de boîte utilisé pour sauvegarder toute partie de la page
% suivante qui a déjà été traitée.
%    \begin{macrocode}
\newbox\AP@partial
%    \end{macrocode}
%
% Un registre de boîte utilisé pour sauvegarder tout texte de note de bas de
% page qui est lié au texte qui est sauvegardé dans |\AP@partial|.
%    \begin{macrocode}
\newbox\AP@footins
%    \end{macrocode}
%
% La commande suivante essaye d'entrer proprement en mode vertical et d'appeler
% alors une routine de sortie spéciale pour placer la page courante 
% dans |\AP@partial|.
%    \begin{macrocode}
\def\AP@savetop{%
%    \end{macrocode}
% Maintenant commence un test pour voir dans quel état nous nous trouvons. 
% |\AP@noindent| va être défini afin que revenir dans cet état (enfin, presque)
% à la fin du traitement fait par \textsf{afterpage}.
%    \begin{macrocode}
  \ifvmode
%    \end{macrocode}
% Nous sommes ici en mode vertical. C'est le cas le plus simple : il n'y a rien
% à faire.
%    \begin{macrocode}
    \let\AP@noindent\empty
  \else\ifhmode
%    \end{macrocode}
% Nous sommes en mode horizontal. Nous \og repassons \fg en mode vertical, 
% retranchant au passage la boîte d'indentation. S'il n'y a pas cette boîte
% d'indentation, cela implique que la routine de sortie a été invoquée par
% |\noindent| (vraiment pas de chance !), nous devons donc nous rappeler
% par la suite que nous aurons à réinsérer un |\noindent| pour le paragraphe
% à venir. Les unités lexicales |\everypar| ont déjà été insérées, il ne 
% faut donc pas en insérer de nouveau.
%    \begin{macrocode}
    \setbox\z@\lastbox
    \edef\AP@noindent
      {{\everypar{}\ifvoid\z@\noindent\else\indent\fi}}%
    \par
  \else
%    \end{macrocode}
% La possibilité (bien pire) qu'il reste est que la routine de sortie a été
% déclenchée par le début de mathématiques en mode hors texte dans un 
% paragraphe.
%
% Nous sortons du mode hors texte avec |$$| puis ajustons l'espacement (entrant
% en même temps dans le mode vertical). |\AP@noindent| relancera plus tard le
% mode hors texte. Les unités lexicales |\everydisplay| ont déjà été insérées 
% (elles s'appliquent à la liste mathématique qui sera entamée par 
% |\AP@noindent|, même si la présence de ces unités lexicales a été déclenchée
% par le mode mathématique hors texte qui a été fermé par les lignes 
% ci-dessous !). Les valeurs de |\prevgraf| et de |\predisplaysize| sont
% sauvegarder pour être utilisées pour la future liste mathématique. 
%    \begin{macrocode}
    \abovedisplayshortskip\z@\abovedisplayskip\z@
    \belowdisplayshortskip\z@\belowdisplayskip\z@
    \xdef\AP@disp{%
      \predisplaysize\the\predisplaysize
      \prevgraf\the\prevgraf\relax}%
    $$\vskip-\baselineskip\vskip-\parskip
    \edef\AP@noindent{%
%    \end{macrocode}
% Ne pas insérer d'unites lexicales |\everydisplay| à nouveau.
%    \begin{macrocode}
      \toks@{\the\everydisplay}\everydisplay{}%
%    \end{macrocode}
% Le mode hors texte commence sans une fausse ligne de paragraphe au-dessus de
% lui. Les valeurs |\prevgraf| et |\predisplaysize| sont restaurées. La
% commande |\aftergroup| est utilisée pour restaurer la bonne configuration de
% |\everydisplay| après que ce mode hors texte se soit achevé.
%    \begin{macrocode}
      {\everypar{}\noindent}$$\AP@disp\aftergroup\noexpand\AP@ed}%
  \fi\fi
%    \end{macrocode}
% Maintenant nous passons en routine de sortie et nous passons l'ensemble
% des éléments de la page dans la boîte |\AP@partial|.
%    \begin{macrocode}
  \begingroup
  \nointerlineskip\null
    \output{%
      \global\setbox\AP@partial\vbox{%
        \unvbox\@cclv
         \global\setbox\@ne\lastbox}%
%    \end{macrocode}
% Si le texte qui est sauvegardé dans |\AP@partial| a des notes de bas de page,
% nous les prenons aussi car sinon elles pourraient revenir sur la page 
% précédent la page qui a la marque de note de bas de page ! Cet ajout a été 
% fait en version V1.08.
%    \begin{macrocode}
       \global\setbox\AP@footins\box\footins}%
%    \end{macrocode}
% Ayant défini la routine de sortie, nous la déclenchons\ldots 
%    \begin{macrocode}
  \eject
  \endgroup}
%    \end{macrocode}
%
% |\AP@| stocke toutes les commandes qui doivent être exécutées après le
% saut de page.
%    \begin{macrocode}
\let\AP@\relax
%    \end{macrocode}
%
% Le registre |\everydisplay| est restauré. La commande |\ignorespaces| empêche
% d'avoir un espace ou une nouvelle ligne après le |$$| créant une indentation
% ou un paragraphe scélérat.
%    \begin{macrocode}
\def\AP@ed{\everydisplay\expandafter{\the\toks@}\ignorespaces}
%    \end{macrocode}
%
% \tradini
% Remove the current vertical list, insert the commands |\AP@|
% at the top of the page, and then re-insert the saved text.
%    \begin{macrocode}
\def\AP@@{%
  \AP@savetop
  \global\expandafter\let\expandafter\AP@\expandafter\relax\AP@
  \par
%    \end{macrocode}
% The text originally at the top of this page is now stored in the box
% |\AP@partial|, including  |\topskip| glue. Now we want to unbox
% |\AP@partial|, placing the baseline of the first row |\baselineskip|
% below the baseline of the last line coming from the afterpage text.
% If we assumed nothing has too much height or depth (and |\topskip| is
% rigid), it would be fairly trivial to position the contents of
% |\AP@partial| so that the baseline of the first row was
% |\baselineskip| below the last row just added.
%
% In this version, I thought it might be fun to try to exactly achieve
% the |\baselineskip|--or--|\lineskip| calculation that \TeX\ normally
% does internally.  The call to |\addboxcontents| does the right thing
% (I hope).
%    \begin{macrocode}
   \addboxcontents\AP@partial
%    \end{macrocode}
% Now re-insert any footnote text. This may not be quite the right
% place, as the text that has just been unboxed may break over a page
% in its new position. Also it may not be the right number if the text
% from |\afterpage| itself contains footnotes. Too bad!
%    \begin{macrocode}
  \ifvoid\AP@footins\else
         \insert\footins{\unvbox\AP@footins}\fi
%    \end{macrocode}
% Now repair things if we started off in horizontal mode.
%    \begin{macrocode}
  \AP@noindent}
%    \end{macrocode}
%
% If |\AP@| is not |\relax| then the current page already has some
% `afterpage' commands, so just add the new commands to the end of the
% list. Otherwise save the commands in |\AP@|. (within a local group),
% and switch the output routine. (The new output routine just calls the
% old one if it is invoked by a \LaTeX{} float.
%    \begin{macrocode}
\long\def\afterpage#1{%
  \ifx\AP@\relax
    \gdef\AP@{{#1\par}}%
    \global\output{%
      \the\AP@output
      \ifnum\outputpenalty>-\@Mi
        \global\output\expandafter{\the\AP@output}%
        \aftergroup\AP@@
      \fi}%
  \else
    \expandafter\gdef\expandafter\AP@\expandafter{\AP@{#1\par}}%
  \fi}
%    \end{macrocode}
%
% If we have got to the end of the document or clearpage
% just put the stuff out  without any trickery.
%    \begin{macrocode}
\let\AP@clearpage\clearpage
\def\clearpage{%
  \ifx\AP@\relax
    \AP@clearpage
  \else
    \global\output\expandafter{\the\AP@output}%
    \AP@clearpage
%    \end{macrocode}
% At this point (since v1.08) Need to clear |\AP@| \emph{before}
% using its expansion, as otherwise hit an infinite loop. Sigh.
%    \begin{macrocode}
    \global\expandafter\let\expandafter\AP@\expandafter\relax
    \expandafter\expandafter\AP@
  \fi}
\let\AP@enddocument\enddocument
\def\enddocument{%
  \ifx\AP@\relax\else
    \global\output\expandafter{\the\AP@output}%
    \AP@clearpage
    \global\expandafter\let\expandafter\AP@\expandafter\relax
    \expandafter\expandafter\AP@
  \fi
    \AP@enddocument}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\addboxcontents}
% \tradini
% Given a vbox |#1|, add to the current vertical list such that the end
% result is equivalent to the list that \TeX\ would have built had the
% contents of |#1| (apart from any initial glue) been added individually
% to the current list.

% So essentially, the problem is that of unboxing |#1|, but replacing
% the glue at the top of |#1| with (something equivalent to) the
% |\baselineskip| or |\lineskip| glue that \TeX\ would normally have
% placed before the first box in |#1|. Also |\prevdepth| must be set at
% the end.
%    \begin{macrocode}
\def\addboxcontents#1{{%
%    \end{macrocode}
% Perhaps I shouldn't use grouping here, as I probably don't really want
% to save |#1|. If it is removed, |\splittopskip| and |\splitmaxdepth|
% would need to be restored by hand.
%
% First replace any glue at the top by |\vskip 0pt|.
%    \begin{macrocode}
  \splittopskip\z@
  \splitmaxdepth\maxdimen
  \setbox#1\vbox{\break\unvbox#1}%
  \setbox\z@\vsplit#1to\z@
%    \end{macrocode}
% Put the breakpoint back.
%    \begin{macrocode}
  \setbox#1\vbox{\break\unvbox#1}%
%    \end{macrocode}
% Set |\skip@| to be height of |#1| (without top glue)
%    \begin{macrocode}
  \skip@\ht#1%
%    \end{macrocode}
% Now make the first baseline of the first row be |\vsize| from the top.
% (This assumes that the first row has height less than |\vsize|.)
%    \begin{macrocode}
  \splittopskip\vsize
  \setbox\z@\vsplit#1to\z@
%    \end{macrocode}
% Subtract the new height of |#1| from |\skip@|, and add back on
% |\splittopskip|, so |\skip@| is now the height of the first row of
% |#1| This may still be 0pt if (eg) a mark or whatsit is between the
% top glue and the first box. Save (this height${}-{}$|\splittopskip|)
% in |\skip\tw@|.
%    \begin{macrocode}
  \advance\skip@-\ht#1%
  \skip\tw@\skip@
  \advance\skip@\splittopskip
%    \end{macrocode}
% Now fake \TeX's |\baselineskip| calculation.
%    \begin{macrocode}
  \advance\skip@\prevdepth
  \advance\skip@-\baselineskip
  \advance\skip\tw@\ifdim-\skip@<\lineskiplimit\lineskip\else-\skip@\fi
%    \end{macrocode}
% Finally add the glue.
%    \begin{macrocode}
  \vskip\skip\tw@
%    \end{macrocode}
% Now unbox the box, setting |\prevdepth| by hand, as |\unvbox| (unlike
% |\box|) does not automatically set it.
%    \begin{macrocode}
  \global\dimen@i\dp#1%
  \unvbox#1}%
  \prevdepth\dimen@i}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale
%
