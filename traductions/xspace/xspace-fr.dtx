% \iffalse meta-comment
%
% Copyright 1993-2014
%
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% This file is part of the Standard LaTeX `Tools Bundle'.
% -------------------------------------------------------
%
% It may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% The list of all files belonging to the LaTeX `Tools Bundle' is
% given in the file `manifest.txt'.
%
% \fi
% \iffalse
%% File: xspace.dtx Copyright (C) 1991-1997 David Carlisle
%% File: xspace.dtx Copyright (C) 2004-2006 David Carlisle,
%%                                          Morten H\o gholm
%
%<*dtx>
          \ProvidesFile{xspace.dtx}
%</dtx>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{xspace}
%<driver>\ProvidesFile{xspace.drv}
% \fi
%         \ProvidesFile{xspace.dtx}
          [28/10/2014 v1.13 Space after command names (DPC,MH)]
%
% \iffalse
%<*driver>
\documentclass{ltxdoc}
\usepackage[ltxdoc,inputenc,fontenc,babel]{translatex-fr}
\makeatletter
\providecommand*\eTeX{{%
  \if b\expandafter\@car\f@series\@nil\boldmath\fi$\m@th
  \varepsilon$-\TeX}}
\makeatother
\usepackage{xspace}[2006/05/08]
\GetFileInfo{xspace.sty}
\begin{document}
\DocInput{xspace-fr.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{xspace.dtx}
% \title{L'extension \textsf{xspace}\thanks{Ce fichier a pour numéro de 
%        version \fileversion\ et a été mis à jour le \filedatefr. La première
%        traduction, basée sur la version 1.06 a été publiée par 
%        Jean-Drucbert en 2001.}}
% \author{David Carlisle \and Morten H\o gholm}
% \date{\filedatefr}
% \MaintainedByLaTeXTeam{tools}
% \maketitle
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%
% \changes{v1.00}{1991/08/30}{Version initiale}
% \changes{v1.01}{1992/06/26}{Re-issue for the new doc and docstrip}
% \changes{v1.02}{1994/01/31}{Re-issue for LaTeX2e (no change to
%   code)}
% \changes{v1.07}{2004/12/07}{Make extensible. tools/3712}
% \changes{v1.07}{2004/12/07}{Fix active characters. tools/3747}
% \changes{v1.07}{2004/12/07}{Update documentation}
% \changes{v1.08}{2005/05/07}{Better fix for active characters}
% \changes{v1.09}{2005/07/26}{Improve test by exiting if
%   \cs{@let@token} is a letter}
% \changes{v1.10}{2005/10/04}{Use higher level functions for
% conditional processing}
% \changes{v1.10}{2005/10/04}{Improve expansion method}
%

% \begin{abstract}
% La commande |\xspace| s'utilise à la fin de commandes pensées pour être
% intégrées principalement dans du texte. Elle ajoute une espace à moins que
% la commande ne soit suivie par certains signes de ponctuation. 
% \end{abstract}
%
% \section{Introduction}
% \newcommand{\gb}{La Grande Bretagne\xspace}\DescribeMacro{\xspace}
% Après avoir défini |\newcommand{\gb}{Grande Bretagne\xspace}|, la commande 
% |\gb| détermine si une espace doit être insérée après elle ou pas. Ainsi, 
% la saisie
% \begin{quote}
% |\gb est un très bel endroit pour vivre.\\| \\
% |\gb, une petite île au large des côtes françaises.\\|\\
% |\gb\footnote{La petite île au large des côtes françaises.}|\\
% |est un très bel endroit pour vivre.|
% \end{quote}
% conduit au résultat suivant 
% \begin{quote}
% \gb est un très bel endroit pour vivre. \\
% \gb, une petite île au large des côtes françaises.\\
% \gb\footnote{La petite île au large des côtes françaises.}
% est un très bel endroit pour vivre.
% \end{quote}
% |\xspace| évite à l'utilisateur de saisir \verb*+\ + ou |{}| après la plupart
% des occurrences d'une commande dans du texte. Cependant, si l'une de ces deux
% constructions suit |\xspace|, ce dernier n'ajoute pas d'espace. Ceci implique
% qu'il est possible d'ajouter |\xspace| à la fin de commandes déjà présentes 
% sans risques et sans faire trop de changements dans votre document. En 
% particulier, |\xspace| insérera toujours une espace si l'élément qui le suit
% est une lettre normale, ce qui est cas classique.
%
% Parfois, |\xspace| peut prendre une mauvaise décision en ajoutant une
% espace non souhaitée. Il y a différentes raisons à ce comportement mais ce 
% problème peut toujours être traité en faisant suivre la commande d'un |{}|, 
% dans la mesure où ceci a pour effet de supprimer l'espace.
%
%
% \subsection{Ajout de nouvelles exceptions}
%
% Une des raisons les plus courantes pour |\xspace| d'insérer une espace non
% souhaitée survient quand il est suivi d'une commande qui n'est pas dans sa
% liste des exceptions. 
% \DescribeMacro{\xspaceaddexceptions}%
% Avec |\xspaceaddexceptions|, vous pouvez ajouter de nouveaux caractères ou 
% commandes pour qu'ils soient reconnus par le mécanisme d'analyse de 
% |\xspace|. Les utilisateurs d'extensions avancées sur les notes en bas de
% page comme \textsf{manyfoot} vont souvent définir de nouvelles commandes de
% notes de bas de page qui ne devraient pas impliquer l'ajout d'une espace à la
% suite d'une commande \og améliorée \fg{} par |\xspace|. Si vous définissez 
% les commandes de note de page |\footnoteA| et |\footnoteB|, ajoutez la ligne
% suivante à votre préambule.
% \begin{quote}
% |\xspaceaddexceptions{\footnoteA \footnoteB}|
% \end{quote}
%
%
% \subsection{Support des caractères actifs}
%
%
% L'autre exemple courant que |\xspace| ne traite pas bien se produit en 
% présence de caractères actifs. Généralement, cette extension doit être
% chargée \emph{après} toute extension linguistique (ou autre) qui rend la
% ponctuation \og active \fg{}. Ceci complexifie la tâche pour \textsf{xspace} 
% lors de travaux avec l'extension populaire \textsf{babel} tout 
% particulièrement parce que les signes de ponctuation peuvent basculer du 
% statut \og actif \fg{} à \og autre \fg{} et inversement. À partir de la 
% version~1.08 de \textsf{xspace}, deux manières de gérer ce point sont 
% disponibles en fonction du moteur utilisé par votre format \LaTeX : 

% \begin{description}
%   \item[\TeX] Les signes de ponctuation sont ajoutés à la liste d'exceptions 
%   à la fois dans leur version normale et active, assurant ainsi qu'ils seront
%   toujours reconnus.
%   \item[\eTeX] Les caractères sont lus à nouveau lors du passage dans la
%   liste des exceptions, ce qui signifie que la comparaison interne se fait
%   sur l'état courant du caractère. Ceci fonctionne quelque soit l'astuce de
%   code de catégorie utilisée par les autres extensions.
% \end{description}
%
% Au moment de la rédaction de ce document, toutes les grandes distributions
% \TeX\ utilisent \eTeX\ comme moteur pour \LaTeX, ce qui fait que tout devrait
% bien se passer. S'il se trouve que vous utilisez le \TeX\ standard et que
% |\xspace| semble prendre la mauvaise décision, alors vous pouvez soit 
% utiliser |{}| comme décrit ci-dessus pour le corriger, soit ajouter le
% caractère à la liste mais avec le code de catégorie souhaité. Voir 
% l'implémentation pour un exemple de ce qu'il faut alors faire.
%
% \subsection{Toujours pas satisfait ?}
%
% Certaines personnes n'aiment pas la liste des exceptions, aussi peuvent-ils
% retrancher un élément à la fois de cette liste avec une commande dédiée 
% \DescribeMacro{\xspaceremoveexception}^^A
% \cs{xspaceremoveexception}\marg{unité-lexicale}.  De plus, la commande 
% \DescribeMacro{\@xspace@hook}\cs{@xspace@hook} peut être définie pour 
% analyser plus avant la suite du texte dans le cas où vous souhaiteriez
% vérifier plus d'unités lexicales. Elle est appelée une fois que \cs{xspace}
% a déterminé s'il faut insérer une espace ou si une exception a été trouvée 
% (la définition par défaut de \cs{@xspace@hook} est vide). Par conséquent, 
% vous pouvez utiliser \cs{unskip} pour retirer l'espace insérée si 
% \cs{@let@token} rencontre quelque chose de spécial. L'exemple ci-dessous 
% montre comment garantir qu'un tiret demi-quadratin\footnote{Ce tiret est codé
% par |-{}-| en \LaTeX.}placé après un \cs{xspace} obtienne une espace mais
% que ce ne soit pas le cas avec un trait d'union.
% \begin{verbatim}
% \xspaceremoveexception{-}
% \makeatletter
% \renewcommand*\@xspace@hook{%
%   \ifx\@let@token-%
%     \expandafter\@xspace@dash@i
%   \fi
% }
% \def\@xspace@dash@i-{\futurelet\@let@token\@xspace@dash@ii}
% \def\@xspace@dash@ii{%
%   \ifx\@let@token-%
%   \else
%     \unskip
%   \fi
%   -%
% }
% \makeatother
% \end{verbatim}
%
%
% \StopEventually{}
%
% \section{Les commandes}
%
% |\xspace| jette un coup d'\oe il à l'unité lexicale qui suit. Si elle 
% appartient à notre liste d'exception, |\xspace| sort de la boucle d'analyse
% et ne fait rien; sinon il essaye de développer l'unité lexicale et 
% recommence son analyse. Si ceci conduit à une unité lexicale non développable
% sans qu'une exception ait été trouvée, une espace est insérée.
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \begin{macro}{\xspace}
% |\xspace| regarde juste un cran en avant et appelle alors |\@xspace|.
% \changes{v1.03}{1994/11/15}{Make robust}
%    \begin{macrocode}
\DeclareRobustCommand\xspace{\@xspace@firsttrue
  \futurelet\@let@token\@xspace}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\if@xspace@first}
% \changes{v1.11}{2006/02/12}{Added macro}
% \begin{macro}{\@xspace@simple}
% \changes{v1.11}{2006/02/12}{Added macro}
% Quelques aides pour éviter des appels multiples de |\@xspace@eTeX@setup|.
%    \begin{macrocode}
\newif\if@xspace@first
\def\@xspace@simple{\futurelet\@let@token\@xspace}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@xspace@exceptions@tlp}
% \changes{v1.07}{2004/12/07}{Added macro}
% La liste d'exception. Si le mécanisme d'analyse trouve une de ces exceptions,
% il n'y a pas insertion d'une espace après la commande. Le \texttt{tlp} dans 
% le nom signifie \og \emph{token list pointer} \fg{} (pointeur de liste 
% d'unité lexicale).
%    \begin{macrocode}
\def\@xspace@exceptions@tlp{%
  ,.'/?;:!~-)\ \/\bgroup\egroup\@sptoken\space\@xobeysp
  \footnote\footnotemark
  \xspace@check@icr
}
%    \end{macrocode}
% Et ici nous avons la définition non vide de \cs{check@icr}. 
% \changes{v1.13}{2009/10/20}{fix for "tools/3895": `text font commands fool xspace'}
%    \begin{macrocode}
\begingroup
  \text@command\relax
  \global\let\xspace@check@icr\check@icr
\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xspaceaddexceptions}
% \changes{v1.07}{2004/12/07}{Added macro}
% La commande utilisateur qui permet d'ajouter (\emph{add}) des unités 
% lexicales à la liste.
%    \begin{macrocode}
\newcommand*\xspaceaddexceptions{%
  \g@addto@macro\@xspace@exceptions@tlp
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\xspaceremoveexception}
% \changes{v1.10}{2005/10/04}{Use higher level functions for
% conditional processing}
% Cette commande retire (\emph{remove}) une exception globalement.
%    \begin{macrocode}
\newcommand*\xspaceremoveexception[1]{%
%    \end{macrocode}
% Il faut d'abord vérifier si elle est bien dans la liste.
%    \begin{macrocode}
  \def\reserved@a##1#1##2##3\@@{%
    \@xspace@if@q@nil@NF##2{%
%    \end{macrocode}
% Elle est dans la liste : elle est alors retranchée.
%    \begin{macrocode}
      \def\reserved@a####1#1####2\@@{%
        \gdef\@xspace@exceptions@tlp{####1####2}}%
      \expandafter\reserved@a\@xspace@exceptions@tlp\@@
    }%
  }%
  \expandafter\reserved@a\@xspace@exceptions@tlp#1\@xspace@q@nil\@@
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@xspace@break@loop}
% \changes{v1.08}{2005/04/28}{Added macro}
% \changes{v1.10}{2005/10/04}{Use quark instead}
% Pour arrêter (\emph{break}) la boucle (\emph{loop}).
%    \begin{macrocode}
\def\@xspace@break@loop#1\@nil{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@xspace@hook}
% \changes{v1.09}{2005/07/26}{Added macro}
% Un point d'entrée (\emph{hook}) pour les utilisateurs avec des besoins
% spéciaux.
%    \begin{macrocode}
\providecommand*\@xspace@hook{}
%    \end{macrocode}
% \end{macro}
%
% Ici, nous vérifions si nous utilisons \eTeX. Nous ne pouvons utiliser la
% commande \cs{@ifundefined} car elle bloque les codes de catégorie et nous 
% avons besoin de les modifier. Comme il existe un risque que quelqu'un ait
% défini par accident \cs{eTeXversion} comme valant \cs{relax}, nous vérifions
% ce cas précis mais sans définir pour autant la commande en tant que 
% \cs{relax} si elle ne l'était pas.
%    \begin{macrocode}
\begingroup\expandafter\expandafter\expandafter\endgroup
  \expandafter\ifx\csname eTeXversion\endcsname\relax
%    \end{macrocode}
% Si nous utilisons une version classique de \TeX, nous ajoutons les cas les
% plus courants de signes de ponctuation actifs. Nous les rendons tout d'abord
% actifs.
%    \begin{macrocode}
  \begingroup
    \catcode`\;=\active  \catcode`\:=\active
    \catcode`\?=\active  \catcode`\!=\active
%    \end{macrocode}
% L'environnement \texttt{alltt} rend \og |,| \fg{}, \og |'| \fg{} et \og |-|
% \fg{} actifs ; nous les ajoutons donc également.
%    \begin{macrocode}
    \catcode`\,=\active  \catcode`\'=\active  \catcode`\-=\active
    \xspaceaddexceptions{;:?!,'-}
  \endgroup
  \let\@xspace@eTeX@setup\relax
%    \end{macrocode}
% \begin{macro}{\@xspace@eTeX@setup}
% \changes{v1.10}{2005/10/04}{Added macro}
% \changes{v1.12}{2006/05/08}{Bug fix for verbatim in output routine}
% Quand nous utilisons \eTeX, nous avons l'avantage de disposer de la commande
% \cs{scantokens} qui va ici repasser en revue les codes de catégorie courants.
% Cette petite astuce pour le développement des unités lexicales garantit que 
% la liste des exceptions est redéfinie avec son contenu en tenant compte de
% la valeur présente des codes de catégorie. C'est pourquoi nous faisons en 
% sorte que le code de catégorie de l'espace soit 10, car nous avons un 
% \verb*|\ | dans la liste.
%    \begin{macrocode}
\else
  \def\@xspace@eTeX@setup{%
    \begingroup
      \everyeof{}%
      \endlinechar=-1\relax
      \catcode`\ =10\relax
      \makeatletter
%    \end{macrocode}
% Nous pouvons aussi avoir la malchance que la relecture de la liste se passe
% au moment où les codes de catégorie de |\|, |{| et |}| sont \og autres 
% \fg{}, par exemple quand, dans un en-tête, la routine de sortie est 
% appelée au milieu d'un environnement \texttt{verbatim}.
%    \begin{macrocode}
      \catcode`\\\z@
      \catcode`\{\@ne
      \catcode`\}\tw@
      \scantokens\expandafter{\expandafter\gdef
        \expandafter\@xspace@exceptions@tlp
        \expandafter{\@xspace@exceptions@tlp}}%
    \endgroup
  }
\fi
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@xspace}
% \changes{v1.03}{1994/11/15}{Add exclamation mark}
% \changes{v1.04}{1996/05/17}{Add slash}
% \changes{v1.05}{1996/12/06}{Add space for alltt etc. tools/2322}
% \changes{v1.06}{1997/10/13}{Add normal space. tools/2632}
% \changes{v1.07}{2004/12/07}{Now runs through a list of exceptions}
% \changes{v1.07}{2004/12/07}{Added \cs{footnote} and
% \cs{footnotemark}}
% \changes{v1.08}{2005/05/07}{Use recursive loop instead of \cs{@tfor}}
% \changes{v1.09}{2005/07/26}{Only check non-letters and add hook}
% \changes{v1.10}{2005/10/04}{Use higher level functions for
% conditional processing}
% \changes{v1.10}{2005/10/04}{Improve expansion method} 
% Si l'unité lexicale suivante est une de celles appartenant à une liste de
% caractères, rien n'est fait, sinon une espace est ajoutée. Avec la 
% version~1.07, l'approche a été modifiée radicalement pour passer à travers
% la liste d'exception |\@xspace@exceptions@tlp| et vérifier chaque unité
% lexicale une par une.
%    \begin{macrocode}
\def\@xspace{%
%    \end{macrocode}
% Avant de commencer à vérifier la liste des exceptions, il est intéressant
% de procéder à une vérification rapide de l'unité lexicale en question.
% La plupart du temps, \cs{xspace} se trouve dans du texte normal et 
% \cs{@let@token} est une lettre. Dans ce cas, il ne sert à rien de vérifier
% la liste des exceptions car elle ne contiendra pas d'unité lexicale de
% catégorie~11. 
%
% Vous pourriez ici vous demander pourquoi il y a ici des fonctions spéciales
% plutôt que de simples \cs{ifx} conditionnels. La raison pour cela est que
% a)~de cette façon, nous n'avons pas à ajouter une multitude 
% d'\cs{expandafter} pour obtenir le bon regroupement et b)~nous ne 
% rencontrerons pas de problème quand \cs{@let@token} sera égale à \cs{if}.
%    \begin{macrocode}
  \@xspace@lettoken@if@letter@TF \space{%
%    \end{macrocode}
% Sinon nous commençons à tester après avoir défini quelques éléments. Si
% nous utilisons \eTeX{}, nous repassons en revue les codes de catégorie mais
% seulement la première fois.
%    \begin{macrocode}
    \if@xspace@first
      \@xspace@firstfalse
      \let\@xspace@maybespace\space
      \@xspace@eTeX@setup
    \fi
    \expandafter\@xspace@check@token
      \@xspace@exceptions@tlp\@xspace@q@nil\@nil
%    \end{macrocode}
% Si une exception a été trouvée, \cs{@xspace@maybespace} est définie
% comme \cs{relax} et nous ne faisons rien. 
%    \begin{macrocode}
    \@xspace@token@if@equal@NNT \space \@xspace@maybespace
%    \end{macrocode}
% Sinon nous vérifions si nous avons trouvé un élément développable et
% réessayons avec cette unité lexicale développée une fois. Si aucune 
% unité développable n'est trouvée, nous insérons une espace et appliquons 
% alors le code du point d'entrée.
%    \begin{macrocode}
    {%
      \@xspace@lettoken@if@expandable@TF
      {\expandafter\@xspace@simple}%
      {\@xspace@maybespace\@xspace@hook}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@xspace@check@token}
% \changes{v1.07}{2004/12/07}{Added macro}
% \changes{v1.08}{2005/05/07}{Made function recursive}
% \changes{v1.10}{2005/10/04}{Use higher level functions for
% conditional processing}
% \changes{v1.11}{2006/02/12}{Modified so the \cs{@let@token} can be
%   \cs{outer}}
% La commande compare juste l'élément courant dans la liste des exceptions
% avec \cs{@let@token}. S'ils sont égaux, nous faisons en sorte qu'aucune
% espace ne soit insérée et nous sortons de la boucle.
%    \begin{macrocode}
\def\@xspace@check@token #1{%
  \ifx\@xspace@q@nil#1%
    \expandafter\@xspace@break@loop
  \fi
  \expandafter\ifx\csname @let@token\endcsname#1%
    \let\@xspace@maybespace\relax
    \expandafter\@xspace@break@loop
  \fi
  \@xspace@check@token
}
%    \end{macrocode}
% \end{macro}
%
% Et c'est tout pour aujourd'hui ! Du moins, si nous avions utilisé \LaTeX3. 
% Dans ce cas, nous aurions eu de belles fonctions pour toutes les conditions
% mais nous devons ici les définir nous-même. Nous les optimisons également car
% \cs{@let@token} sera toujours l'argument dans certains cas.
%
% \begin{macro}{\@xspace@lettoken@if@letter@TF}
% \begin{macro}{\@xspace@lettoken@if@expandable@TF}
% \begin{macro}{\@xspace@token@if@equal@NNT}
% D'abord quelques comparaisons.
%    \begin{macrocode}
\def\@xspace@lettoken@if@letter@TF{%
  \ifcat\noexpand\@let@token @% letter
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi}
\def\@xspace@lettoken@if@expandable@TF{%
  \expandafter\ifx\noexpand\@let@token\@let@token%
    \expandafter\@secondoftwo
  \else
    \expandafter\@firstoftwo
  \fi
}
\def\@xspace@token@if@equal@NNT#1#2{%
  \ifx#1#2%
    \expandafter\@firstofone
  \else
    \expandafter\@gobble
  \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\@xspace@q@nil}
% \begin{macro}{\@xspace@if@q@nil@NF}
% Quelques commandes pour traiter les quarks.
%    \begin{macrocode}
\def\@xspace@q@nil{\@xspace@q@nil}
\def\@xspace@if@q@nil@NF#1{%
  \ifx\@xspace@q@nil#1%
    \expandafter\@gobble
  \else
    \expandafter\@firstofone
  \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale
