% \iffalse meta-comment
%%
%% ----------------------------------------------------------------
%% Copyright (C) 2003-2016 by Dr. Uwe Kern <xcolor at ukern dot de>
%% ----------------------------------------------------------------
%%
%<*package>
%% Please send error reports and suggestions for
%% improvements to the above email address.
%%
%% This package contains code copied from
%%
%% color.dtx [1999/02/16 v1.0i Standard LaTeX Color (DPC)]
%% Copyright (C) 1994--1999 David Carlisle
%%
%% which is part of the Standard LaTeX `Graphics Bundle'.
%%
%</package>
%<*extract|driver|test1|test2|test3|test4>
\def\XCfileversion{v2.12}%
\def\XCfiledate{11/05/2016}%
%</extract|driver|test1|test2|test3|test4>
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.2
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.2 or later is part of all distributions of LaTeX
% version 1999/12/01 or later.
%
% \fi
%
% \CheckSum{4864}
%
% \DoNotIndex{\def,\gdef,\edef,\xdef,\long,\let}
% \DoNotIndex{\ifnum,\ifdim,\iftrue,\iffalse,\ifx,\ifcase,\else,\or,\fi}
% \DoNotIndex{\bgroup,\egroup,\begingroup,\endgroup,\begin,\end}
% \DoNotIndex{\relax,\endinput}
% \DoNotIndex{\csname,\endcsname,\string,\the,\noexpand,\expandafter}
% \DoNotIndex{\advance,\count,\dimen}
% \DoNotIndex{\m@ne,\z@,\@ne,\tw@,\p@,\@@tmp}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \iffalse
%<*batchfile>
\IfFileExists{xcolor.ins}{\let\uknext=\relax}{\let\uknext=\stop}
\begin{filecontents*}{xcolor.ins}
%% Package `xcolor' by Dr. Uwe Kern
%%
%% Extract all package files:
%%   `latex xcolor.ins'
%%
%% Put the generated files to their respective locations
%% within the TeX installation:
%%   *.sty -> /tex/latex/xcolor/
%%   *.def -> /tex/latex/xcolor/
%%   *.pro -> /dvips/xcolor/
%%
%% Create the documentation:
%%   `latex xcolor-fr.dtx'
%%   `latex xcolor-fr.dtx'
%%   `makeindex -s gind.ist xcolor.idx'
%%   `latex xcolor-fr.dtx'
%%   `latex xcolor-fr.dtx'
%%
%% Run the test files (N=1,2,...):
%%   `latex xcolorN.tex'
%%   `latex xcolorN.tex'
%%
\def\batchfile{xcolor.ins}
\input docstrip.tex
\askforoverwritefalse
\generate{\file{xcolor.lox}{\from{xcolor-fr.dtx}{extract}}}
\batchinput{xcolor.lox}
\endbatchfile
\end{filecontents*}
%</batchfile>
%
%<*driver>
\listfiles
\ProvidesFile{xcolor-fr.dtx}[\XCfiledate\space\XCfileversion\space
                          `xcolor' source and documentation (FR)]
\documentclass{ltxdoc}
\usepackage[table,showerrors,dvipsnames,hyperref]{xcolor}[2005/06/06]
\usepackage[ltxdoc,fontenc,inputenc,babel]{translatex-fr}
\usepackage[french]{varioref}
\usepackage{chngpage,tabularx,amsmath,amsthm}
\usepackage
 [\GinDriver,hyperindex=false,bookmarks,bookmarksopen,bookmarksopenlevel=1,%
  pdftitle={xcolor \XCfileversion{} (\XCfiledate)},pdfauthor={Dr. Uwe Kern},%
  pdfsubject={Color extensions for LaTeX and pdfLaTeX},%
  pdfkeywords={xcolor,color,colour,model,tint,tone,shade,harmony,spot,latex,pdftex,dvips,%
   conversion,blend,mix,mask,separation,rgb,cmy,cmyk,hsb,gray,html,wave,thsb,wheel}]{hyperref}
\OnlyDescription
\EnableCrossrefs
\CodelineIndex
\makeatletter
\def\Meaning#1{\texttt{\expandafter\expandafter\expandafter\strip@prefix\expandafter\meaning\csname #1\endcsname}}
\makeatother
\pagestyle{myheadings}
\markright{\hskip-2.5cm xcolor \XCfileversion\space(\XCfiledate)}
\begin{document}
 \DocInput{xcolor-fr.dtx}
 \let\Section\section\def\section*#1{\Section*{#1}\addcontentsline{toc}{section}{#1}}
 \begin{adjustwidth}{-2.5cm}{}
 \def\markboth#1#2{}\PrintIndex
 \end{adjustwidth}
\end{document}
%</driver>
%
%<*extract>
\def\ukfile#1#2#3#4%
 {\def\ukhead
   {\ifnum#1>2 \perCent!^^J\fi
    \defaultpreamble^^J\MetaPrefix^^J%
    \ifcase#1
      \string\ProvidesPackage{#2}^^J\or
      \string\ProvidesFile{#2}^^J\or
      \string\ProvidesFile{#2.def}^^J\or
      \MetaPrefix\space #2.pro (PostScript/dvips header file)^^J\MetaPrefix\space
    \fi
    \space[\XCfiledate\space\XCfileversion\space#4\space(UK)]}
  \usepreamble\ukhead
  \file{#2.\ifcase#1sty\or tex\or def\or pro\fi}{\from{xcolor-fr.dtx}{#3}}}
\generate{
\ukfile0{xcolor}{package}{LaTeX color extensions}
\ukfile2{svgnam}{svgnames}{Predefined colors according to SVG 1.1}
\ukfile2{x11nam}{x11names}{Predefined colors according to Unix/X11}
\ukfile1{xcolor1}{test1}{Color conversion test}
\ukfile1{xcolor2}{test2}{Pstricks color test}
\ukfile1{xcolor3}{test3}{Color logging test}
\ukfile1{xcolor4}{test4}{Color driver test}
\def\PStail{\MetaPrefix\space End of file `\outFileName'.}
\usepostamble\PStail
\ukfile3{xcolor}{dvips}{LaTeX color extensions}
}
%</extract>
% \fi
%
%
%
% \iffalse
%-------------------------------------------------------------------------------
% \fi
%
%
% \makeatletter
%
% \def\testclr#1#{\@testclr{#1}}
% \def\@testclr#1#2{{\fboxsep\z@\fbox{\colorbox#1{#2}{\phantom{XX}}}}}
% \def\Testclr#1#{\@Testclr{#1}}
% \def\@Testclr#1#2#3{\testclr#1{#2}~\rlap{\Colorfr[-]{#3}}\\}
% \def\TestClr#1#{\@TestClr{#1}}
% \def\@TestClr#1#2#3{\testclr#1{#2}~\rlap{\Colorfr[+]{#3}}\\}
% \newif\if@Meta
% \DeclareRobustCommand*\Meta{\@ifstar{\@Metatrue\@Meta}{\@Metafalse\@Meta}}
% \newcommand*\@Meta[2][]{\meta{#2}\@ifxempty{#1}{}{\ensuremath{\mskip-1mu\rule[-.4ex]{0pt}{1ex}_{#1}}}\if@Meta\index{arguments\levelchar\meta{#2}\string|usage}\fi}
% \def\DescribeArg#1{\leavevmode\@bsphack\marginpar{\raggedleft\Meta*{#1}}\@esphack\ignorespaces}
% \def\DescribeFunc#1{\leavevmode\@bsphack\marginpar{\raggedleft\Function{#1}\strut}\@esphack\ignorespaces}
%
% \makeatother
%
% \def\Index#1{#1\index{#1\string|usage}}
% \def\Package#1{\textsf{#1}\index{extensions\levelchar\textsf{#1}\string|usage}}
% \def\Program#1{\textsf{\itshape#1}\index{programmes\levelchar\textsf{\itshape#1}\string|usage}}
% \def\Model#1{\textsf{\bfseries#1}\index{modèles colorimétriques\levelchar\textsf{\bfseries#1}\string|usage}}
% \def\nModel#1{`#1'\index{modèles colorimétriques\levelchar`#1'\string|usage}}
% \def\pModel#1{\textbf{\itshape #1}}
% \def\People#1#2{#1 #2\index{personnes\levelchar#2, #1\string|usage}}
% \newcommand*\Color[3][+]{#2 (\emph{#3})\ifx#1+\index{noms de couleur\levelchar#2 (\emph{#3})\string|usage}\index{noms de couleur\levelchar#3\actualchar{}\emph{#3} (#2)\string|usage}\fi}
% \newcommand*\Coloruk[3][+]{\emph{#3} (#2)\ifx#1+\index{noms de couleur\levelchar#2 (\emph{#3})\string|usage}\index{noms de couleur\levelchar#3\actualchar{}\emph{#3} (#2)\string|usage}\fi}
% \newcommand*\Colorfr[2][+]{\textsl{#2}\ifx#1+\index{noms de couleur\levelchar#2\string|usage}\fi}
% \def\Option#1{\texttt{#1}\index{options d'extension\levelchar\texttt{#1}\string|usage}}
% \def\oOption#1{\texttt{#1}\index{options d'extension (obsolètes)\levelchar\texttt{#1}\string|usage}}
% \def\Key#1{\textit{#1}\index{clés\levelchar\textit{#1}\string|usage}}
% \def\File#1{\texttt{#1}\index{fichiers\levelchar\texttt{#1}\string|usage}}
% \def\Function#1{\textit{#1}\index{fonctions de couleur\levelchar\textit{#1}\string|usage}}
% \def\Op#1#2{#1\nolimits_{\,\Model{#2}}}
% \def\med{\mathop{\textrm{méd}}}
% \def\mix{\mathop{\textrm{mélange}}}
% \def\rd{\mathop{\textrm{arrondi}}}
% \def\tint{\mathop{\textrm{éclaicie}}}
% \def\shade{\mathop{\textrm{assombrie}}}
% \def\tone{\mathop{\textrm{assourdie}}}
% \def\LC{\Package{color}}
% \def\LCP{extension \Package{color}}
% \def\XC{\Package{xcolor}}
% \def\XCP{extension \Package{xcolor}}
% \def\XCW{\texttt{\href{http://www.ukern.de/tex/xcolor.html}{www.ukern.de/tex/xcolor.html}}}
% \def\URL#1{\texttt{\url{#1}}}
% \def\CTAN#1#2{\texttt{\href{http://www.ctan.org/tex-archive/#1}{CTAN/#1#2}}}
% \newtheorem{lemma}{Lemme}
% \def\RtoI#1{\Gamma_{\!#1}}
% \def\ItoR#1{\Delta_{#1}}
% \def\bbbN{\textrm{I\kern-.333ex N}}
% \def\bbbR{\textrm{I\kern-.333ex R}}
% \def\Circ{\textsuperscript{$\circ$}}
%
% \newdimen\XCdim
%
% \parindent0pt
% \extrarowheight1pt
% \def\textfraction{0.01}
% \def\topfraction{0.99}
% \def\bottomfraction{0.99}
% \def\floatpagefraction{0.70}
% \setlength\abovecaptionskip{12pt}
% \setlength\belowcaptionskip{10pt}
% \colorlet{tableheadcolor}{gray!25}
% \colorlet{tablerowcolor}{gray!12.5}
%
%
% \title{\'{E}largissement des capacités de \LaTeX\ en matière de couleur : l'\XCP}
% \author{\href{mailto:xcolor@ukern.de}{\fboxrule0pt\fboxsep2pt\fbox{Dr. Uwe Kern}}}
% \date{\XCfileversion{} (\XCfiledate)
%       \thanks{Cette extension peut être téléchargée à partir de \CTAN{macros/latex/contrib/xcolor/}{}.
%               Un site Internet dédié à \textsf{xcolor} existe égalemetn : \XCW.
%               N'hésitez à envoyer vos constats d'erreur et suggestions d'amélioration à l'auteur :
%               \texttt{\href{mailto:xcolor@ukern.de}{xcolor@ukern.de}}.}}
% \maketitle
%
% \begin{abstract}
% \noindent
% L'extension \XC{} met à disposition, simplement et indépendamment des pilotes
% graphiques, à de multiples types de couleurs, teintes, nuances, tons et
% mélanges de couleurs arbitraires par le biais d'expressions dédiées comme 
% |\color{red!50!green!20!blue}|.
% Elle permet de sélectionner un modèle de couleur cible à l'échelle du
% document et offre des outils d'assortiment de couleurs automatiques, de
% conversion des couleurs entre douze modèles colorimétriques, d'utilisation de
% couleurs alternées pour des lignes de tableau, de mélange et de masque de
% couleur, de séparation de couleur et de calculs de cercle chromatique.
% \end{abstract}
%
% \phantomsection\pdfbookmark[1]{\contentsname}{toc}
% \tableofcontents\listoftables\listoffigures\newpage
%
%
%
%
% \clearpage
% \section{Introduction}
%
% \subsection{Objectif de cette extension}
%
% L'\LCP{} met à disposition un outil puissant et stable pour manipuler les
% couleurs dans (pdf)\LaTeX{} de façon cohérente, indépendamment des pilotes
% graphiques, tout en supportant différents modèles colorimétriques (de
% manière un peu plus dépendante des pilotes).
%
% Néanmoins, il est parfois un peu laborieux de l'utiliser, particulièrement
% dans les cas où de légères variations de couleur, des mélanges de couleur ou
% des conversions de couleur sont en jeu :
% ceci impose d'habitude l'utisation d'un autre programme qui calcule les
% paramètres souhaités, paramètres alors copiés dans une commande 
% |\definecolor| dans \LaTeX.
% Assez fréquemment, une calculatrice de poche est également impliquée dans le
% traitement de problèmes comme ceux indiqués ci-après :
% \begin{itemize}
% \item Ma société a défini une couleur d'entreprise et le service des
% impressions m'a dit combien il est coûteux d'utiliser plus de deux couleurs
% dans notre nouveau brochure, alors même que toutes les teintes de notre
% couleur (par exemple, une version à 75\%) peuvent être utilisées sans aucun
% surcoût.
% Comment accéder à ces variations de couleur avec \LaTeX?\\
% (Réponse: |\color{CouleurEntreprise!75}| etc.)
% \item Mon ami utilise une belle couleur que je souhaiterais appliquer à mes
% propres documents; malheureusement, elle est définie avec le modèle 
% \Model{hsb} qui n'est pas accepté par mon application pdf\LaTeX\ favorite.
% Que faire alors ?\\
% (Réponse : utiliser tout simplement les définitions \Model{hsb}, \XC{} fera
% les calculs nécessaires.)
% \item Qu'affiche le mélange de 40\% de \Color{vert}{green} et de 60\%
% de \Color{jaune}{yellow} ?\\
% (Réponse : 40\% \testclr{green} $+$ 60\% \testclr{yellow} $=$ 
% \testclr{green!40!yellow}, soit |\color{green!40!yellow}|)
% \item Et quelle est l'aspect de sa couleur complémentaire ?\\
% (Réponse: \testclr{-green!40!yellow}, accessible via 
% |\color{-green!40!yellow}|)
% \item Maintenant, je souhaite mélanger trois mesures de la dernière couleur
% avec deux mesures de sa complémentaire et une mesure de \Color{rouge}{red}.
% Qu'est-ce que cela donne ?\\
% (Réponse: $3\times$ \testclr{-green!40!yellow} $+ 2\times$ 
% \testclr{green!40!yellow} $+ 1\times$ \testclr{red} $=$ 
% \testclr{rgb:-green!40!yellow,3;green!40!yellow,2;red,1}, cette couleur
% étant accessible avec
% |\color{rgb:-green!40!yellow,3;green!40!yellow,2;red,1}|)
% \item Je sais qu'un rayonnement de longueur d'onde de 485nm appartient au
% spectre visible. Mais quelle couleur a-t-il ?\\
% (Réponse : approximativement \testclr[wave]{485}, via |\color[wave]{485}|)
% \item Mon service des impressions souhaite que toutes les définitions de
% couleur dans mon document soit basculées en modèle \Model{cmyk}\footnote{NdT :
% CMJN en français.}.
% Comment puis-je faire ces calculs efficacement ?\\
% (Réponse : |\usepackage[cmyk]{xcolor}| ou |\selectcolormodel{cmyk}|)
% \item J'ai un tableau de 50 lignes.
% Comment puis-je obtenir des lignes de tableau avec deux couleurs alternées
% (A pour les lignes paires et B pour les lignes impaires) sans recourir à la
% copie de 50 commandes |\rowcolor| ? Ce motif alterné devrait d'ailleurs
% commencer à partir de la troisième ligne.\\
% (Réponse: \emph{grosso modo} |\rowcolors{3}{CouleurA}{CouleurB}|)
% \end{itemize}
% Ceci répresente quelques uns des problème résolus par l'\XCP.
% Son objectif peut être résumé en la conservation des caractéristiques de \LC,
% tout en apportant des fonctionnalités additionnelles et de la flexibilité
% avec des interfaces simples d'utilisation (avec un peu de chance).
%
%
%
% \subsection{Terminologie des couleurs pour ce document}
%
% Sur la base de \cite{smith} nous définissons les termes 
% suivants\footnote{N.D.T. : ces termes ne sont pas l'exacte traduction des
% termes anglais car les notions de teinte (\emph{tint}), nuance (\emph{shade})
% et ton (\emph{tone}) utilisées par l'auteur sont bien trop polysémiques en
% français. Nous conservons ici juste la notion de \og teinte \fg{} à laquelle
% nous adjoignons des adjectifs bien moins sujets à discussion, en évitant ici
% les adjectifs \og rompu \fg{}, \og rabattu \fg{} ou \og désaturé \fg{}.} :
% \begin{itemize}
% \item \textbf{\Index{couleur éclaircie}} : une couleur à laquelle est ajoutée
% du \Color{blanc}{white} ;
% \item \textbf{\Index{couleur assombrie}} : une couleur à laquelle est ajoutée
% du \Color{noir}{black} ;
% \item \textbf{\Index{couleur assourdie}} : une couleur à laquelle est ajoutée
% du \Color{gris}{gray}.
% \end{itemize}
% Ce sont des cas spéciaux d'une fonction plus générale
% $\mix(C,C',p)$ qui construit une nouvelle couleur, composée de $p$ mesures
% de la couleur $C$ et de $1-p$ mesures de la couleur $C'$, où $0\le p\le1$.
% Aussi, nous posons 
% \begin{align}
% \tint(C,p) &:= \mix(C,|white|,p)\\
% \shade(C,p) &:= \mix(C,|black|,p)\\
% \tone(C,p) &:= \mix(C,|gray|,p)
% \end{align}
% où |white|, |black|, et |gray| sont des constantes dépendantes des modèles,
% comme présentées en table \vref{tab.const}.
% Par la suite, nous définissons le terme :
% \begin{itemize}
% \item \textbf{couleur complémentaire}: une couleur $C^*$ qui génère du 
% \Color{blanc}{white} si elle est mélangée avec la couleur d'origine $C$,
% \end{itemize}
% sachant qu'il existe également différents concepts de complémentarité (par
% exemple des couleurs opposées sur les \emph{cercles chromatiques}).
% Voir la section \vref{sec.cnv} pour le détail des calculs et la section 
% \vref{sec.harmony} pour certaines remarques sur les cercles chromatiques.
%
%
%
% \subsection{Modèles colorimétriques}
%
% Un modèle colorimétrique est un outil décrivant ou représentant un certain
% ensemble de couleurs d'une manière compatible avec l'appareil cible
% souhaité, par exemple un écran ou une imprimante.
% Il existe des modèles propriétaires (comme \Index{Pantone} ou \Index{HKS})
% qui fournissent des ensembles finis de couleurs (chaque couleur étant
% appelés \emph{\Index{ton direct}}), dans lequel l'utilisateur doit piocher
% sans se soucier des paramétrages; à l'inverse, se trouvent des modèles
% paramétriques comme \Model{gray}, \Model{rgb}, et \Model{cmyk}, dont le but
% est de représenter de larges ensembles finis ou même infinis (théoriquement)
% de couleurs, construits sur de très petits sous-ensembles de couleurs de
% base et de règles permettant de construire d'autres couleurs à partir des
% couleurs de base. 
% Par exemple, un large ensemble de couleurs peut être construit par
% combinaison linéaire des couleurs de base \Color{rouge}{red}, 
% \Color{vert}{green} et \Color{bleu}{blue}.
% En contrepartie, un \Index{ton direct} ne peut souvent être 
% qu'\emph{approximé} par des valeurs de paramètres dans les modèles comme
% \Model{cmyk} ou \Model{rgb}; les couleurs originales se mélangent
% physiquement et dépendent aussi du type de papier retenu. 
% Enfin, il existe certaines couleurs comme l'\Color{or}{gold} ou 
% l'\Color{argent}{silver} qui sont difficilement reproductibles par des
% modèles paramétriques avec des encres standards ou des imprimantes laser.
%
%
%
% \subsection{Cercles chromatiques et accords de couleurs}\label{sec.harmony}
%
% Il s'est développé une longue histoire du placement de couleurs 
% (les teintes saturées) sur des cercles pour discuter de problèmes théoriques
% ou pratiques sur les couleurs (par exemple \People{Isaac}{Newton}, 
% \People{Johann Wolfgang von}{Goethe}).
% Une explication de ceci pourrait être que le cercle lui-même est un outil
% tout naturel pour illustrer des relations communes aussi bien que des
% propriétés opposées.
%
% De nos jours, une certaine confusion portant sur les notions associées aux
% couleurs existe, dans la mesure où deux grands domaines qui y sont liés ---
% l'art et le design graphique d'une part, la théorie scientifique de la
% couleur de l'autre --- tendent à utiliser des termes identiques pour décrire 
% des propriétés de la couleur bien qu'en décrivant parfois des faits très
% différents ! Ainsi, l'apparence des cercles chromatiques diffère autant que
% la signification de concepts comme couleurs \og primaires \fg{} ou
% \og complémentaires \fg{}. 
%
%
% \paragraph{Construction d'un cercle chromatique typique}
% Tout d'abord, trois \emph{couleurs primaires} sont placées sur le cercle à 
% 0\Circ, 120\Circ, 240\Circ (les artistes choisissent souvent le triplet
% \Color{rouge}{red}, \Color{jaune}{yellow}, \Color{bleu}{blue}, tandis que les
% scientifiques spécialistes de la couleur préféreront le triplet 
% \Color{rouge}{red}, \Color{vert}{green}, \Color{bleu}{blue}.
% Ensuite, les trois \emph{couleurs secondaires} sont placées à 60\Circ, 
% 180\Circ, 300\Circ.
% Puis, six \emph{couleurs tertiaires} pourront être placées au milieu de
% chaque arc (30\Circ, 90\Circ, \dots).
% C'est pourquoi les cercles chromatiques sont fréquemment décrits par douze
% couleurs équidistantes bien que l'algorithme puisse être prolongé à merci.
%
%
% \paragraph{Harmonies de couleur issues du cercle}
% Nous commençons avec un cercle chromatique quelconque :
% \begin{itemize}
% \item les \textbf{couleurs complémentaires} sont situées à une distance 
% de 180\Circ{} sur le cercle ;
% \item les \textbf{triades} correspondent à trois couleurs séparées par 
% 120\Circ ;
% \item les \textbf{tétrades} correspondent à quatre couleurs séparées par 
% 90\Circ.
% \end{itemize}
% Nous supposons maintenant que le cercle est décomposé en $2n$ secteurs de
% taille égale :
% \begin{itemize}
% \item les \textbf{couleurs complémentaires adjacentes} d'une couleur donnée
% sont les deux voisines immédiates de la couleur complémentaire,
% caractérisées par les positions $\frac{n\pm1}{2n}\cdot360^\circ$,
% \item les \textbf{couleurs analogues} d'une couleur donnée sont les deux ou
% quatre voisines, caractérisées par les positions  
% $\pm\frac{1}{2n}\cdot360^\circ$ and $\pm\frac{2}{2n}\cdot360^\circ$.
% \end{itemize}
% Compte tenu des méthodes utilisées pour générer des accords de couleur, nous 
% concluons que les résultats dépendent fortement de la manière dont nous
% construisons le cercle !
% Qui plus est, le choix de $n$ affecte le résultat visuel.
% Des exemples sont donnés en figure \vref{fig.harmony}.
%
%
%
% \clearpage
% \section{L'interface utilisateur}
%
% \subsection{Préparation}
%
% \subsubsection{Installation de l'extension}
%
% Il faut tout d'abord placer \File{xcolor.sty} et tous les fichiers 
% \File{.def} dans un répertoire où (pdf)\LaTeX{} les trouvera.
% Un emplacement classique selon la structure des répertoires de 
% \TeX\footnote{N.D.T. : \emph{\TeX\ Directory Structure} (TDS)}
% serait le répertoire |texmf/tex/latex/xcolor|, où |texmf| est à
% remplacer par le répertoire principal de votre installation de \TeX.
% De plus, il faut placer \File{xcolor.pro} à un endroit où \Program{dvips} 
% le trouvera, typiquement |texmf/dvips/xcolor|.
% Normalement, vous devez lancer une mise à jour de votre base de noms de
% fichiers afin que ces fichiers soient connus et facilement retrouvables dans
% l'arborescence \TeX.
% Par la suite, il suffit simplement d'utiliser \XC{} (au lieu de \LC) dans
% votre document.
% Pour cela, la commande générale d'appel est 
% |\usepackage|\oarg{options}|{xcolor}| dans le préambule du document.
% La table \vref{tab.package} montre dans quel ordre certaines extensions
% doivent alors être chargées.
%
% \subsubsection{Options de l'extension}
%
% En général, plusieurs types d'options existent :
% \begin{itemize}
% \item les options qui déterminent le pilote graphique comme expliqué dans
% \cite{dpc} et \cite{color}, soit actuellement : \Option{dvips}, 
% \Option{xdvi}, \Option{dvipdf}, \Option{dvipdfm}, \Option{dvipdfmx}, 
% \Option{luatex}, \Option{pdftex}, \Option{dvipsone}, \Option{dviwindo},
% \Option{emtex}, \Option{dviwin}, \Option{oztex}, \Option{textures}, 
% \Option{pctexps}, \Option{pctexwin}, \Option{pctexhp}, \Option{pctex32},
% \Option{truetex}, \Option{tcidvi}, \Option{vtex}, \Option{xetex} ;
% \item les options qui déterminent le modèle colorimétrique cible 
% \footnote{La section \vref{sec.tgt} explique comment ce paramétrage peut
% être annulé n'importe où dans un document.} (\Option{natural}, \Option{rgb},
% \Option{cmy}, \Option{cmyk}, \Option{hsb}, \Option{gray}, \Option{RGB},
% \Option{HTML}, \Option{HSB}, \Option{Gray}) ou qui génèrent une sortie avec
% des couleurs désactivées (\Option{monochrome}) ;
% \item les options qui contrôlent si certains ensembles de couleurs
% prédéfinies sont chargés et comment : \Option{dvipsnames}, 
% \Option{dvipsnames*}, \Option{svgnames}, \Option{svgnames*}, 
% \Option{x11names}, \Option{x11names*} ;
% \item les options qui déterminent quelles autres extensions doivent être
% chargées ou supportées : \Option{table}, \Option{fixpdftex},
% \Option{hyperref} ;
% \item les options qui influencent le comportement d'autres commandes :
% \Option{prologue}, \Option{kernelfbox}, \Option{xcdraw}, \Option{noxcdraw},
% \Option{fixinclude}, \Option{showerrors}, \Option{hideerrors} ;
% \item les options obsolètes :
% \oOption{pst},
% \oOption{override}, \oOption{usenames}, \oOption{nodvipsnames}.
% \end{itemize}
% Toutes les options de l'extension (hors les sélections des pilotes et les
% options obsolètes) sont listées en table \vref{tab.opt}.
% \DescribeMacro\GetGinDriver
% \DescribeMacro\GinDriver
% Afin de faciliter la coopération avec l'extension \Package{hyperref}, il
% existe une commande |\GetGinDriver|\footnote{Cette commande est exécutée
% automatiquement si l'option d'extension \Option{hyperref} est sélectionnée.}
% qui récupère le nom du pilote effectivement utilisé et qui le place dans la
% commande |\GinDriver|.
% Ce dernier peut alors être utilisé au sein de l'extension \Package{hyperref}
% (ou toute autre extension), voir l'exemple de code en page 
% \pageref{ex.range}. 
% S'il n'y a pas d'option \Package{hyperref} correspondante, l'option 
% \Option{hypertex} sera prise par défaut.
%
% Attention : il y a une différence substantielle entre \XC{} et \LC{} dans la
% façon de manier l'option \Option{dvips}.
% L'\LCP{} appelle implicitement l'option \Option{dvipsnames} dès qu'un des
% pilotes |dvips|, |oztex| ou |xdvi| est sélectionné.
% Ceci rend les documents moins portables dans la mesure où, à chaque fois
% qu'une des couleurs est utilisée sans l'appel explicite de l'option 
% \Option{dvipsnames}, les autres pilotes comme |pdftex| renvoient un message
% d'erreur pour cause de couleur inconnue.
% C'est pourquoi \XC{} doit toujours recevoir explicitement l'option 
% \Option{dvipsnames} pour utiliser ces noms --- qui fonctionnent alors pour
% tous les pilotes. 
%
%
% \begin{table}[p]\caption{Options de l'extension}\label{tab.opt}
% \extrarowheight2pt
% \begin{adjustwidth}{-2.5cm}{}
% \advance\textwidth2.5cm
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabularx}{\linewidth}{lX}
% \hline
% \rowcolor{tableheadcolor}
% \em Option & \em Description\\
% \Option{natural}& (valeur par défaut.) Garde toutes les couleurs dans leur
% modèle, à l'exception de \Model{RGB} (converti en \Model{rgb}), 
% \Model{HSB} (converti en \Model{hsb}), et \Model{Gray} (converti en 
% \Model{gray}).\\
% \Option{rgb}& Convertit toutes les couleurs en modèle \Model{rgb}.\\
% \Option{cmy}& Convertit toutes les couleurs en modèle \Model{cmy}.\\
% \Option{cmyk}& Convertit toutes les couleurs en modèle \Model{cmyk}.\\
% \Option{hsb}& Convertit toutes les couleurs en modèle \Model{hsb}.\\
% \Option{gray}&  Convertit toutes les couleurs en modèle \Model{gray}.
% Particulièrement utile pour simuler un rendu en noir et blanc d'une
% imprimante monochrome.\\
% \Option{RGB}& Convertit toutes les couleurs en modèle \Model{RGB} (et
% ensuite en \Model{rgb}).\\
% \Option{HTML}& Convertit toutes les couleurs en modèle \Model{HTML} (et 
% ensuite en \Model{rgb}).\\
% \Option{HSB}& Convertit toutes les couleurs en modèle \Model{HSB} (et 
% ensuite en \Model{hsb}).\\
% \Option{Gray}& Convertit toutes les couleurs en modèle \Model{Gray} (et 
% ensuite en \Model{gray}).\\
% \hline
% \Option{dvipsnames}, \Option{dvipsnames*}& Charge un ensemble de couleurs
% prédéfinies\footnotemark[1].\\
% \Option{svgnames}, \Option{svgnames*}& Charge un ensemble de couleurs
% prédéfinies selon la sépcification \Index{SVG} 1.1\footnotemark[1].\\
% \Option{x11names}, \Option{x11names*}& Charge un ensemble de couleurs
% prédéfinies selon la norme \Index{Unix}/\Index{X11}\footnotemark[1].\\
% \hline
% \Option{table}& Charge l'extension \Package{colortbl} contenant les outils
% de colorisation des lignes, colonnes et cellules dans des tables.\\
% \Option{fixpdftex}& Charge l'extension \Package{pdfcolmk} permettant
% d'améliorer la gestion des couleurs de |pdftex| (voir section 
% \vref{sec.fixpdftex}).\\
% \Option{hyperref}& Permet de prendre en charge l'extension 
% \Package{hyperref} pour les expressions de couleur en définissant 
% des clés additionnelles (voir section \vref{sec.hyperref}).\\
% \hline
% \Option{prologue}& \'{E}crit des informations en début de fichier 
% \File{.xcp} pour chaque définition de couleur (comme décrit en section 
% \vref{sec.prologue}).\\
% \hline
% \Option{kernelfbox}& Utilise la méthode du noyau \LaTeX{} pour dessiner des
% boîtes \texttt{\string\f(rame)box}\footnotemark[2].\\
% \Option{xcdraw}& Utilise des commandes propres aux pilotes pour dessiner
% les encadrements et boîtes de couleur\footnotemark[2].\\
% \Option{noxcdraw}& (Valeur par défaut.) Utilise un code générique pour
% dessiner les encadrements et boîtes de couleur\footnotemark[2].\\
% \Option{fixinclude}& Empêche la réinitialisation de couleur de |dvips| avant
% l'inclusion de fichier \File{.eps} (voir section \vref{sec.fixinclude}).\\
% \hline
% \Option{showerrors}& (Valeur par défaut.) Affiche un message d'erreur si une 
% couleur non définie est utilisée (comportement identique à celui de 
% l'\LCP\ originale).\\
% \Option{hideerrors}& Affiche seulement une alerte en cas d'utilisation d'une
% couleur non définie et remplace cette couleur par du \Color{noir}{black}.\\
% \hline\hline
% \multicolumn2{c}{\footnotemark[1]\,Voir section \vref{sec.additionalcolors}.
% \quad \footnotemark[2]\,Voir section \vref{sec.fbox}.}\\
% \hline
% \end{tabularx}
% \end{adjustwidth}
% \end{table}
%
%
% \begin{table}[htbp]\caption{Ordre de chargement des 
% extensions}\label{tab.package}
% \begin{adjustwidth}{-2.5cm}{}
% \raggedleft
% \extrarowheight2pt
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabular}{l*{6}{c}}
% \hline
% \rowcolor{tableheadcolor}
% \em Chargement/Extension    & \Package{colortbl}& \Package{pdfcolmk}&
% \Package{hyperref}& \Package{pstricks}& \LC& \Package{pstcol}\\
% Avant \XC       & non & non & permis & permis\rlap{\footnotemark[1]} & non &
% non  \\
% Avec l'option \XC{}& \Option{table} & \Option{fixpdftex} & --- & --- & --- &
% --- \\
% Après \XC        & non & permis & permis & permis & non & non \\
% \hline\hline
% \multicolumn6{c}{\footnotemark[1]\,Les versions récentes de 
% \Package{pstricks} chargent \XC\ par défaut.}\\
% \hline
% \end{tabular}
% \end{adjustwidth}
% \end{table}
%
%
% \begin{table}[htbp]\caption{Modèles colorimétriques supportés}\label{tab.mod}
% \raggedleft
% \extrarowheight2pt
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabular}{l>{\em}l>{$}l<{$}rl}
% \hline
% \rowcolor{tableheadcolor}
% \emph{Nom}  & Couleurs de base/notions & \emph{Intervalle de valeur}&
% \multicolumn2{>{\columncolor{tableheadcolor}}l}{\emph{Par défaut}}\\
% \Model{rgb} & rouge, vert, bleu & \left[0,1\right]^3&& \\
% \Model{cmy} & cyan, magenta, jaune & \left[0,1\right]^3&& \\
% \Model{cmyk} & cyan, magenta, jaune, noir & \left[0,1\right]^4&& \\
% \Model{hsb} & teinte, saturation, luminosité & \left[0,1\right]^3&& \\
% \Model{Hsb} & teinte\Circ\!, saturation, luminosité & \left[0,H\right]\times 
% \left[0,1\right]^2&$H=$& $\mkern-15mu\rangeHsb$\\
% \Model{tHsb} & teinte\Circ\!, saturation, luminosité & \left[0,H\right] 
% \times\left[0,1\right]^2&$H=$& $\mkern-15mu\rangeHsb$\\
% \Model{gray} & gris & \left[0,1\right]&& \\
% \Model{RGB} & Rouge, Vert, Bleu & \{0,1,\dots,L\}^3& $L\,=$& 
% $\mkern-15mu\rangeRGB$\\
% \Model{HTML} & RRGGBB & \{\texttt{000000},\dots,\texttt{FFFFFF}\}&& \\
% \Model{HSB} & Teinte, Saturation, Luminosité & \{0,1,\dots,M\}^3& $M=$& 
% $\mkern-15mu\rangeHSB$\\
% \Model{Gray} & Gris & \{0,1,\dots,N\}& $N\,=$& $\mkern-15mu\rangeGray$\\
% \Model{wave} & lambda \emph{(nm)}& \left[363,814\right]&& \\
% \hline\hline
% \multicolumn5{c}{$L,M,N$ sont des nombres entiers positifs; $H$ est un
% entier réel positif.}\\
% \hline
% \end{tabular}
% \end{table}
%
%
% \subsubsection{\'{E}xecution de commandes additionnelles à l'initialisation}
%
% \DescribeMacro\xcolorcmd
% Voici un moyen simple pour passer des commandes devant être exécutées à
% la fin de l'extension \XCP{} (immédiatement avant que l'initialisation de
% |\color{black}| ne soit traitée).
% Indiquez juste |\def\xcolorcmd|\marg{commandes} avant le chargement de \XC{}.
%
% Exemple: en supposant que |a.tex| soit un document \LaTeX{} complet, une
% commande comme 
% \og|latex \def\xcolorcmd{\colorlet{black}{red}}\input{a}|\fg{}
% saisie en invite de commande génère un fichier |a.dvi| avec toutes les
% occurences de \Color{noir}{black} remplacées par du \Color{rouge}{red}, sans
% besoin de modifier le fichier source lui-même
% (la ligne de commande peut varier selon les systèmes d'exploitation et les
% distributions de \TeX{}).
%
%
%
% \subsection{Modèles colorimétriques}
%
% \subsubsection{Modèles colorimétriques supportés}
% La liste des modèles colorimétriques et les plages de valeur de leurs
% paramètres sont données en table \vref{tab.mod}.
% Notez bien que le support de ces couleurs est indépendant du pilote graphique
% choisi.
%
% Ce support permet d'ailleurs de spécifier des couleurs directement avec
% leurs paramètres, par exemple avec 
% |\textcolor[cmy]{0.7,0.5,0.3}{toto}| (\textcolor[cmy]{0.7,0.5,0.3}{toto}) ou
% |\textcolor[HTML]{AFFE90}{toto}| (\textcolor[HTML]{AFFE90}{toto}).
%
% \paragraph{\Model{rgb}, \Model{cmyk}, \Model{hsb}, \Model{gray}}
% Ce sont les modèles supportés directement par \Index{PostScript}.
% C'est pourquoi nous vous renvoyons à \cite{plrm} pour une description
% de leurs propriétés et relations.
% Il existe une commande spécifique \DescribeMacro\adjustUCRBG
% pour régler finement les mécanismes de \trad{\emph{undercolor-removal}} 
% et \trad{\emph{black-generation}} durant la conversion vers le modèle 
% \Model{cmyk}, voir section \vref{sec.cmy2cmyk} pour plus de détails.
%
% \paragraph{\Model{cmy}}
% Il s'agit principalement d'un modèle pour les étapes de calcul intermédiaire.
% De ce fait, il s'agit d'un simple complément à \Model{rgb}.
% En terme d'affichage, \Model{cmy} est traité comme \Model{cmyk} avec $k=0$.
%
% \paragraph{\Model{HTML}}
% Ce modèle est dérivé de \Model{rgb} afin de permettre l'entrée de paramètres
% de couleurs pour les pages web ou les fichiers CSS.
% Aussi, ce n'est pas un modèle colorimétrique en tant que tel mais plutôt une
% interface utilisateur commode.
% Il est important de mentionner que \Model{HTML} accepte toutes les
% combinaisons de caractères |0|--|9|, |A|--|F|, |a|--|f|, tant que la chaîne
% de caractères a une longueur de 6 caractères exactement.
% Cependant, les résultats de conversion en \Model{HTML} consisteront en des
% nombres et des lettres \emph{majuscules}.
%
% \paragraph{\Model{Hsb}, \Model{tHsb}}
% Premièrement, \Model{Hsb} est un modèle \og interface utilisateur \fg{}
% transformant $\emph{teinte}\in[0,1]$ en $\emph{teinte\Circ}\in[0,H]$, où $H$
% est donné par |\def\rangeHsb|\marg{H}.
% \DescribeMacro\rangeHsb
% Aussi, si $H=360$, nous pouvons imaginer un cercle ou une roue pour 
% décrire le paramètre \emph{teinte\Circ}.
% Deuxièmement, \Model{Hsb} est la base du \Model{tHsb}, également nommé 
% \Model{Hsb} \pModel{transformé}, qui permet à l'utilisateur d'appliquer une
% transformation linéaire par morceaux sur \emph{teinte\Circ} en déplaçant
% la \emph{teinte\Circ} sélectionnée en avant ou en arrière sur le cercle.
% La transformation est définie par |\def\rangetHsb{|$x_1,y_1;x_2,y_2;\dots$|}|
% \DescribeMacro\rangetHsb
% qui indique que $\emph{hue\Circ}=x_1$ dans \Model{tHsb} signifie 
% $\emph{hue\Circ}=y_1$ dans \Model{Hsb}, etc.
% Par exemple, le \Color{jaune}{yellow} est placé à 60\Circ{} dans le cercle 
% \Model{Hsb} (le \Color{rouge}{red} étant à 0\Circ); cependant dans la plus
% plupart des cercles chromatiques servant aux artistes, le 
% \Color{jaune}{yellow} est à 120\Circ.
% Ainsi, une entrée \og |120,60| \fg{} ferait sens si nous avions décidé de
% répliquer un cercle chromatique d'artiste par le biais de \Model{tHsb}.
% Voir la section \vref{sec.tHsb2Hsb} pour la formule exacte de la
% transformation et les restrictions détaillées, et la section 
% \vref{sec.harmony} pour les cercles chromatiques et les accords de couleur.
% La figure \vref{fig.tHsb} peut servir pour effectuer des comparaisons.
%
% Exemple: `|\def\rangetHsb{|\texttt{\rangetHsb}|}|' correspond en fait au
% paramétrage par défaut de \XC.
%
% \paragraph{\Model{wave}}
% Avec ce modèle nous essayons de convertir les longueurs d'onde dans des
% modèles colorimétrique standards afin de réaliser une approximation de
% l'apparence visuelle des ondes lumineuses.
% Tandis que le spectre visible couvre un intervalle de valeur de 400 à 
% 750 nm, l'implémentation dans \XC{} permet de traiter toutes les longueurs
% d'onde qui ont une valeur absolue inférieur à \csname 
% strip@pt\endcsname\maxdimen{} (le plus grand nombre que \TeX{} puisse
% considérer comme une dimension).
% Toutefois, la probabilité d'obtenir une couleur différente du noir hors de
% plage de valeur $[363,814]$ est très précisément nulle.
% Aussi, la figure \vref{fig.spectrum} illustre seulement l'intervalle de
% valeurs mentionné ci-dessus.
% Notez qu'il n'est pas possible de convertir fidèlement les autres modèles en
% \Model{wave} puisque ce dernier ne couvre qu'un ensemble limité de couleurs. 
%
% \paragraph{\Model{RGB}, \Model{HSB}, \Model{Gray}}
% Ce sont des modèles dérivés, transformant la plage de valeurs continue 
% $[0,1]$ des paramètres de \Model{rgb}, \Model{hsb} et \Model{gray} en un
% ensemble de valeurs finies ; ceci nous fait les désigner par le terme
% de \emph{modèles entiers}.
% Les constantes $L, M, N$ de la table \ref{tab.mod} sont définies par les
% commandes |\def\rangeRGB|\marg{L},
% \DescribeMacro\rangeRGB
% |\def\rangeHSB|\marg{M},
% \DescribeMacro\rangeHSB
% et |\def\rangeGray|\marg{N}.
% \DescribeMacro\rangeGray
% La modification de ces constantes peut être fait \emph{avant} ou 
% \emph{après} que l'\XCP{} ait été chargée, par exemple :
% \label{ex.range}\begin{verbatim}
% \documentclass{article}
% ...
% \def\rangeRGB{15}
% \usepackage[dvips]{xcolor}
% ...
% \GetGinDriver
% \usepackage[\GinDriver]{hyperref}
% ...
% \begin{document}
% ...
% \def\rangeRGB{63}
% ...
% \end{verbatim}
%
%
% \subsubsection{Substitution de modèles colorimétriques individuels}
% \label{sec.subst}
%
% \DescribeMacro\substitutecolormodel
%   \marg{modèle-source}\marg{liste-de-modèles-cibles}\\
% Cette commande substitue le \Meta{modèle-source} par le premier modèle 
% disponible apparaissant dans la \Meta{liste-de-modèles-cibles}.
% Seuls les modèles de type \Meta{modèle-numérique} sont possibles; tous les 
% changements sont locaux au groupe courant, mais un |\xglobal| préfixé est
% respecté.
%
% Exemple : supposons que le pilote actuel a une implémentation incorrecte de
% \Model{hsb} tandis que \Model{rgb} paraît correct.
% Alors |\substitutecolormodel{hsb}{rgb}| pourrait être un bon choix puisqu'il
% convertit --- à partir de ce point --- toutes les définitions des couleurs
% \Model{hsb} en spécifications du modèle \Model{rgb} par le biais des
% algorithmes de \XC, sans toucher aux autres modèles.
%
%
% \subsubsection{Changement du modèle colorimétrique cible dans un document}
% \label{sec.tgt}
%
% \DescribeMacro\selectcolormodel
%   \marg{modèle-numérique}\\
% Cette commande définit le modèle cible comme étant le \Meta{modèle 
% numérique} indiqué, ce dernier appartenant à la liste des
% noms de modèles autorisés comme option de l'extension (soit  
% \Option{natural}, \Option{rgb}, \Option{cmy}, \Option{cmyk}, \Option{hsb},
% \Option{gray}, \Option{RGB}, \Option{HTML}, \Option{HSB}, \Option{Gray}),
% voir figure \vref{fig.tgt} pour un exemple.
% Il y a deux possibilités pour effectuer la conversion au modèle cible :
% \begin{itemize}
% \item \DescribeMacro\ifconvertcolorsD au moment de la \emph{définition} des 
% couleurs\footnote{Ceci signifie que toute couleur \emph{nouvellement} 
% définie sera d'abord convertie dans le modèle cible, puis sauvegardée.}
% (avec |\definecolor| et assimilées); ceci est contrôlé 
% par la bascule |\ifconvertcolorsD|;
% \item \DescribeMacro\ifconvertcolorsU au moment de l'\emph{utilisation} des
% couleurs (immédiatement avant que l'affichage de la couleur, ce qui traite 
% les couleurs qui ont été définies dans d'autres modèles ou qui ont été 
% définies directement comme avec |\color[rgb]{.1,.2,.3}|) ; ceci est contrôlé
% par |\ifconvertcolorsU|.
% \end{itemize}
% Les deux bascules valent \og vrai \fg{} en sélectionnant n'importe quel
% modèle, à l'exception de \Option{natural} qui leur donne la valeur \og faux
% \fg{}.
% D'autres choix sont autorisés grâce à une option d'extension ou à 
% |\selectcolormodel|.
% Pourquoi ne convertissons-nous pas toutes les couleurs au moment de
% l'utilisation ? Si de nombreuses couleurs sont impliquées, cela peut
% économiser du temps de traitement lorsque les conversions sont déjà faites 
% au moment des définitions. De meilleures performances peuvent être obtenues
% par |\usepackage[rgb,...]{xcolor}| puis |\convertcolorsUfalse|, ce qui correspond
% en fait à la façon dont \XC{} fonctionnait jusqu'à la version 1.07.
%
%
% \begin{table}[p]\caption{Arguments et terminologie associée}\label{tab.term}
% \def\RS{\ensuremath{\to}\space}
% \footnotesize\raggedleft
% \extrarowheight2pt
% \begin{adjustwidth}{-2.5cm}{}
% \advance\textwidth2.5cm
% \tabcolsep.25em
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabularx}{\textwidth}{lX}
% \hline
% \rowcolor{tableheadcolor}
% \em \'{E}lement & \em Chaîne de remplacement\\
% \Meta*{vide}& \RS chaîne vide `'\\
% \Meta*{moins}& \RS chaîne non vide contenant un ou plusieurs signes `|-|'\\
% \Meta*{plus}& \RS chaîne non vide contenant un ou plusieurs signes  `|+|'\\
% \hline
% \Meta*{ent}& \RS nombre entier\hfill(\emph{entier})\\
% \Meta*{num}& \RS nombre entier positif\hfill(\emph{nombre})\\
% \Meta*{déc}& \RS nombre réel\hfill(\emph{décimal})\\
% \Meta*{div}& \RS nombre réel non nul\hfill(\emph{diviseur})\\
% \Meta*{pct}& \RS nombre réel dans l'intervalle 
% $[0,100]$\hfill(\emph{pourcentage})\\
% \hline
% \Meta*{id}& \RS chaîne non vide contenant des lettres et des 
% chiffres\hfill(\emph{identifiant})\\
% \Meta*{id étendu}& \RS \Meta{id}\newline
%                 \RS \Meta[1]{id}|=|\Meta[2]{id}\\
% \Meta*{liste-id}& \RS 
% \Meta[1]{id étendu}|,|\Meta[2]{id étendu}|,...,|\Meta[l]{id étendu}\\
% \Meta*{nom}& \RS \Meta{id}\hfill(\emph{nom explicite})\newline
%               \RS `|.|'\hfill(\emph{nom implicite})\\
% \Meta*{modèle-central}& \RS `|rgb|', `|cmy|', `|cmyk|', `|hsb|', 
% `|gray|'\hfill(\emph{modèles centraux})\\
% \Meta*{modèle-numérique}& \RS \Meta{modèle-central}\newline
%                    \RS `|RGB|', `|HTML|', `|HSB|', 
% `|Gray|'\hfill(\emph{modèles entiers})\newline
%                    \RS `|Hsb|', `|tHsb|', `|wave|'\hfill(\emph{modèles
% décimaux})\\
% \Meta*{modèle}& \RS \Meta{modèle num}\hfill(\emph{modèles 
% numériques})\newline
%                \RS `|named|'\hfill(\emph{pseudo-modèle})\\
% \Meta*{liste-modèle}& \RS 
% \Meta[1]{modèle}|/|\Meta[2]{modèle}|/.../|\Meta[m]{modèle} 
% \hfill(\emph{modèles multiples})\newline
%                     \RS \Meta{modèle 
% central}|:|\Meta[1]{modèle}|/|\Meta[2]{modèle}|/.../|\Meta[m]{modèle}\\
% \Meta*{spéc}& \RS liste de valeurs numériques séparées par des 
% virgules\hfill(\emph{spécification explicite})\newline
%               \RS liste de valeurs numériques séparées par des 
% virgules\hfill(\emph{spécification explicite})\newline
%               \RS nom d'une couleur \og nommée 
% \fg{}\hfill(\emph{spécification implicite})\\
% \Meta*{liste-spéc}& \RS 
% \Meta[1]{spéc}|/|\Meta[2]{spéc}|/.../|\Meta[m]{spéc} 
% \hfill(\emph{spécifications multiples})\\
% \Meta*{type}& \RS \Meta{vide}\newline
%               \RS `|named|', `|ps|'\\
% \hline
% \Meta*{expr}& \RS \Meta{préfixe}\Meta{nom}\Meta{expr de  
% mélange}\Meta{suffixe}\hfill(\emph{expression de couleur standard})\\
% \Meta*{préfixe}& \RS \Meta{vide}\newline
%                 \RS \Meta{moins}\hfill(\emph{indicateur complémentaire})\\
% \Meta*{expr de mélange}& \RS 
% |!|\Meta[1]{pct}|!|\Meta[1]{nom}|!
% |\Meta[2]{pct}|!|\Meta[2]{nom}|!...!|\Meta[n]{pct}|!|\Meta[n]{nom} 
% \hfill(\emph{expression de mélange complète})\newline
%                   \RS 
% |!|\Meta[1]{pct}|!|\Meta[1]{nom}|!
% |\Meta[2]{pct}|!|\Meta[2]{nom}|!...!|\Meta[n]{pct}
% \hfill(\emph{expression de mélange incomplète})\\
% \Meta*{suffixe}& \RS \Meta{vide}\newline
%                  \RS |!!|\Meta{plus}\hfill(\trad{\emph{series step}})\newline
%                  \RS |!![|\Meta{num}|]|\hfill(\trad{\emph{series access}})\\
% \hline
% \Meta*{expr étendue}& \RS 
% \Meta{modèle central}|,|\Meta{div}|:|\Meta[1]{expr}|,
% |\Meta[1]{déc}|;|\Meta[2]{expr}|,|\Meta[2]{déc}|;...;|\Meta[k]{expr}|,
% |\Meta[k]{déc}\newline
%                   \RS \Meta{modèle central}|:|\Meta[1]{expr}|,
% |\Meta[1]{déc}|;|\Meta[2]{expr}|,|\Meta[2]{déc}|;...;|\Meta[k]{expr}|,
% |\Meta[k]{déc}\\
% \hline
% \Meta*{expr fonctionnelle}& \RS |>|\Meta{fonction}|,|\Meta[1]{arg}|,
% |\Meta[2]{arg}|,...,|\Meta[j]{arg}\hfill(\emph{expression fonctionnelle de
%  couleur})\\
% \Meta*{fonction}& \RS `|wheel|', `|twheel|'\hfill(\emph{fonctions de 
% couleur})\\
% \hline
% \Meta*{couleur}& \RS \Meta{expr de couleur}\Meta[1]{expr 
% fonctionnelle}\Meta[2]{expr fonctionnelle}|...|\Meta[i]{expr fonctionnelle}\\
% \Meta*{expr de couleur}& \RS \Meta{nom}\newline
%                     \RS \Meta{expr}\newline
%                     \RS \Meta{expr étendue}\\
% \hline\hline
% \rowcolor{white}
% Remarques:& chaque \RS indique une chaîne de remplacement possible pour un
% élément de la colonne de gauche ; cependant, des restrictions avancées
% dépendantes du contexte peuvent s'appliquer. Voir le texte principal pour
% plus de détails.
% La chaîne `toto' doit toujours être comprise sans les apostrophes.
% $i,j,k,l,m,n$ indiquent des entiers positifs, $k,l,m,n>0$, $m\le8$.\\
% \hline
% \end{tabularx}
% \end{adjustwidth}
% \end{table}
%
%
%
% \subsection{Arguments et terminologie}\label{sec.term}
%
% Avant de décrire en détail les commandes liées aux couleurs de \XC, nous 
% définissons plusieurs éléments ou identifiants qui apparaissent de façon
% répétée dans les arguments de ces commandes.
% Une vue générale de la syntaxe est donnée dans la table \vref{tab.term}.
%
%
% \subsubsection{Remarques additionnelles et restrictions sur les arguments}
%
% \paragraph{Chaînes basiques et nombres}
% \DescribeArg{vide}
% \DescribeArg{moins}
% \DescribeArg{plus}
% \DescribeArg{ent}
% \DescribeArg{num}
% \DescribeArg{déc}
% \DescribeArg{pct}
% \DescribeArg{div}
% Ces arguments ne nécessitent pas beaucoup d'explications. Cependant, dans la
% mesure où nous traitons ici des valeurs numériques, il est important de noter
% que les nombres réels dans (La)\TeX{} --- tant qu'ils sont utilisés
% pour des longueurs, dimensions ou espaces --- sont limités à une valeur 
% maximale inférieure strictement à $16384$.
% Cette contrainte, dans l'enchainement des calculs numériques, doit aussi 
% être respectée par tous les résultats intermédiaires, ce qui implique
% généralement des restrictions plus larges. Comme \XC{} utilise énormément
% les registres internes de dimension de \TeX\ pour la plupart des calculs, 
% ce point doit être gardé à l'esprit à chaque fois que des expressions
% \Meta{expr étendue} doivent être utilisées.
%
% \paragraph{Noms de couleur}
% \DescribeArg{nom}
% Un \Meta{nom} indique le nom déclaré (ou le nom qui va être déclaré) d'une 
% \emph{couleur} ou d'une \trad{\emph{série de couleur}} ;
% il peut être déclaré \emph{explicitement} par l'une des commandes suivantes :
% |\definecolor|, |\providecolor|, |\colorlet|, |\definecolorset|, 
% |\providecolorset|, |\definecolorseries|, |\definecolors|, |\providecolors|.
% Par ailleurs, le nom de couleur réservé `|.|' est déclaré 
% \emph{implicitement} et indique la \emph{couleur actuelle}.
% En fait, au-delà des chiffres et lettres, certains autres caractères 
% peuvent également être utilisés pour les déclarations de \Meta{nom} mais les
% restrictions données évitent les incompréhensions et garantissent la
% compatibilité avec les futures évolutions de \XC.
%
% Exemples: `|red|', `|MonVertSpecial1980|', `|.|'.
%
%
% \paragraph{Modèles colorimétriques}
% \DescribeArg{modèle-central}
% \DescribeArg{modèle-numérique}
% \DescribeArg{modèle}
%
% La différence faite entre les \emph{modèles-centraux} (\Model{rgb}, 
% \Model{cmy}, \Model{cmyk}, \Model{hsb}, \Model{gray}), les \emph{modèles
% entiers} (\Model{RGB}, \Model{HTML}, \Model{HSB}, \Model{Gray}), 
% les \emph{modèles décimaux} (\Model{Hsb}, \Model{tHsb}, \Model{wave}) et
% les \emph{pseudo-modèles} (actuellement \nModel{named}, \nModel{ps}) 
% s'explique simplement : les modèles centraux avec leurs paramètres basés
% sur l'intervalle unité $[0,1]$ permettent de faire plus aisément tout type
% de calculs, tandis que le but des modèles entiers est principalement de 
% faciliter la saisie des paramètres en entrée (transformés ensuite en ceux
% d'un des modèles centraux).
% Enfin, les modèles décimaux \Model{Hsb} et \Model{tHsb} sont des versions de
% \Model{hsb} pensés pour des buts spécifiques, tandis que \Model{wave} et
% le pseudo-modèle \nModel{named} ont un statut spécial dans la mesure où ils
% ne sont pas pensés pour des calculs : s'il est normalement possible de
% convertir une couleur de ces modèles en une d'un autre modèle, l'inverse
% ne l'est pas.
% La situation est bien pire pour le pseudo-modèle \nModel{ps} : ces couleurs
% contenant du code \Index{PostScript} \trad{ne sont pas transparentes}
% pour \TeX.  
%
%
% \paragraph{Spécifications de couleur}
% \DescribeArg{spéc}
% L'argument \Meta{spéc} --- qui spécifie les paramètres d'une couleur ---
% dépend évidemment du modèle colorimétrique sous-jacent.
% Une différence est faite entre les spécifications \emph{explicite} et
% \emph{implicite}, la première faisant référence à des paramètres numériques
% comme expliqué en table \vref{tab.mod}, la seconde --- idéalement --- 
% faisant référence à des noms définis par le pilote graphique.
%
% Exemples: `|.1,.2,.3|', `|.1 .2 .3|', `|0.56789|', `|89ABCD|', `|ForestGreen|'.
%
%
% \paragraph{Modèles et spécifications multiples}
% \DescribeArg{liste-modèle}
% \DescribeArg{liste-spéc}
% Ces arguments apparaissent toujours par paires (explicites ou
% implicites) dans les commandes de définition de couleur suivantes :
% |\definecolor|, |\providecolor|, |\definecolorset|, |\providecolorset|.
% Tout d'abord, \Meta{modèle-spéc} est réconcilié avec le modèle cible 
% courant (fixé par exemple avec une option de l'extension ou la commande
% |\selectcolormodel| ; dans le cas où il n'existe de modèle correspondant,
% le premier modèle de la liste est choisi.
% Ensuite, la spécification de couleur correspondante sera sélectionnée dans
% \Meta{liste-spéc}, de telle façon à ce que le traitement aboutisse à une 
% paire $(\Meta{modèle}, \Meta{spéc})$ cohérente. Ceci explique pourquoi il
% n'y a plus d'ambiguité possible dans la définition de couleur réellement
% suivie.
% La forme étendue \Meta{modèle 
% central}|:|\Meta[1]{modèle}|/|\Meta[2]{modèle}|/.../|\Meta[m]{modèle} 
% provoque la conversion immédiate de la \Meta{spéc} adéquate au \Meta{modèle
% central}; un modèle inconnu sera tout simplement ignoré ici, sans aucun commentaire.
%
% Exemples: `|rgb/cmyk/named/gray|', `|0,0,0/0,0,0,1/Black/0|', `|rgb:cmy/hsb|'.
%
%
% \paragraph{L'argument de type}
% \DescribeArg{type}
% Ceci est utilisé uniquement dans le contexte de commandes de définition
% de couleur, voir la description de |\definecolor| et assimilées.
%
%
% \paragraph{Expressions standards de couleur}
% \DescribeArg{expr}
% \DescribeArg{préfixe}
% \DescribeArg{expr de mélange}
% \DescribeArg{suffixe}
% Ces expressions servent d'outils pour spécifier facilement une certaine
% forme de mélange de couleur en cascade, par ailleurs décrit en détail en 
% section~\ref{sec.expr-meaning}.
% L'argument \Meta{préfixe} détermine si la couleur à retenir est celle qui
% suit ou sa complémentaire :
% un nombre impair de signes négatifs indique que la couleur résultant de 
% l'expression préfixée doit être convertie en sa couleur complémentaire.
% Une \emph{expression de mélange incomplète} est une juste une abbréviation
% d'une \emph{expression de mélange complère} aveec  $\Meta[n]{nom} = |white|$,
% afin d'éviter quelques saisies dans le cas des teintes.
% La chaîne \Meta{suffixe} est généralement vide mais elle offre quelques
% fonctionnalités additionnelles dans le cas de \trad{\emph{color series}} :
% les cas où la chaîne n'est pas vide demandent à ce que 
% \begin{itemize}
% \item le \Meta{nom} indique le nom d'une \trad{\emph{color series}} ;
% \item l'\Meta{expr de mélange} est \emph{complète}.
% \end{itemize}
% Exemples: `|red|', `|-red|', `|--red!50!green!12.345|', 
% `|red!50!green!20!blue|', `|truc!!+|', `|truc!![7]|', `|truc!25!red!!+++|', 
% `|truc!25!red!70!green!![7]|'.
%
%
% \paragraph{Expressions de couleur étendues}
% \DescribeArg{expr étendue}
% Ces expressions fournissent une autre méthode pour mélanger des couleurs,
% voir section~\vref{sec.extexpr-meaning} pour plus d'informations.
% La forme raccourcie 
% \begin{align*}
% \Meta{modèle central}&|:|\Meta[1]{expr}|,|\Meta[1]{déc}|;|\Meta[2]{expr}|,
% |\Meta[2]{déc}|;...;|\Meta[k]{expr}|!|\Meta[k]{déc}\\
% \intertext{est une abbréviation pour le cas spécial (et probablement plus
% courant)}
% \Meta{modèle central}|,|\Meta{div}&|:|\Meta[1]{expr}|,|\Meta[1]{déc}|;|\Meta[2]{expr}|,|\Meta[2]{déc}|;...;|\Meta[k]{expr}|!|\Meta[k]{déc}\\
% \intertext{avec la définition suivante (impliquant une somme non nulle 
% de tous les coefficients \Meta[\kappa]{déc}):}
% \Meta{div} &:= \Meta[1]{déc} + \Meta[2]{déc} + \dots + \Meta[k]{déc} \neq0.
% \end{align*}
% Exemples: `|rgb:red,1|', `|cmyk:red,1;-green!25!blue!60,11.25;blue,-2|'.
%
%
% \paragraph{Expressions fonctionnelles}
% \DescribeArg{expr fonctionnelle}
% \DescribeArg{fonction}
% Ces expressions étendent les fonctionnalités des expressions \emph{standards}
% ou \emph{étendues} en récupérant le résultat de ces expressions pour
% effectuer des calculs complémentaires.
% Le nombre d'arguments peut varier entre les différentes fonctions, voir
% section \vref{sec.functions} pour plus d'informations.
%
% Exemples: `|>wheel,30|', `|>wheel,30,|', `|>twheel,1,12|', `|>twheel,-11,12|'.
%
%
%
% \paragraph{Couleurs}
% \DescribeArg{couleur}
% \DescribeArg{expr de couleur}
% Au final, \Meta{couleur} est un argument générique recouvrant les 
% différents concepts de spécification des couleurs. 
% Ceci signifie qu'à chaque fois qu'un argument \Meta{couleur} est utilisable,
% la totalité des noms et expressions vues ci-dessus peuvent être utilisées. 
%
%

% \subsubsection{Signification des expressions de couleur 
%   standards}\label{sec.expr-meaning}
%
% Est expliquée maintenant comme l'expression
% \begin{gather*}
% \Meta{préfixe}\Meta{name}|!|\Meta[1]{pct}|!|\Meta[1]{name}|!|\Meta[2]{pct}|!|\dots|!|\Meta[n]{pct}|!|\Meta[n]{name}\Meta{suffixe}
% \end{gather*}
% est interprêtée et traitée :
% \begin{enumerate}
% \item Tout d'abord, le modèle et les paramètres de couleur de \Meta{nom} 
% sont extraits pour définir une couleur temporaire \Meta{temp}.
% Si \Meta{suffixe} est de la forme `|!![|\Meta{num}|]|', alors \Meta{temp}
% sera la couleur correspondante \Meta{num} (en accès direct) de la série
% de couleur \Meta{nom}.
% \item Alors un mélange de couleur, consistant en \Meta[1]{pct}\% de la
% couleur \Meta{temp} et $(100-\Meta[1]{pct})$\% de la couleur \Meta[1]{nom} 
% est calculé ; ce dernier devient la nouvelle couleur temporaire \Meta{temp}. 
% \item  L'étape précédente est répétée pour toutes les paires de paramètres
% restantes. (\Meta[2]{pct},\Meta[2]{nom}), \dots, 
% (\Meta[n]{pct},\Meta[n]{nom}).
% \item Si \Meta{préfixe} contient un nombre impair de signes négactifs `-',
% alors \Meta{temp} sera changée en sa couleur complémentaire.
% \item Si \Meta{suffixe} est de la forme `|!!+|', `|!!++|', `|!!+++|', etc. 
% un nombre de \trad{step commands} (=~nombre de signes `|+|') sont effectuées
% sur la série de couleur sous-jacente \Meta{nom}.
% Ceci est sans conséquence pour la couleur \Meta{temp}.
% \item La couleur \Meta{temp} est enfin affichée ou sert comme donnée en
% entrée pour d'autres opérations, selon la commande utilisée. 
% \end{enumerate}
% Notez que, dans une expression 
% \Meta{temp}|!|\Meta[\nu]{pct}|!|\Meta[\nu]{nom} typique de l'étape 2, si
% \Meta[\nu]{pct}=100, la couleur \Meta{temp} est directement utilisée sans
% plus de transformation. Si \Meta[\nu]{pct}=0,, c'est alors la
% couleur \Meta[\nu]{name} qui est utilisée.
% Dans les cas de véritables mélanges ($0<$\Meta[\nu]{pct}$<100$), les deux
% couleurs impliquées peuvent être définies dans des modèles colorimétriques
% différents, par exemple |\definecolor{foo}{rgb}{...}| et 
% |\definecolor{bar}{cmyk}{...}|. 
% En général, la seconde couleur, \Meta[\nu]{name}, est convertie dans le
% modèle de la première couleur, \Meta{temp}, puis le mélange est calculé dans
% le modèle\footnote{Exception : afin d'éviter des résultats inattendus, cette
% règle est inversée si \Meta{temp} est issue du modèle \Model{gray}; dans ce
% cas, elle est convertie dans le modèle associé à \Meta[\nu]{nom}.} 
% Ainsi, \Meta{temp}|!|\Meta[\nu]{pct}|!|\Meta[\nu]{nom} et 
% \Meta[\nu]{nom}|!|\Meta[\nu]{$100-$pct}|!|\Meta{temp} qui devraient être
% théoriquement équivalents, peuvent ne pas avoir des résultats visuels
% identiques.
%
% Les figures~\vrefrange{fig.expr}{fig.ex} montrent de premières applications
% des couleurs et expressions.
% D'autres exemples sont donnés en figure~\vref{fig.progress}.
% Par ailleurs, un grand nombre d'exemples peuvent être trouvé dans 
% \cite{chroma}.
%
%
% \subsubsection{Signification des expressions de couleur étendues}
% \label{sec.extexpr-meaning}
%
% Une \emph{expression de couleur étendue} 
% \begin{gather*}
% \Meta{core model}|:|\Meta[1]{expr}|,|\Meta[1]{dec}|;|\Meta[2]{expr}|,|\Meta[2]{dec}|;...;|\Meta[k]{expr}|,|\Meta[k]{dec}
% \end{gather*}
% imite la manière dont les peintres mélangent les couleurs : en indiquant une
% liste de couleurs, chaque couleur étant associée à un facteur \Meta{déc}.
% Dans une telle \Meta{expr étendue}, chaque expression standard de couleur
% \Meta[\kappa]{expr} sera convertie dans le \Meta{modèle central} et le 
% vecteur résultant est multiplié par $\Meta[\kappa]{déc}/\Meta{div}$, où
% \begin{gather*}
% \Meta{div} := \Meta[1]{déc} + \Meta[2]{déc} + \dots + \Meta[k]{déc}.
% \end{gather*}
% Ensuite, la somme de tous ces vecteurs est calculée.
%
% Exemple: mélanger 4 parts de \testclr{red} \Color{red}{rouge}, 2~parts de 
% \testclr{green} \Color{vert}{green}, et une part de \testclr{yellow} 
% \Color{jaune}{yellow} permet d'obtenir \testclr{rgb:red,4;green,2;yellow,1}
% par le biais de |\color{rgb:red,4;green,2;yellow,1}|.
% Essayer le même mélange en mettant $-1$ part de \Color{jaune}{yellow} au lieu
% d'une fait obtenir \testclr{rgb:red,4;green,2;yellow,-1}.
% Notez que ce mécanisme peut être aussi utilisé pour afficher une (expression
% de) couleur individuelle dans un certain modèle colorimétrique: 
% |\color{rgb:yellow,1}| permet une telle conversion.
% La forme générale
% \begin{gather*}
% \Meta{modèle central}|,|\Meta{div}|:|\Meta[1]{expr}|,|\Meta[1]{déc}|;|\Meta[2]{expr}|,|\Meta[2]{déc}|;...;|\Meta[k]{expr}|,|\Meta[k]{déc}
% \end{gather*}
% exécute la même opération avec pour seule différence que le diviseur
% \Meta{div} est spécifié au lieu d'être calculé. 
% Dans l'exemple ci-dessus, nous obtenons une version plus sombre 
% \testclr{rgb,9:red,4;green,2;yellow,1} par le biais de 
% |\color{rgb,9:red,4;green,2;yellow,1}|. 
% Notez qu'il n'est pas interdit de spécifier un argument \Meta{div} qui soit
% plus petit que la somme de tous les \Meta[\kappa]{dec}, de telle façon à ce
% que certains des paramètres de spécification des couleurs puissent être hors
% de l'intervalle $[0,1]$. Le traitement de l'équation \ref{eq.U}
% gère ce type de cas.
%
%
% \subsubsection{Fonctions de couleur}\label{sec.functions}
%
% Les fonctions de couleur utilisent une liste d'arguments séparés
% par des virgules et elles servent à transformer la \emph{couleur donnée} 
% (autrement dit le résultat des calculs précédant l'appel de la fonction) en 
% une nouvelle couleur.
%
% \paragraph{Calculs associés aux cercles chromatiques}
% \DescribeFunc{wheel}
% \DescribeFunc{twheel}
% Ces fonctions permettent de déterminer des couleurs liées par des relations 
% harmoniques basées sur les cercles chromatiques (voir section~\vref{sec.harmony}).
% Les arguments sont ici \Meta{angle} ou \Meta{angle}|,|\Meta{cercle complet},
% le premier servant d'abbréviation à \Meta{angle}|,\rangeHsb|.
% Le second argument \Meta{cercle complet} indique de combien d'unités un 
% cercle complet est constitué tandis que le premier argument indique de
% combien d'unités doit être faite la rotation à appliquer à la couleur
% donnée. 
% Pour cela, la couleur donnée est tout d'abord convertie en \Model{Hsb} 
% (dans le cas de \Function{wheel}), ce qui génère les paramètres 
% \emph{teinte\Circ}, \emph{saturation}, et \emph{luminosité}.
% Ensuite,
% \begin{gather}
% \displaystyle\emph{teinte\Circ} := \emph{teinte\Circ} + 
% \frac{\Meta{angle}}{\Meta{cercle complet}}\cdot H, \qquad \emph{teinte} := 
% u\Bigl( \frac{\emph{teinte\Circ}}{H} \Bigr)
% \end{gather}
% où $u$ est la fonction de réduction d'intervalle de l'équation~\ref{eq.U}
% et $H = \texttt{\string\rangeHsb}$.
% La \emph{saturation} et la \emph{luminosité} étant laissées inchangées, le
% modèle final est \Model{hsb}.
% La fonction \Function{twheel} fonctionne de façon similaire, mais ces
% arguments se basent sur \Model{tHsb} au lieu de \Model{Hsb}.
% Des exemples sont présentés en figure~\vref{fig.harmony}.
%
%
% \subsection{Couleurs prédéfinies}
%
% \subsubsection{Couleurs qui sont toujours disponibles}
%
% \def\test#1#2{\testclr{#1}~\Coloruk{#2}{#1}}
% Dans le fichier \File{xcolor.sty}, les noms de couleur suivants sont 
% définis :
% \test{red}{rouge}, \test{green}{vert}, \test{blue}{bleu}, \test{cyan}{cyan},
% \test{magenta}{magenta}, \test{yellow}{jaune}, \test{black}{noir},
% \test{gray}{gris}, \test{white}{blanc}, \test{darkgray}{gris sombre},
% \test{lightgray}{gris clair}, \test{brown}{brun}, \test{lime}{citron vert},
% \test{olive}{olive}, \test{orange}{orange}, \test{pink}{rose}, 
% \test{purple}{pourpre}, \test{teal}{bleu sarcelle}, \test{violet}{violet}.
%
% Cet ensemble de base de couleurs peut être utilisé sans aucune restriction
% dans tout type d'expression de couleur, comme expliqué en section~\vref{sec.term}.
%
%
% \subsubsection{Ensembles additionnels de couleurs}\label{sec.additionalcolors}
%
% Il existe également des ensembles de noms de couleur qui peuvent être chargés
% par le biais d'options d'extension, toujours disponibles en deux
% variantes : une version \og normale \fg{} (par exemple, \Option{dvipsnames})
% et une version \og étoilée \fg{} (par exemple, \Option{dvipsnames*}). La 
% première variante définit toutes les couleurs \emph{immédiatement}, tandis
% que la seconde applique le mécanisme de la définition \emph{différée}.
% Dans ce dernier cas, les noms de couleur individuels doivent être activés
% par les commandes |\definecolors| ou |\providecolors|, comme décrit dans la
% section \vref{sec.deferred}, avant de pouvoir être appliqués dans un
% document.  
% \begin{itemize}
% \item \Option{dvipsnames}/\Option{dvipsnames*} charge un ensemble de 68 noms
%  de couleur \Model{cmyk} telles que définies par le pilote |dvips|.
%  Cependant, ces couleurs peuvent être utilisées avec tous les pilotes
%  supportés.
% \item \Option{svgnames}/\Option{svgnames*} charge un ensemble de 151 noms de
%  couleur\footnote{En fait, les noms chargés représentent 141 couleurs
%  différentes.} \Model{rgb} respectant la spécification \Index{SVG}~1.1 
%  \cite{svg}\footnote{Plus exactement, la spécification indiquée liste
%  uniquement les noms écrits en minuscules. De plus, les définitions
%  originales sont données en paramètres \Model{RGB} et ont été converties en
%  \Model{rgb} par l'auteur.}, augmenté de~4 noms tirés du fichier 
%  \File{rgb.txt} appartenant aux distributions \Index{Unix}/\Index{X11}. 
%  Notez que \Index{HTML4} accepte un sous-ensemble de 16~noms de couleur (en
%  utilisant des spécifications identiques), voir \cite{HTML4} et la section
%  \vref{sec.names}.  
% \item \Option{x11names}/\Option{x11names*} charge un ensemble de 317 noms de 
%  couleur\footnote{Ces noms représentent 315 couleurs différentes.} 
%  \Model{rgb} qui sont une simple variation sur un sous-ensemble de l'ensemble
%  \Index{SVG} mentionné précédemment, respectant le fichier \File{rgb.txt}
%  appartenant aux distributions \Index{Unix}/\Index{X11}\footnote{Une
%  nouvelle fois, les définitions originales sont données en paramètres 
%  \Model{RGB} et ont été converties en \Model{rgb} par l'auteur.}.
% Pour obtenir les 752 noms de couleur de \File{rgb.txt} sans trop d'effort :
% \begin{itemize}
% \item chargez \Option{x11names} ainsi que \Option{svgnames} ;
% \item mettez les initiales en majuscule et supprimez les espaces : 
%   \Color[-]{DarkSlateGray}{} au lieu de \Color[-]{dark slate gray}{} par 
%   exemple ;
% \item les noms \Index{X11} sans les nombres sont identiques aux couleurs
%   \Index{SVG} sauf dans 5~cas :
%   utilisez \Coloruk[-]{gris}{Gray0}, \Coloruk[-]{gris}{Grey0}, 
%   \Coloruk[-]{vert}{Green0}, \Coloruk[-]{marron}{Maroon0}, 
%   \Coloruk[-]{pourpre}{Purple0} au lieu de \Coloruk[-]{gris}{Gray}, 
%   \Coloruk[-]{gris}{Grey}, \Coloruk[-]{vert}{Green}, 
%   \Coloruk[-]{marron}{Maroon}, \Coloruk[-]{pourpre}{Purple} pour obtenir les
%   couleurs \Index{X11} d'origine ;
% \item pour $N=0,1,\dots,100$, utilisez `|[gray]{|$N/100$|}|' ou 
%   `|black!|$100-N$' au lieu de \Coloruk[-]{gris}{grayN} ou 
%   \Coloruk[-]{gris}{greyN}.
% \end{itemize}
% \end{itemize}
%
% Les noms des couleurs ainsi que leur visualisation sont présentés en 
% section~\vref{sec.names}.
% La section~\vref{sec.clash} décrit comment traiter les doublons de noms
% lors de l'utilisation conjointe de \Option{svgnames} et \Option{dvipsnames}
% dans un même document.
% Voir également \cite{chroma} avec son ensemble systématique de couleurs
% et des exemples de mélange.
%
%
% \subsection{Définition de couleur}\label{sec.def}
%

% \subsubsection{Couleurs ordinaires et nommées}\label{sec.prologue}
%
% Dans l'\LCP{} il y a une distinction entre les \og couleurs \fg{} (définies
% par la commande |\definecolor|) et les \og couleurs nommées \fg{} (définies
% par |\DefineNamedColor|, ce qui est autorisé uniquement dans le préambule).
% Chaque fois qu'une couleur ordinaire est utilisée dans un document, elle
% est déposée dans une commande |\special| qui contient une description 
% numérique de la couleur --- dépendante du pilote --- et qui est écrite dans
% le fichier \File{.dvi}.
% Les couleurs nommées, elles, présentent l'opportunité de stocker les valeurs
% numériques à une place centrale tandis que, pendant leur utilisation, les 
% couleurs peuvent être identifiées par leur nom, ce qui permet des traitements
% ultérieurs si nécessaire par le périphérique de sortie.
%
% Tous les pilotes livrés avec l'extension standard \Package{graphics} 
% supportent le \emph{formalisme} de la définition et de l'appel de \og
% couleurs nommées \fg{}. 
% Cependant, le support réel du \emph{concept} derrière cela, autrement dit
% employer des noms au lieu des paramètres, va d'\og inexistant \fg{} à \og
% total \fg{}.
% Voici une illustration de la situation actuelle avec trois pilotes
% différents.
% \begin{itemize}
% \item \Option{dvips} traite très bien le concept de \og couleur nommée 
%  \fg{} ; les équivalents \Index{PostScript} des noms de couleur définis par
%  \Option{dvipsnames} sont chargés --- à moins qu'ils ne soient désactivés ---
%  automatiquement par \Program{dvips}. Cependant les noms additionnels doivent
%  être défini à l'interpréteur \Index{PostScript} par une sorte de fichier de
%  préambule.  
%  Depuis la version 2.01, \XC{} propose une solution intégrée pour effectuer
%  cette tâche : en utilisant l'option d'extension \Option{prologue}, un
%  fichier de préambule \Index{PostScript} \File{xcolor.pro} est chargé par
%  \Program{dvips}.  
%  En complément, avec cette option, chaque commande de définition de 
%  couleur\footnote{Ceci est vrai non seulement pour le préambule du document
%  mais aussi pour tout le corps du document.} (|\definecolor|, |\colorlet|,
%  etc.) génère un code \Index{PostScript} enregistré dans un fichier
%  auxiliaire d'extension \File{.xcp} (abbréviation de \og \textbf{xc}olor
%  \textbf prologue \fg{}). 
%  Ce fichier est également chargé par \Program{dvips} comme préambule, 
%  rendant ainsi disponibles tous les noms de couleur à l'interpréteur 
%  \Index{PostScript}
%  Bien entendu, le fichier \File{.xcp} peut être édité avant que 
%  \Program{dvips} ne l'utilise, ce qui permet de changer les paramètres de
%  couleur spécifiques au pilote à un endroit central.
%  Notez que le code \Index{PostScript} est constitué de façon similaire à
%  \File{color.pro} : seuls les \emph{nouveaux} noms sont définis. 
%  Ceci permet de précharger d'autres fichiers de préambule avec des
%  définitions de couleur qui ne sont pas détruites par \XC.
%  En contrepartie, ceci impose à l'utilisateur de prendre soin de la 
%  redéfinition des noms de couleur.\\
%  Exemple: |\colorlet{foo}{red}\colorlet{foo}{blue}\color{foo}| va basculer
%  la couleur à \Color{bleu}{blue} dans la logique usuelle de \XC, bien que le 
%  fichier \File{.ps} va afficher \Color{rouge}{red} (à moins que foo n'ait
%  été défini différemment avant).\\
%  Il faut souligner que ce mécanisme est employé uniquement avec l'option
%  \Option{prologue}. 
%  Sans cela, les couleurs \og nommées \fg{} prédéfinies activées par l'option
%  \Option{dvipsnames} (sans employer aucune teinte, nuance, expression de 
%  couleur, etc.) peuvent être utilisées de cette manière, toutes les
%  autres couleurs \og nommées \fg{} sont inconnues de \Index{PostScript}.
% \item \Option{dvipdfm} supporte seulement les couleurs \Option{dvipsnames}
%  standard car elles sont décrites dans le programme \Program{dvipdfm} 
%  lui-même ; il ne semble pas y avoir de façon de charger un fichier de 
%  préambule défini par l'utilisateur. 
% \item \Option{pdftex} ne permet pas le support conceptuel, toutes les
%  couleurs \og nommées \fg{} étant converties immédiatement en leur 
%  représentation numérique. En conséquence, ceci permet d'utiliser des
%  définitions et un usage des couleurs nommées sans restriction (même si 
%  cela n'offre aucune valeur ajoutée ici).
% \end{itemize}
%
% Typiquement, un visualisateur \File{.dvi} aura des difficulés à afficher 
% les couleurs \og nommées \fg{} définies par l'utilisateur.
% Par exemple, le visualisateur de \Index{MiK\TeX}, \Program{Yap}, affiche
% actuellement uniquement les couleurs \og nommées \fg{} de l'ensemble
% \Option{dvipsnames}.
% Aussi, à chaque fois que l'option \Option{prologue} est utilisée en lien
% avec l'option \Option{dvips}, \emph{toutes} les autres couleurs sont 
% restituées en noir. Cependant, après le traitement par \Program{dvips}, 
% un visualisateur \Index{PostScript} affichera les bonnes couleurs.  
%
%
% \subsubsection{Définition de couleur dans \XC}
%
% \DescribeMacro\definecolor
%   \oarg{type}\marg{nom}\marg{liste-modèle}\marg{liste-spéc}\footnote{Avant
%   la version 2.00, cette commande était appelée \cs{xdefinecolor}, cette
%   dernière restant disponible pour des raisons de compatibilité.}\\
% Il s'agit d'une des commandes qui peut être utilisée pour assigner un 
% \Meta{nom} à une couleur spécifique.
% La couleur est ensuite connue du système (dans le groupe où elle est
% définie) et peut être utilisée dans toute \emph{\Index{expression de
% expression}}, comme expliquée en section \vref{sec.term}. 
% La commande remplace à la fois |\DefineNamedColor| et |\definecolor| de \LC.
% Notez que la définition d'un \Meta{nom} de couleur existant déjà est écrasée.
% La variable |\tracingcolors| contrôle si cet écrasement est indiqué dans le
% fichier \og log \fg{} ou pas (voir section \vref{sec.info} pour plus 
% d'informations). Les arguments sont décrits en section \vref{sec.term}.
% Aussi, des expressions valides définissant des couleurs sont, par exemple :
% \begin{itemize}
% \item |\definecolor{red}{rgb}{1,0,0}|,
% \item |\definecolor{red}{rgb/cmyk}{1,0,0/0,1,1,0}|,
% \item |\definecolor{red}{hsb:rgb/cmyk}{1,0,0/0,1,1,0}|,
% \item |\definecolor[named]{Black}{cmyk}{0,0,0,1}|,
% \item |\definecolor{myblack}{named}{Black}|,
% \end{itemize}
% où la dernière commande est équivalente à |\colorlet{myblack}{Black}| (voir
% ci-dessous); la deuxième commande définit \Color{rouge}{red} dans le modèle 
% \Model{rgb} ou \Model{cmyk} selon la paramètre actuel du 
% \emph{modèle cible}, tandis que la troisième convertit la couleur au modèle
% \Model{hsb} avant d'être enregistré. Notez qu'il existe une version spéciale
% associée à \Package{pstricks}, comme décrit en section \vref{sec.pstricks}.
%
% \medskip
%
% \DescribeMacro\providecolor
%   \oarg{type}\marg{nom}\marg{liste-modèle}\marg{liste-spéc}\\
% Cette commande est similaire à |\definecolor| à ceci près que la couleur
% \Meta{nom} est définie seulement si elle n'existe pas déjà.
%
% \medskip
%
% \DescribeMacro\colorlet
%   \oarg{type}\marg{nom}\oarg{modèle-numérique}\marg{couleur}\\
% Cette commande copie la couleur obtenue avec \Meta{couleur} dans \Meta{name}.
% Si \Meta{modèle-numérique} n'est pas vide, \Meta{couleur} est tout d'abord
% converti dans le modèle spécifié avant que \Meta{name} ne soit défini.     
% Le pseudo-modèle \nModel{named} \emph{n'est pas} autorisé ici mais il peut
% cependant être spécifié dans l'argument \Meta{type}.
% Notez qu'une couleur nommée \Meta{nom} définie auparavant sera écrasée.
%
% Exemple: |\colorlet{tableheadcolor}{gray!25}| a été utilisé dans le
% préambule du document.
% Dans la plupart des tables, la première ligne est mise en forme en utilisant
% la commande |\rowcolor{tableheadcolor}|.
%
%
% \subsubsection{Définition d'ensembles de couleur}
%
% \DescribeMacro\definecolorset
%   \oarg{type}\marg{liste-modèle}\marg{tête}\marg{queue}\marg{ensemble-spéc}\\
% Cette commande facilite la construction d'un \emph{\Index{ensemble de
% couleurs}}, autrement dit un ensemble (potentiellement vaste) de couleurs
% individuelles ayant en commun une même \Meta{liste-modèle} et un même 
% \Meta{type}.
% Ici, \Meta{ensemble-spéc} = 
% \Meta[1]{nom},\Meta[1]{liste-spéc};\dots;\Meta[l]{nom},\Meta[l]{liste-spéc}
% ($l\ge1$ nom/paires de liste de spécification).
% Les couleurs individuelles sont construites par des commandes
% \begin{center}
% |\definecolor|\oarg{type}|{|\Meta{tête}\Meta[\lambda]{nom}\Meta{queue}|}|\marg{liste-modèle}|{|\Meta[\lambda]{liste-spéc}|}|
% \end{center}
% où $\lambda=1,\dots,l$.
% Par exemple,
% \begin{itemize}
% \item |\definecolorset{rgb}{}{}{red,1,0,0;green,0,1,0;blue,0,0,1}|\\
% peut être utilisé pour définir les couleurs de base \Color{rouge}{red}, 
% \Color{vert}{green}, et \Color{bleu}{blue};\footnote{En fait, \XC{} utilise une variante
% plus complexe pour fournir les couleurs de base pour les différents modèles
% sous-jacents (voir le code source pour observer la commande intégrale):\\
% \cs{definecolorset\string{rgb/hsb/cmyk/gray\string}\string{\string}\string{\string}\string{red,1,0,0/0,1,1/0,1,1,0/.3;green,...\string}}.}
% \item |\definecolorset{rgb}{x}{10}{red,1,0,0;green,0,1,0;blue,0,0,1}|\\
% définit les couleurs \Color[-]{xred10}{}, \Color[-]{xgreen10}{} et 
% \Color[-]{xblue10}{}.
% \end{itemize}
%
% \DescribeMacro\providecolorset
%   \oarg{type}\marg{liste-modèle}\marg{tête}\marg{queue}\marg{ensemble-spéc}\\
% Cette commande, similaire à |\definecolorset|, se base sur |\providecolor|;
% ainsi les couleurs individuelles ne sont définies que si elles n'existent pas
% déjà.
%
%
% \subsubsection{Définitions immédiates et différées}\label{sec.deferred}
%
% Traditionnellement, la définition d'une couleur comme décrit ci-dessus
% conduit à la construction immédiate d'une commande contenant au moins 
% l'information nécessaire au pilote pour afficher la couleur souhaitée.
% Ainsi, définir par exemple 300 couleurs en chargeant un large ensemble de
% couleurs prédéfinies va créer 300 nouvelles commandes, bien que la plupart
% d'entre elles --- sauf dans des documents listant délibérément les couleurs
% --- ne soient pas utilisées.
% Avec le développement de la mémoire des ordinateurs --- augmentation en
% taille, diminution du prix --- les récentes implémentations de \TeX{} ont
% augmenté leur capacité de mémoire interne disponible pour les chaînes,
% commandes, etc. Cependant, la mémoire restant finie, il peut être toujours
% utile (ou occasionnellement nécessaire) de disposer d'une méthode permettant
% de réduire un peu les besoins de mémoire.
% C'est ici qu'intervient la \emph{définition de couleur différée}.
% Son principe est simple : pour chaque définition de ce type (par exemple 
% avec |\preparecolor|), tout l'information nécessaire est sauvée dans une 
% \emph{pile de définitions} globale dédiée où elle peut être récupérée par la
% suite (par exemple avec |\definecolors|) afin de construire la commande
% souhaitée.
%
% Notez que les commandes suivantes doivent être utilisées uniquement dans le
% préambule du document car la pile de définitions de couleur pour les
% définitions différées est supprimée au début du corps du document --- afin 
% d'économiser de la mémoire.
%
% \medskip
% 
% \DescribeMacro\preparecolor
%   \oarg{type}\marg{nom}\marg{liste-modèle}\marg{liste-spéc}\\
% Similaire à |\definecolor|, cette commande ne définit pas cependant la 
% couleur \Meta{nom} : les arguments \Meta{liste-modèle} et \Meta{list-spéc}
% sont évalués immédiatement puis tous les paramètres nécessaires (\Meta{type},
% \Meta{nom}, \Meta{modèle} et \Meta{spéc}) sont mis sur la \emph{\Index{pile
% de définitions}} pour un usage ultérieur.
%
% \medskip
%
% \DescribeMacro\preparecolorset
%   \oarg{type}\marg{liste-modèle}\marg{tête}\marg{queue}\marg{ensemble-spéc}
% \DescribeMacro\ifdefinecolors\\
% Cette commande est similaire à |\definecolorset| mais dépend de la bascule
% |\ifdefinecolors| : si elle vaut \og true \fg{}, la commande |\definecolor|
% est appliquée à chaque élément de l'ensemble (ce qui revient à une définition
% immédiate); sinon la commande |\preparecolor| est appliquée (ce qui donne une
% définition différée).
% Par exemple, l'option d'extension \Option{svgnames} réalise quelque chose
% comme |\definecolorstrue\preparecolorset|, tandis que \Option{svgnames*} agit
% comme |\definecolorsfalse\preparecolorset|.
% Les deux options imposent à leur fin |\definecolorstrue|, de façon à ce que
% les autres commandes disposent d'une situation initiale propre.
%
% \medskip
%
% \DescribeMacro\DefineNamedColor
%   \marg{type}\marg{nom}\marg{liste-modèle}\marg{liste-spéc}
% Cette commande est principalement fournie pour des raisons de compatibilité,
% particulièrement pour permettre le support de couleurs prédéfinies dans
% \File{dvipsnam.def}.
% Elle est équivalente à 
% \Meta{commande}\oarg{type}\marg{nom}\marg{modèle}\marg{spéc}, où 
% \Meta{commande} est soit |\definecolor| soit |\preparecolor|, selon l'état
% de |\ifdefinecolors|.
% Notez que les restrictions de \LC pour l'utilisation de |\DefineNamedColor|
% dans le seul préambule du document ont été abolies dans \XC.
%
% \medskip
%
% \DescribeMacro\definecolors
%   \marg{list-id}\\
% Il faut ici se rappeler que \Meta{liste-id} est de la forme 
% \Meta[1]{id-étendu}|,...,|\Meta[l]{id-étendu} où chaque 
% \Meta[\lambda]{id-étendu} est soit un identifiant \Meta[\lambda]{id} ou une
% équivalence \Meta[\lambda']{id}|=|\Meta[\lambda]{id}.
% Le premier cas est considéré comme un raccourci pour 
% \Meta[\lambda]{id}|=|\Meta[\lambda]{id}, ce qui amène à la description
% générale suivante : la \Index{pile de définitions} est parcourue pour trouver
% le nom \Meta[\lambda]{id} et ses paramètres de couleur associés ; s'il n'y a
% pas de correspondance, rien ne se passe ; si le nom \Meta[\lambda]{id} est
% dans la pile et que ses paramètres de couleur sont \Meta[\lambda]{type}, 
% \Meta[\lambda]{modèle}, et \Meta[\lambda]{spec}, alors la commande 
% |\definecolor[|\Meta[\lambda]{type}|]{|\Meta[\lambda']{id}|}{|\Meta[\lambda]{modèle}|}{|\Meta[\lambda]{spéc}|}| est exécutée.
% Ainsi, l'utilisateur peut contrôler sous quels noms les couleurs 
% \emph{préparées} peuvent être appelées dans le document.
% Notez que l'entrée \Meta[\lambda]{id} n'est pas retranchée de la pile de 
% façon à ce qu'elle puisse être utilisée plusieurs fois (y compris dans une
% même commande |\definecolors|).
%
% \medskip
%
% \DescribeMacro\providecolors
%   \marg{list-id}\\
% Similaire à |\definecolors|, cette commande se base sur |\providecolor| ce
% qui fait que les couleurs sont définies si elles n'existent pas déjà.
%
%
% \subsubsection{Définitions de couleur globales}
%
% \DescribeMacro\ifglobalcolors
% Par défaut, les définitions faites avec |\definecolor|, |\providecolor|, 
% \dots{} sont seulement disponibles dans le groupe courant.
% En utilisant |\globalcolorstrue|, toutes ces définitions deviennent 
% disponibles globalement --- jusqu'à ce que le groupe courant prenne 
% fin\footnote{Cette bascule peut être placée aussi dans le préambule pour 
% contrôler le document dans son ensemble.}.
% \DescribeMacro\xglobal
% Une autre méthode pour indiquer qu'une définition de couleur individuelle
% doit être globale revient à la préfixer avec |\xglobal|, soit, par exemple,
% |\xglobal\definecolor{toto}...|.
%
%
%
% \subsection{Utilisation de la couleur}
%
% \subsubsection{Commandes de couleur standards}
%
% Voici la liste des commandes appliquant les couleurs qui se retrouvent dans
% l'\LCP et qui bénéficient ici de la syntaxe étendue pour les couleurs comme 
% vu ci-dessus :\\
% \DescribeMacro\color\marg{couleur}\\
% \oarg{liste-modèle}\marg{liste-spéc}\\
% Cette commande fait passer à la couleur donnée soit par nom/expression, soit
% par modèle/spécification. La couleur restera active jusqu'à la fin du groupe
% courant.
% \DescribeMacro\textcolor\marg{couleur}\marg{texte}\\
% \oarg{liste-modèle}\marg{liste-spéc}\marg{texte}\\
% La commande est ici juste une syntaxe alternative à |\color|, cette syntaxe
% précisant le groupe de façon explicite. Ainsi, le \meta{texte} apparaît dans
% la couleur spécifiée puis la couleur reprend sa valeur précédente. Par 
% ailleurs, elle fait appel à |\leavevmode| pour garantir le démarrage du mode
% horizontal.\\
% \DescribeMacro\pagecolor\marg{couleur}\\
% \oarg{liste-modèle}\marg{liste-spéc}\\
% Cette commande spécifie la couleur de fond pour la page courante comme les
% suivantes. Il s'agit d'une déclaration globale qui ne tient pas compte des
% groupes \TeX.
%
% Note : toutes ces commandes, à l'exception de |\color| demandent à ce que les
% arguments \Meta{color} ou \Meta{spéc} soient mis dans accolades |{}|, même
% s'ils sont enfouis dans les commandes.
%
% Par exemple, une fois posé |\def\toto{red}|, il est possible d'écrire 
% |\color\toto| dans le document mais il vaut mieux toujours écrire 
% |\textcolor{\toto}{truc}| au lieu de |\textcolor\foo{truc}| pour éviter des 
% résultats étranges.
%
% Notez que les commandes dédiées aux couleurs tirées d'autres extensions
% peuvent avoir des résultats inattendus si elles sont directement confrontées
% à des expressions de couleur (par exemple, |\sethlcolor| et similaires issues
% de l'extension \Package{soul}). 
% Cependant, il est possible de passer l'expression en un nom par le biais de
% |\colorlet| et d'essayer d'utiliser ce nom à la place.
%
% \DescribeMacro\nopagecolor
% Contrairement à |\pagecolor|, cette commande retire la couleur de fond de
% page en restaurant le fond transparent usuel. Elle n'est pas supportée par 
% toutes les options de pilote et génère donc une alerte s'il n'existe pas de
% définition dans le fichier du pilote.
%
%
% \subsubsection{Boîtes colorées}\label{sec.fbox}
%
% \DescribeMacro\colorbox\marg{couleur}\marg{texte}\\
% \oarg{liste-modèle}\marg{liste-spéc}\marg{texte}\\
% La commande |\colorbox| prend les mêmes arguments que |\textcolor|, mais 
% l'indication de couleur sert au \emph{fond} de la boîte. \\
% \DescribeMacro\fcolorbox\marg{couleur-cadre}\marg{couleur-fond}\marg{texte}\\
% \oarg{liste-modèle}\marg{liste-spéc-cadre}\marg{liste-spéc-fond}\marg{texte}\\
% \oarg{liste-modèle-cadre}\marg{liste-spéc-cadre}\oarg{liste-modèle-fond}\marg{liste-spéc-fond}\marg{texte}\\
% \marg{couleur-cadre}\oarg{liste-modèle-fond}\marg{liste-spéc-fond}\marg{texte}\\
% Cette commande place un cadre de la première couleur autour d'une boîte dont
% le fond est de la seconde couleur. Si seul le premier argument optionnel est 
% donné, il spécifie le modèle de couleur pour les deux couleurs.
% Au-delà de la possibilité de spécifier des \emph{expressions de couleur} 
% comme arguments, |\fcolorbox| offre maintenant plus de flexibilité pour ses
% arguments que sa version de l'extension \LC{} :
% \begin{itemize}
%   \item \fcolorbox{gray}{yellow}{test} |\fcolorbox{gray}{yellow}{test}|,
%   \item \fcolorbox[cmyk]{0,0,0,0.5}{0,0,1,0}{test}
%     |\fcolorbox[cmyk]{0,0,0,0.5}{0,0,1,0}{test}|,
%   \item \fcolorbox[gray]{0.5}[wave]{580}{test}
%     |\fcolorbox[gray]{0.5}[wave]{580}{test}|,
%   \item \fcolorbox{gray}[wave]{580}{test}
%     |\fcolorbox{gray}[wave]{580}{test}|.
% \end{itemize}
% Qui est plus, |\fcolorbox| recourt maintenant à une nouvelle manière de
% d'encadrer un dessin, un développement de la suggestion de 
% \People{Donald}{Arseneau} dans le rapport d'erreur latex/3655 \cite{fbox}.
% La principale différence avec l'implémentation de \LaTeX est que la 
% construction de boîte et le tracé du cadre sont divisés en opérations
% distinctes, de telle façon à ce que le cadre soit tracé \emph{après} que
% contenu de boîte soit construit.
% Ceci garantit que la cadre est toujours au-dessus de la boîte. 
% \People{Donald}{Arseneau} a amélioré la rapidité ainsi que les besoins en
% mémoire de cette approche.
% Par ailleurs, une nouvelle commande est introduite :
%
% \DescribeMacro\boxframe\marg{largeur}\marg{hauteur}\marg{profondeur}\\
% Elle trace un cadre avec une épaisseur de trait de |\fboxrule|. La boîte
% |\hbox| qu'elle restitue présente les dimensions extérieures \meta{largeur},
% \meta{hauteur} et \meta{profondeur}.
% Avec cette approche, une primitive de cadre peut également être fournie par
% un fichier de pilote afin d'exploiter les spécificités de tracé des pilotes 
% (voir ci-dessous). 
% Là encore, la commande a été optimisée par \People{Donald}{Arseneau}.
%
% La nouvelle approche de l'encadrement est utilisée pour |\fcolorbox| que pour
% les commandes |\fbox| et |\framebox| de \LaTeX, à moins que l'option 
% \Option{kernelfbox} ne soit spécifiée, ce qui restitue alors les définitions
% originales de \LaTeX\ pour |\f(rame)box|.
%
% L'option \Option{xcdraw} utilise les commandes \Index{PostScript} pour tracer
% les cadres et boîtes colorées en cas de choix du pilote \Option{dvips} et 
% elle utilise le code \Index{PDF} pour tracer les cadres en cas de choix des
% pilotes \Option{pdftex} et \Option{dvipdfm}.
% Ceci reste un code expérimental qui peut perturber les visualisateurs 
% \File{.dvi}. 
% L'option opposée, \Option{noxcdraw}, impose l'utilisation d'un code générique
% (indépendant du pilote).
%
%
% \subsubsection{Utilisation de la couleur courante}
%
% Dans une expression de couleur, \og . \fg{} sert de synonyme pour la couleur
% courante. Voir la figure \vref{fig.cc} pour un exemple.
%
% Il est également possible de sauvegarder la couleur courante pour un usage
% ultérieur, par exemple, par le biais de la commande |\colorlet{foo}{.}|.
%
% Notez que, dans certains cas, la couleur courante est d'un intérêt 
% relativement limité. Par exemple, la construction d'une boîte |\fcolorbox|
% implique qu'au moment où la \Meta{couleur-fond} est évaluée, la couleur 
% courante est celle de \Meta{couleur-cadre} ; dans ce cas, \og |.| \fg{} ne 
% fait pas référence à la couleur courante à l'\emph{extérieur} de la boîte. 
%
%
% \subsubsection{Test de couleurs}
%
% \DescribeEnv{testcolors}
%   \oarg{modèles-numériques}\\
% Il s'agit ici d'un simple environnement de table (|tabular|) utilisé pour
% afficher des couleurs dans différents modèles et montrant à la fois le résultat
% visuel et les paramètres spécifiques au modèle.
% L'argument optionnel \Meta{modèles-numériques} est une liste de modèles de 
% couleur \emph{numériques} (comme d'habitude sans espaces) séparés par des 
% virgules et qui forment les colonnes de la table ; la liste par défaut est
% {\makeatletter\ttfamily\let\@protected@testopt\@gobbletwo\edef\tmp{\testcolors}\expandafter\@firstofone\tmp}.
%
% \DescribeMacro\testcolor
%   \marg{couleur}\\
%   \oarg{liste-modèle}\marg{liste-spéc}\\
% Chaque commande |\testcolor| génère une rangée de la table, contenant un
% exemple d'affichage et les paramètres propres à chaque modèle.
% Si le modèle associé à la colonne correspond au modèle de la couleur en
% question,  les paramètres sont alors soulignés.
% Notez que cette commande n'est disponible que dans l'environnement 
% |testcolors|.
%
% Pour des exemples, voir la figure \vref{fig.testcolors} ainsi que les figures
% \ref{fig.tHsb} et \ref{fig.harmony}.
%
%
%
% \subsection{Glissement de couleur}
%
% L'objectif du \emph{glissement de couleur} est d'ajouter une expression de
% mélange de couleur à toutes les couleurs explicites qui suivent. Il devient
% ainsi possible d'effectuer une même opération de mélange pour plusieurs 
% couleurs sans toucher à leur définition individuelle.
%
% \medskip
%
% \DescribeMacro\blendcolors
%   \marg{expr de mélange}\\
% \DescribeMacro{\blendcolors*}
%   \marg{expr de mélange}\\
% Cette commande initialise tous les paramètres nécessaires pour le glissement 
% de couleur. L'expression complète de glissement de couleur à proprement 
% parler est stockée dans |\colorblend|.
% Dans la version étoilée, l'argument sera ajouté à l'expression de glissement 
% existante. Un argument \Meta{expr de mélange} vide annule l'effet du 
% glissement à sa suite.
%
% Exemple: après |\blendcolors{!50!yellow}|, les couleurs \testclr{red} 
% \testclr{green} \testclr{blue} sont transformées en 
% {\blendcolors{!50!yellow}\testclr{red} \testclr{green} \testclr{blue} et 
% après un |\blendcolors*{!50}| complémentaire en 
% \blendcolors*{!50}\testclr{red} \testclr{green} \testclr{blue}}.
% \DescribeMacro\xglobal
% Afin d'obtenir un effet global, |\blendcolors| peut être préfixé avec 
% |\xglobal|.
%
% Remarque : le glissement de couleur peut être appliqué uniquement à des
% commandes de couleur \emph{explicites}, autrement dit |\color|, 
%|\fcolorbox| et similaires.
% Dans l'exemple précédent, les cadres ne sont pas touchés par le glissement
% car leur couleur est fixée par une commande interne au pilote (revenant à la
% \og couleur courante \fg{}). Ausi, pour influencer également ces couleurs 
% \emph{implicites}, il faut fixer la couleur courante \emph{après} le 
% glissement :
% |\blendcolors{!50!yellow}\color{black}| conduit à 
% {\blendcolors{!50!yellow}\color{black}\testclr{red} \testclr{green} 
% \testclr{blue}, et un |\blendcolors*{!50}\color{black}| complémentaire à 
% \blendcolors*{!50}\color{black}\testclr{red} \testclr{green} \testclr{blue}}.
%
%
% \subsection{Masques de couleur et séparation}
%
% Le but de la \emph{séparation de couleur} est de représenter toutes les 
% couleurs qui apparaissent dans un document comme une combinaison d'un
% sous-ensemble fini de couleurs de base et de leurs variantes assourdies.
% La séparation la plus importante est \Model{cmyk} où les couleurs de base
% sont le \Color{cyan}{cyan}, le \Color{magenta}{magenta}, le 
% \Color{jaune}{yellow} et le \Color{noir}{black}, comme demandé par les 
% imprimeurs.
% Ceci peut se faire en choisissant l'option d'extension \Option{cmyk}, de 
% telle manière à ce que toutes les couleurs soient converties dans ce modèle,
% et de retraiter alors le fichier de sortie pour en extraire les compositions
% des couleurs.
% Nous décrivons toutefois ici une autre solution bien plus générale : le 
% \emph{masque de couleur}. Comment cela marche-t-il ? Le masque de couleur 
% est basé sur un modèle colorimétrique \Meta{modèle-m} et un vecteur de
% paramètre \Meta{spéc-m}. 
% À chaque fois qu'une couleur doit être affichée dans le document, elle sera
% d'abord converti dans \Meta{modèle-m}, après quoi chaque composante de la 
% vecteur de couleur obtenu sera multipliée par la composante associée de 
% \Meta{spéc-m}.
% Par exemple, supposons que \Meta{modèle-m} soit |cmyk| et que \Meta{spéc-m}
% soit $(\mu_c,\mu_m,\mu_y,\mu_k)$. alors la couleur arbitraire \og test \fg{}
% est transformée selon la règle suivante :
% \begin{gather}
% test \mapsto (c,m,y,k) \mapsto 
% (\mu_c\cdot c,\mu_m\cdot m,\mu_y\cdot y,\mu_k\cdot k)
% \end{gather} 
% De toute évidence, la séparation de couleur correspond à un cas particulier
% de masque par les vecteurs $(1,0,0,0)$, $(0,1,0,0)$, etc. Une application
% intéressante revient à obtenir des couleurs éclaircies ou assombries de
% toutes les couleurs en les masquant avec $(x,x,x)$ dans le modèle \Model{rgb}
% ou \Model{cmy}, comme le montrent les deux dernières lignes de la figure 
% \vref{fig.mask}.
%
% \medskip
%
% \DescribeMacro\maskcolors
%   \oarg{modèle-numérique}\marg{couleur}\\
% Cette commande initialise tous les paramètres nécessaires pour le masque de
% couleur: si \Meta{modèle-numérique} n'est pas spécifié (ou vide), 
% \Meta{modèle-m} est le modèle naturel de la \Meta{couleur}, sinon c'est 
% \Meta{modèle-numérique}; les paramètres de \Meta{couleur} sont extraits pour
% définir \Meta{spéc-m}. En outre, |\maskcolorstrue| est exécutée. 
% \DescribeMacro\ifmaskcolors
% Le masque de couleur peut être désactivé temporairement avec 
% |\maskcolorsfalse|, ou --- d'une manière plus radicale --- par 
% |\maskcolors{}| qui, en plus, efface les paramètres d'initialisation. 
% \DescribeMacro\xglobal
% En général, le champ d'application de |\maskcolors| est le groupe courant
% (sauf si elle est précédée par la commande |\xglobal|), mais elle peut être
% également utilisée dans le préambule du document. Aussi, la dernière remarque
% de la section de mélange de couleurs s'applique ici de la même façon.
%
% Il est ainsi aisé d'appliquer une séparation sur tout un document
% sans toucher le code source :
% |latex| |\def\xcolorcmd{\maskcolors[cmyk]{cyan}}\input{a}| pratique la
% séparation du \Color{cyan}{cyan} pour le fichier |a.tex|.
%
% \DescribeMacro\colormask
% Attention : \XC{} n'a aucune notion de couleur dans les fichiers inclus par
% la commande |\includegraphics|, par exemple, les images de type \File{.eps},
% \File{.pdf}, \File{.jpg} ou \File{.png}.
% De tels fichiers doivent être traités séparément.
% Néanmoins, \XC{} offre un support de base pour stocker la couleur de masque
% dans |\colormask|, ce qui peut être utilisé pour décider quel fichier doit
% être intégré au document :
% \begin{verbatim}
% \def\temp{cyan}\ifx\colormask\temp \includegraphics{test_c}\else
% \def\temp{magenta}\ifx\colormask\temp \includegraphics{test_m}\else
% ...
% \fi\fi
% \end{verbatim}
%
%
%
% \subsection{Séries de couleurs}\label{sec.series}
%
% 
% La colorisation automatique peut être utile pour des logiciels générant des
% graphiques techniques où un nombre potentiellement grand de couleurs peut 
% être nécessaire et où l'utilisateur ne veut pas ou ne peut pas définir 
% chaque couleur séparément.
% C'est pourquoi nous introduisons le terme de \emph{séries de couleur} qui 
% consiste en une couleur de base et une règle indiquant comment la couleur
% suivante est construite à partir de la couleur courante.
% 
% La mise en application se fait en trois étapes :
% définition de la série (normalement en une seule fois dans le document),
% initialisation de la série (potentiellement plusieurs fois) et 
% utilisation --- avec ou sans passage à la couleur suivante --- de la 
% couleur actuelle de la série (potentiellement de nombreuses fois).
%
%
% \subsubsection{Définition d'une série}
%
% \DescribeMacro\definecolorseries
%   \marg{nom}\marg{modèle-central}\marg{algo}\oarg{modèle-b}\marg{spéc-b}\oarg{modèle-p}\marg{spéc-p}\\
% Cette commande définit une série de couleur nommée \Meta{nom} pour laquelle
% les calculs sont effectués dans le modèle \Meta{modèle-central} en utilisant
% l'algorithme \Meta{algo} (à choisir entre |step|, |grad| et |last|, voir
% ci-dessous).
% Les paramètres de l'algorithme sont donnés par les arguments restants : 
% \begin{itemize}
% \item \oarg{modèle-b}\marg{spéc-b} spécifie la couleur de \emph{base}
% (\emph{i.e.} la première) de l'algorithme, soit directement, par exemple 
% avec |[rgb]{1,0.5,0.5}|, soit avec une \Meta{couleur}, par exemple avec
% |{-yellow!50}|, si l'argument optionnel est manquant ;
% \item \oarg{modèle-s}\marg{s-spec} spécifie comment le vecteur du 
% \emph{pas} de la série est calculé par l'algorithme \Meta{algo} choisi :
%   \begin{itemize}
%   \item |step|,\ |grad|:\ l'argument optionnel n'a pas de sens et 
%     \Meta{spéc-p} est un vecteur de paramètre dont la dimension dépend du
%     \Meta{modèle-central}, par exemple |{0.1,-0.2,0.3}| dans le cas de |rgb|,
%     |cmy| ou |hsb|.
%   \item |last|:\ la dernière\footnote{NDT : en anglais, \emph{last}.} couleur
%     est indiquée, soit directement, par exemple avec |[rgb]{1,0.5,0.5}|, soit
%     avec une \Meta{couleur}, par exemple avec |{-yellow!50}| si l'argument 
%     optionnel est manquant.
%   \end{itemize}
% \end{itemize}
% En voici la mécanique générale :
% \begin{gather}
% \emph{couleur}_1 := \emph{base},\qquad
% \emph{couleur}_{n+1} := U\bigl(\emph{couleur}_{n} + \emph{pas}\bigr)
% \end{gather}
% avec $n=1,2,\dots$ et $U$ une fonction définie sur l'ensemble des vecteurs 
% de dimension $m$ et à valeur dans le cube unité de dimension $m$ :
% \begin{gather}
% U(x_1,\dots,x_m) = (u(x_1),\dots,u(x_m)),\qquad
% u(x) =
% \begin{cases}
%  1 & \text{si $x=1$}\\
%  x-[x]& \text{si $x\neq1$}\\
% \end{cases}\label{eq.U}
% \end{gather}
% Ainsi, chaque étape de l'algorithme conduit à une couleur valide avec des 
% paramètres dans l'intervalle $[0,1]$.
%
% \medskip
% Ici, chaque algorithme utilise une méthode différente pour calculer le
% vecteur \emph{pas} :
% \begin{itemize}
% \item |step|,\ |grad|:\ le dernier argument, \marg{spéc-p}, définit le
%   vecteur directionnel \emph{gradient} ;
% \item |last|:\ \marg{spéc-p} ou \oarg{modèle-p}\marg{spéc-p}, selon le cas, 
%   définit le \emph{dernier} vecteur de paramètres de couleur.
% \end{itemize}
% Durant le traitement de |\resetcolorseries|, le vecteur courant
% \emph{pas} est alors calculé ainsi :
% \begin{gather}
% \emph{pas} :=
% \begin{cases}
% \emph{gradient} & \text{si $\Meta{algo} = |step|$}\\
% \frac1{\Meta{div}}\cdot\emph{gradient} & \text{si $\Meta{algo} = 
%   |grad|$}\\
% \frac1{\Meta{div}}\cdot(\emph{dernier}-\emph{base}) & \text{si 
%   $\Meta{algo} = |last|$}\\
% \end{cases}\label{eq.cs}
% \end{gather}
% Notez qu'il est possible d'utiliser l'abréviation de la couleur courante
% \og . \fg{} dans la définition d'une série.
% Ainsi, |\definecolorseries{test}{rgb}{last}{.}{-.}| constitue une série
% qui commence avec la couleur courante et s'achève avec sa complémentaire.
% Bien sûr, de façon similaire à la primitive |\let| de \TeX, la définition
% de la couleur courante est celle au moment de l'exécution de la commande et
% il n'y a pas ici de relation avec les couleurs utilisées par la suite dans
% le document.
%
%
% \subsubsection{Initialisation d'une série}
%
% \DescribeMacro\resetcolorseries
%   \oarg{div}\marg{nom}\\
% Cette commande doit être exécutée au moins une fois afin de pouvoir se servir
% de la série \Meta{nom}. Elle réinitialise la couleur courante de la série à 
% la couleur de base et calculé le vecteur pas selon le \Meta{div} choisi, un 
% nombre réel non nul, pour les algorithmes |grad| et |last|, voir 
% équation~\ref{eq.cs}. 
% \DescribeMacro\colorseriescycle
% Si l'argument optionnel est vide, la valeur stockée dans |\colorseriescycle|
% est appliquée. Sa valeur par défaut est \colorseriescycle et peut être
% changée par |\def\colorseriescycle|\marg{div} qui doit être indiqué 
% \emph{avant} que l'\XCP{} ne soit chargée (de façon similaire à |\rangeRGB|
% et assimilés). L'argument optionnel est ignoré dans le cadre de l'algorithme
% |step|.
%
%
% \subsubsection{Utilisation d'une série}
%
% Il existe deux manières d'afficher la couleur courante d'une série: n'importe 
% quelle \emph{expression de couleur} de la section \vref{sec.term} utilisée 
% dans une commande  |\color|, |\textcolor| ou autre affiche cette couleur 
% selon la syntaxe usuelle de telles expressions. Cependant, dans les cas où le
% \Meta{suffixe} vaut \og |!!+| \fg{}, par exemple |\color{|\Meta{nom}|!!+}|, 
% la commande affiche non seulement la couleur mais incrémente la série d'un 
% pas. Ainsi la couleur courante de la série est changée dans ce cas. Une 
% expression |\color{|\Meta{name}|!![|\Meta{num}|]}| permet par ailleurs
% l'accès direct à un élément de la série, avec \Meta{num} = $0,1,2\dots$, en 
% commençant par~0 pour la couleur de base. Voir la figure \vref{fig.csx} pour
% une démonstration des différentes méthodes.
%
%
% \subsubsection{Différences entre couleurs et séries de couleurs}
%
% Bien qu'ils se comportent de manière similaire lors d'une utilisation dans 
% des expressions de couleur, les objets définis par |\definecolor| et 
% |\definecolorseries| sont fondamentalement différents en termes de 
% portée/disponibilité : comme la commande |\definecolor| originale de \LC, 
% |\definecolor| génère des couleurs \emph{locales} tandis que 
% |\definecolorseries| génère des objets \emph{globaux} (sinon, il serait 
% impossible de se servir aisément du mécanisme de pas dans les tables et les
% graphiques). Par exemple, si nous supposons que |truc| est une couleur non 
% définie, alors après avoir écrit 
% \begin{verbatim}
% \begingroup
% \definecolorseries{test}{rgb}{last}{red}{blue}
% \resetcolorseries[10]{test}
% \definecolor{truc}{rgb}{.6,.5,.4}
% \endgroup
% \end{verbatim}
% les commandes comme |\color{test}| or |\color{test!!+}| peuvent être 
% utilisées sans restriction tandis que |\color{truc}| génère un message
% d'erreur. Cependant, il est possible de saisir |\colorlet{truc}{test}| ou 
% |\colorlet{truc}{test!!+}| afin de sauvegarder la couleur courante d'une 
% série localement --- avec ou sans utilisation du pas.
%
%
%
%
% \subsection{Couleur d'encadrement d'hyperliens}\label{sec.hyperref}
%
% L'extension \Package{hyperref} offre toutes sortes de support pour les
% hyperliens, les \trad{fonctionnalités} PDF, etc. Il y a d'ordinaire deux
% façons pour rendre les hyperliens visibles (voir la documentation de 
% l'extension \cite{hyperref} pour plus d'informations sur l'utilisation de ces
% fonctionnalités) :
% \begin{itemize}
% \item composer les hyperliens avec une couleur différente de celle du texte 
%   en recourant aux clés \Key{citecolor}, \Key{filecolor}, \Key{linkcolor}, 
%   \Key{menucolor}, \Key{pagecolor}, \Key{runcolor} et \Key{urlcolor} avec des 
%   expressions de couleur telles que, par exemple, 
%  |\hypersetup{urlcolor=-green!50}| ;
% \item afficher un cadre coloré autour des hyperliens avec les clés 
%   \Key{citebordercolor}, \Key{filebordercolor}, \Key{linkbordercolor}, 
%   \Key{menubordercolor}, \Key{pagebordercolor}, \Key{runbordercolor} et 
%   \Key{urlbordercolor} associées à des paramètres \Model{rgb} numériques 
%   explicites, comme par exemple |\hypersetup{urlbordercolor={1 0.5 0.25}}|.
% \end{itemize}
% À l'évidence, la seconde méthode n'est pas très pratique puisqu'elle ne
% permet pas d'utiliser les noms de couleur ou les expressions de couleur. 
% Ici, \XC{} propose --- par le biais de l'option d'extension 
% \Option{hyperref} --- les clés étendues \Key{xcitebordercolor}, 
% \Key{xfilebordercolor}, \Key{xlinkbordercolor}, \Key{xmenubordercolor}, 
% \Key{xpagebordercolor}, \Key{xrunbordercolor} et \Key{xurlbordercolor} qui
% peuvent être utilisées en conjonction avec les expressions de couleur, par
% exemple |\hypersetup{xurlbordercolor=-green!50}|.
%
% Une autre clé, \Key{xpdfborder}, propose une façon de traiter un problème lié
% \Program{dvips} : pour la plupart des pilotes, un paramétrage comme 
% |pdfborder={0 0 1}| détermine l'épaisseur du cadre qui est tracé autour des
% hyperliens en points. Toutefois, dans le cas de \Program{dvips}, les 
% paramètres numériques sont interprêtés en lien avec la résolution de sortie
% choisie pour convertir le fichier \File{.dvi} en fichier \File{.ps}. 
% Malheureusement, au moment où le fichier \File{.dvi} est construit, personne 
% ne sait si une conversion du fichier \File{.dvi} en \File{.ps} sera effectuée
% par la suite et à quelle résolution. 
% Par conséquent, toute valeur par défaut pour \Key{pdfborder} peut avoir du 
% sens ou pas. Au sein d'\Package{hyperref}, la valeur par défaut pour 
% \Program{dvips} est |pdfborder={0 0 12}|, ce qui fonctionne bien pour des
% résolutions de 600 ou 1200~dpi mais produit un cadre invisible pour une 
% résolution de 8000~dpi, comme déterminé par l'option |-Ppdf| en ligne de 
% commande.
% À l'opposé, paramétrer |pdfborder={0 0 80}| fonctionne bien avec 
% \Program{dvips} à 8000~dpi, mais rend le document peu portable puisque les
% autres pilotes (y compris |dvips| en faible résolution) dessinent un cadre
% très épais dans ce cas.  
% La clé \Key{xpdfborder} prend là tout son sens : elle redimensionne son 
% argument dans le cas du pilote |dvips| d'un facteur 80 (prêt pour 8000~dpi)
% et le garde inchangé pour les autres pilotes. Ainsi il est possible
% de spécifier |xpdfborder={0 0 1}| de façon indépendante des pilotes.
%
%
%
% \subsection{Spécifications de couleurs additionnelles pour
%   \Package{pstricks}}\label{sec.pstricks}
%
% Pour les utilisateurs de \Package{pstricks}, il existe plusieurs méthodes
% pour indiquer de la couleur dans les clés des options :
% \begin{itemize}
% \item |\psset{linecolor=green!50}|
% \item |\psset{linecolor=[rgb]{0.5,1,0.5}}|
% \item |\psframebox[linecolor={[rgb]{0.5,1,0.5}}]{foo}|
% \end{itemize}
% Notez la présence des accolades dans le dernier cas; sans elles, l'argument
% optionnel de |\psframebox| s'achèverait trop tôt.
%
% \DescribeMacro\definecolor
%   |[ps]|\marg{nom}\marg{liste-modèle-central}\marg{code}\\
% Cette commande stocke le \Meta{code} \Index{PostScript} --- qui ne devrait 
% pas contenir de caractères \og |/| \fg{} --- dans une couleur.
% Exemple:
% après avoir déclaré |\definecolor[ps]{tic}{rgb}{tac}|, 
% la commande |\psline[linecolor=tic]...| de l'extension de \Package{pstricks}
% insère \og |tac setrgbcolor| \fg{} là où l'information de |linecolor| est
% requise --- au moins dans le cas du pilote \Option{dvips}.
% Voir aussi \href{xcolor2.pdf}{\File{xcolor2.tex}} pour une illustration de
% point.
%
%
%
% \subsection{Couleur dans des tableaux}
%
% \DescribeMacro\rowcolors
%   \oarg{commandes}\marg{rangée}\marg{couleur-rangée-impaire}\marg{couleur-rangée-paire}\\
% \DescribeMacro{\rowcolors*}
%   \oarg{commandes}\marg{rangée}\marg{couleur-rangée-impaire}\marg{couleur-rangée-paire}\\
% Ces commandes doivent être exécutées \emph{avant} que la table ne commence. 
% L'argument \Meta{rangée} précise le numéro de la première rangée qui doit
% être colorée avec le motif composé de \Meta{couleur-rangée-impaire} et de
% \Meta{couleur-rangée-paire} 
% Chacun des arguments de couleur peut aussi être laissé vide, ce qui implique
% alors l'absence de couleur.
% Dans la version étoilée, les \Meta{commandes} sont ignorées dans les rangées
% avec des \emph{status de rowcolors} inactifs (voir ci-dessous) tandis que dans 
% la version non étoilée, les \Meta{commandes} sont appliquées dans chaque 
% rangée de la table.    
% Ces commandes optionnelles peuvent être |\hline| ou |\noalign|\marg{trucs}.
%
% \DescribeMacro\showrowcolors
% \DescribeMacro\hiderowcolors
% Le \emph{status de rowcolors} est activé (c'est-à-dire que le motif de
% couleur est appliqué) par défaut ou en utilisant la commande 
% |\showrowcolors|, il est désactivé (le motif est ignoré) avec la commande 
% |\hiderowcolors|.
% \DescribeMacro\rownum
% Le compteur |\rownum| peut être utilisé au sein d'une table pour accéder 
% au numéro courant de la rangée. Un exemple est donné en figure 
% \vref{fig.row}. Ces commandes requièrent l'option \Option{table} (qui charge
% l'extension \Package{colortbl}).
%
% Notez que la mise en couleur de table peut être combinée avec des séries de
% couleur. Cette méthode a servi pour constituer les exemples en figure 
% \vref{fig.csx}.
%
%
%
% \subsection{Information sur la couleur}\label{sec.info}
%
% \DescribeMacro\extractcolorspec
%   \marg{couleur}\marg{commande}\\
% Cette commande extrait les spécifications de la \Meta{couleur} et les place 
% dans la \Meta{commande} ce qui est équivalent à  
% |\def\commande{|\marg{modèle}\marg{spéc}|}|.
%
% \DescribeMacro\extractcolorspecs
%   \marg{couleur}\marg{model-cmd}\marg{color-cmd}\\
% Cette commande extrait les spécifications de la \Meta{couleur} et les place 
% dans la \Meta{commande-modèle} et la \Meta{commande-couleur} respectivement.
%
% \medskip
% \DescribeMacro\tracingcolors
%   |=|\Meta{int}\\
% Cette commande contrôle la quantité d'information écrite (ou trace) dans le
% fichier |log| :
% \begin{itemize}
% \item \mbox{$\Meta{int}\le0$:}~aucune trace spécifique aux couleurs n'est 
%   générée ;
% \item \mbox{$\Meta{int}\ge1$:}~les définitions de couleur ignorées après un
%   |\providecolor| sont tracées ;
% \item \mbox{$\Meta{int}\ge2$:}~les définitions multiples d'une couleur (qui
%   s'écrasent donc) sont tracées ;
% \item \mbox{$\Meta{int}\ge3$:}~chaque commande qui définit une couleur est
%   tracée ;
% \item \mbox{$\Meta{int}\ge4$:}~chaque commande qui \trad{paramètre} une 
%   couleur est tracée.
% \end{itemize}
% Comme les commandes |\tracing...| de \TeX, cette commande peut être utilisée
% globalement (dans le préambule du document) ou localement dans des blocs.
% L'extension fixe |\tracingcolors=0| as default. 
% Remarque : dans la mesure où les registres sont en nombre limité et précieux,
% aucun compteur n'est perdu pour traiter ce sujet.
%
% Notez qu'à chaque fois qu'est utilisée une couleur qui a été définie par la
% commande |\definecolor| de \LC plutôt que par celle de \XC (ou autre), un
% message d'avertissement sur l'incompatibilité de définition de couleur 
% \og Incompatible color definition \fg{} est émis\footnote{Ceci ne devrait pas
% survenir puisqu'il n'y a pas de raison de charger \LC{} en parallèle de 
% \XC{}.}.
%
%
%
% \subsection{Conversion de couleur}
%
% \DescribeMacro\convertcolorspec
%   \marg{modèle}\marg{spéc}\marg{modèle-cible}\marg{commande}\\
% Cette commande convertit une couleur, donnée par les \Meta{spéc} dans le
% \Meta{modèle}, dans le \Meta{modèle-cible} et stocke les nouvelles 
% spécifications dans |\commande|.
% Le \Meta{modèle-cible} doit être de type \Meta{modèle-numérique}, tandis que
% le \Meta{modèle} peut être également \og named \fg{}, auquel cas \Meta{spéc}
% correspond tout simplement au nom de la couleur.
%
% Exemple : |\convertcolorspec{cmyk}{0.81,1,0,0.07}{HTML}\temp| fait la même
% opération que |\def| |\temp{1F00ED}|.
%
%
%
% \subsection{Problèmes et solutions}
%
% \subsubsection{Conflits de nom entre \Option{dvipsnames} et 
%   \Option{svgnames}}\label{sec.clash}
%
% Du fait de l'ordre fixe de traitement des options (qui ne dépend pas de
% l'ordre dans lequel les options sont listées dans la commande 
% |\usepackage|), les couleurs \Option{svgnames} priment toujours sur les
% couleurs \Option{dvipsnames} portant le même nom.
% Ceci peut conduire à des résultats non souhaités si les deux options sont
% chargées ensemble.
% Par exemple, \Color{Fuchsia}{Fuchsia} restitue 
% \testclr[cmyk]{0.47,0.91,0,0.08} avec l'option \Option{dvipsnames} et
% \testclr[rgb]{1,0,1} avec l'option \Option{svgnames}.
% Toutefois, il existe ici une astuce --- basée sur la \emph{définition
% différée de couleur} --- qui nous permet d'utiliser des couleurs des deux 
% ensembles comme souhaité :
% \begin{verbatim}
% \usepackage[dvipsnames*,svgnames]{xcolor}
% \definecolors{Fuchsia}
% \end{verbatim}
% Maintenant toutes les couleurs de l'ensemble \Index{SVG} sont disponibles 
% (exception faites de \Color{Fuchsia}{Fuchsia}) ainsi que 
% \Color{Fuchsia}{Fuchsia} de l'autre ensemble.
%
% \subsubsection{Saut de page et pdf\TeX}\label{sec.fixpdftex}
%
% Dans la mesure où pdf\TeX{} ne gère pas une \emph{\Index{pile de couleur}} 
% --- contrairement à \Program{dvips} --- ceci pose une difficulté de 
% comportement des couleurs en cas de saut de page, comme illustré dans 
% l'exemple suivant :
% \begin{verbatim}
% \documentclass{minimal}
% \usepackage{xcolor}
% \begin{document}
% noir\color{red}rouge1\newpage rouge2\color{black}noir
% \end{document}
% \end{verbatim}
% Ceci fonctionne comme attendu avec |dvips|, autrement dit \og red1 \fg{} et 
% \og rouge2 \fg{} apparaissent en \Color{rouge}{red}. Cependant, avec 
% |pdftex|, \og rouge2 \fg{} est affiché en \Color{noir}{black}.
% Ce problème peut être résolu en utilisant l'option \Option{fixpdftex} qui
% charge l'extension \Package{pdfcolmk} de Heiko Oberdiek \cite{pdfcolmk}.
% Cependant, ce dernier liste quelques limitations :
% \begin{itemize}
% \item limitations sur les marques (cas du saut de page en mode mathématique).
% \item la routine de sortie de \LaTeX{} est redéfinie :
% \begin{itemize}
% \item les changements de routine des nouvelles versions de \LaTeX{} ne sont
%   détectés,
% \item les extensions qui changent cette routine ne sont pas supportées.
% \end{itemize}
% \item le suivi de plusieurs flux de textes comme les notes en base de page
% n'est pas supporté.
% \end{itemize}
%
% \subsubsection{Changement de couleur d'une image \File{.eps} 
%   insérée}\label{sec.fixinclude}
%
% En général, \XC{} ne peut pas changer les couleurs d'une image insérée par le
% biais de la commande |\includegraphics| des extensions \Package{graphics} 
% comme \Package{graphicx}.
% Il existe toutefois une possibilité limitée d'influer sur la couleur courante
% des fichiers \Index{PostScript}. Considérez le fichier |truc.eps| suivant
% qui dessine une boîte grise encadrée. 
% \begin{verbatim}
% %!PS-Adobe-3.0 EPSF-3.0
% %%BoundingBox: 0 0 60 12
% 0 0 60 12 rectfill
% 0.75 setgray
% 2 2 56 8 rectfill
% \end{verbatim}
% Maintenant exécutez le code suivant avec \LaTeX{} puis \Program{dvips}:
% \begin{verbatim}
% \documentclass{minimal}
% \usepackage[fixinclude]{xcolor}
% \usepackage{graphics}
% \begin{document}
% \includegraphics{truc} \textcolor{red}{\includegraphics{truc}}
% \end{document}
% \end{verbatim}
% Le fichier \File{.ps} qui en résulte affiche deux boîtes grises : la première
% avec un cadre noir, la seconde avec un cadre rouge. Si l'option 
% \Option{fixinclude} avait été omise, la seconde boîte afficherait également
% un cadre noir. Ce comportement s'explique par le fait que \Program{dvips}
% réinitialise la couleur courante au noir aussitôt avant d'inclure un fichier 
% \File{.eps}.
%
%
%
% \clearpage
% \begin{adjustwidth}{-2.5cm}{}
% \section{Exemples}
%
%
% \begin{figure}[htbp]\caption{Spectre visible}\label{fig.spectrum}
% \small
% \newcount\WL \unitlength.75pt
% \begin{picture}(460,60)(355,-10)
% \sffamily \tiny \linethickness{1.25\unitlength} \WL=360
% \multiput(360,0)(1,0){456}%
%  {{\color[wave]{\the\WL}\line(0,1){50}}\global\advance\WL1}
% \linethickness{0.25\unitlength}\WL=360
% \multiput(360,0)(20,0){23}%
%  {\picture(0,0)
%   \line(0,-1){5} \multiput(5,0)(5,0){3}{\line(0,-1){2.5}}
%   \put(0,-10){\makebox(0,0){\the\WL}}\global\advance\WL20
%   \endpicture}
% \end{picture}
% \vspace*{3ex}
% \begin{verbatim}
% \newcount\WL \unitlength.75pt
% \begin{picture}(460,60)(355,-10)
% \sffamily \tiny \linethickness{1.25\unitlength} \WL=360
% \multiput(360,0)(1,0){456}%
%  {{\color[wave]{\the\WL}\line(0,1){50}}\global\advance\WL1}
% \linethickness{0.25\unitlength}\WL=360
% \multiput(360,0)(20,0){23}%
%  {\picture(0,0)
%   \line(0,-1){5} \multiput(5,0)(5,0){3}{\line(0,-1){2.5}}
%   \put(0,-10){\makebox(0,0){\the\WL}}\global\advance\WL20
%   \endpicture}
% \end{picture}
% \end{verbatim}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Tests de couleur}\label{fig.testcolors}
% \small
% \begin{adjustwidth}{-2.5cm}{}
% \raggedleft
% \sffamily
% \begin{testcolors}[rgb,cmyk,hsb,HTML,gray]
% \testcolor{olive}
% \testcolor{red!50!green}
% \testcolor{-cyan!50!magenta}
% \testcolor[cmyk]{0,0,1,0.5}
% \testcolor[cmyk]{0,0,.5,.5}
% \testcolor[rgb:cmyk]{0,0,.5,.5}
% \end{testcolors}
% \end{adjustwidth}
% \vspace*{3ex}
% \begin{adjustwidth}{2.5cm}{}
% \begin{verbatim}
% \sffamily
% \begin{testcolors}[rgb,cmyk,hsb,HTML,gray]
% \testcolor{olive}
% \testcolor{red!50!green}
% \testcolor{-cyan!50!magenta}
% \testcolor[cmyk]{0,0,1,0.5}
% \testcolor[cmyk]{0,0,.5,.5}
% \testcolor[rgb:cmyk]{0,0,.5,.5}
% \end{testcolors}
% \end{verbatim}
% \end{adjustwidth}
% \end{figure}
%
%
% \def\ukColor{MyGreen}
% \definecolor{\ukColor}{cmyk}{0.92,0,0.87,0.09}
% \colorlet{\ukColor-rgb}[rgb]{\ukColor}
% \colorlet{\ukColor-cmy}[cmy]{\ukColor}
% \colorlet{\ukColor-hsb}[hsb]{\ukColor}
% \colorlet{\ukColor-gray}[gray]{\ukColor}
%
% \begin{figure}[htbp]\caption{Progression d'une couleur à une autre}\label{fig.progress}
% \small
% \begin{adjustwidth}{-2.5cm}{}
% \makeatletter
% \shorthandoff{:}
% \def\ColorLoop#1#2{\@tfor\@@tmp:={}{-rgb}{-cmy}{-hsb}{-gray}\do
%   {\ifcase#1
%    \expandafter\Colorloop\expandafter{\expandafter\ukColor\@@tmp}{#2}\or
%    \expandafter\Colorshow\expandafter{\expandafter\ukColor\@@tmp}\fi}\\[-2ex]\ignorespaces}
% \def\Colorloop#1#2{\@ifxempty{#1}{}{\texttt{#1!}}&
%   \count@105 \@whilenum\count@>\z@\do
%    {\advance\count@-5
%     \@ifxempty{#1}{\hb@xt@\XCdim{\hss\textsf{\the\count@}\hss}}{\testclr{#1!\the\count@!#2}}\hskip-\fboxrule}\hskip\fboxrule&
%   \@ifxempty{#1}{}{\texttt{!#2}}\\}
% \def\Colorshow#1{\texttt{#1}&
%   \multicolumn2{l@{}}{\expandafter\let\expandafter\@@tmp\csname\string\color@#1\endcsname
%   \edef\@@tmp{\expandafter\@gobbletwo\@@tmp}\Meaning{@@tmp}}\\}
% \shorthandon{:}
% \makeatother
% \sbox0{\testclr{red}}\XCdim\wd0
% \begin{tabular}{@{}lll@{}}
% \Colorloop{}{}\\[-2ex]
% \ColorLoop0{white}
% \ColorLoop0{gray}
% \ColorLoop0{black}
% \ColorLoop0{red}
% \ColorLoop0{blue}
% \ColorLoop0{yellow}
% \\\noalign{\vspace*{-2.5ex}}\hline\noalign{\vspace*{1.5ex}}
% \itshape Couleur&\itshape Définition/représentation (pilote \textup{\Option{\csname XC@@drv\endcsname}})\\
% \ColorLoop1{}
% \end{tabular}
% \end{adjustwidth}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Modèle de couleur cible}\label{fig.tgt}
% \small
% \begin{adjustwidth}{-2.5cm}{}
% \raggedleft
% \extrarowheight2pt
% \makeatletter
% \def\X#1%
%  {\def\tmp{{#1}}\dots\Meaning{tmp}&
%   \selectcolormodel{#1}\testclr{red} \testclr{green} \testclr{blue} 
%   \testclr{cyan} \testclr{magenta} \testclr{yellow} \testclr{brown} 
%   \testclr{lime} \testclr{olive} \testclr{orange} \testclr{pink} 
%   \testclr{purple} \testclr{teal} \testclr{violet} \testclr{black} 
%   \testclr{darkgray} \testclr{gray} \testclr{lightgray} \testclr{white}\\}
% \makeatother
% \begin{tabular}{@{}>{\ttfamily}l@{ }l@{}}
% \string\selectcolormodel&\\
% \X{natural}
% \X{rgb}
% \X{cmy}
% \X{cmyk}
% \X{hsb}
% \X{gray}
% \end{tabular}
% \end{adjustwidth}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Expressions de couleurs 
%   standards}\label{fig.expr}
% \centering\small
% \def\test#1{\testclr{#1}& \texttt{#1}}
% \def\X#1{\test{#1}& \test{-#1}}
% \begin{tabular}{@{}l@{ \ }ll@{ \ }l@{}}
% \X{red}\\
% \X{red!75}\\
% \X{red!75!green}\\
% \X{red!75!green!50}\\
% \X{red!75!green!50!blue}\\
% \X{red!75!green!50!blue!25}\\
% \X{red!75!green!50!blue!25!gray}\\
% \end{tabular}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Expressions de couleurs standards}\label{fig.ex}
% \begin{minipage}{\textwidth}\small
% \begin{verbatim}
% \fboxrule6pt
% \fcolorbox
%  {red!70!green}% cadre extérieur
%  {yellow!30!blue}% fond extérieur
%  {\fcolorbox
%    {-yellow!30!blue}% cadre intérieur
%    {-red!70!green}% fond intérieur
%    {Test\textcolor{red!72.75}{Test}\color{-green}Test}}
% \end{verbatim}
% \end{minipage}\relax
% \llap{\fboxrule6pt \fcolorbox
%   {red!70!green}{yellow!30!blue}{\fcolorbox
%     {-yellow!30!blue}{-red!70!green}{Test\textcolor{red!72.75}{Test}\color{-green}Test}}}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Couleur courante}\label{fig.cc}
% \begin{minipage}{\textwidth}\small
% \begin{verbatim}
% \def\test{courante, \textcolor{.!50}{50\%},
%           \textcolor{-.}{complémentaire},
%           \textcolor{yellow!50!.}{mélange}}
% \textcolor{blue}{\test}\\
%  et \textcolor{red}{\test}\\
% \def\Test{\color{.!80}Test}
% \textcolor{blue}{\Test\Test\Test\Test\Test}\\
% et \textcolor{red}{\Test\Test\Test\Test\Test}
% \end{verbatim}
% \end{minipage}\relax
% \llap{\begin{minipage}{.5\textwidth}\small\raggedleft
% \def\test{courante, \textcolor{.!50}{50\%},
%           \textcolor{-.}{complémentaire},
%           \textcolor{yellow!50!.}{mélange}}
% \ \\[0.5cm] \textcolor{blue}{\test}\\
%  et \textcolor{red}{\test}\\
% \def\Test{\color{.!80}Test}
% \textcolor{blue}{\Test\Test\Test\Test\Test}\\
% et \textcolor{red}{\Test\Test\Test\Test\Test}
% \end{minipage}}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Séries de couleur}\label{fig.csx}
% \centering
% \def\tabulartest#1{\definecolorseries{test}#1\resetcolorseries[12]{test}%
%  \rowcolors[\hline]{1}{test!!+}{test!!+}%
%  \begin{tabular}{c}
%  \number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\
%  \number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\
%  \number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\
%  \number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\
%  \end{tabular}}
%
% \begin{tabular}{@{}*{9}{c}@{}}
% $S_1$ & $S_2$ & $G_1$ & $G_2$ & $L_1$ & $L_2$ & $L_3$ & $L_4$ & $L_5$ \\[3pt]
% \tabulartest{{rgb}{step}[rgb]{.95,.85,.55}{.17,.47,.37}}&
% \tabulartest{{hsb}{step}[hsb]{.575,1,1}{.11,-.05,0}}&
% \tabulartest{{rgb}{grad}[rgb]{.95,.85,.55}{3,11,17}}&
% \tabulartest{{hsb}{grad}[hsb]{.575,1,1}{.987,-.234,0}}&
% \tabulartest{{rgb}{last}[rgb]{.95,.85,.55}[rgb]{.05,.15,.55}}&
% \tabulartest{{hsb}{last}[hsb]{.575,1,1}[hsb]{-.425,.15,1}}&
% \tabulartest{{rgb}{last}{yellow!50}{blue}}&
% \tabulartest{{hsb}{last}{yellow!50}{blue}}&
% \tabulartest{{cmy}{last}{yellow!50}{blue}}\\
% \end{tabular}
%
% \bigskip
%
% \footnotesize
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabular}{>{$}l<{$}l}
% \hline
% \multicolumn2{>{\columncolor{tableheadcolor}}c}{\em Définitions individuelles}\\
% S_1& |\definecolorseries{test}{rgb}{step}[rgb]{.95,.85,.55}{.17,.47,.37}|\\
% S_2& |\definecolorseries{test}{hsb}{step}[hsb]{.575,1,1}{.11,-.05,0}|\\
% G_1& |\definecolorseries{test}{rgb}{grad}[rgb]{.95,.85,.55}{3,11,17}|\\
% G_2& |\definecolorseries{test}{hsb}{grad}[hsb]{.575,1,1}{.987,-.234,0}|\\
% L_1& |\definecolorseries{test}{rgb}{last}[rgb]{.95,.85,.55}[rgb]{.05,.15,.55}|\\
% L_2& |\definecolorseries{test}{hsb}{last}[hsb]{.575,1,1}[hsb]{-.425,.15,1}|\\
% L_3& |\definecolorseries{test}{rgb}{last}{yellow!50}{blue}|\\
% L_4& |\definecolorseries{test}{hsb}{last}{yellow!50}{blue}|\\
% L_5& |\definecolorseries{test}{cmy}{last}{yellow!50}{blue}|\\
% \hline
% \multicolumn2{>{\columncolor{tableheadcolor}}c}{\em Définitions communes}\\
% \hiderowcolors
% &|\resetcolorseries[12]{test}|\\
% &|\rowcolors[\hline]{1}{test!!+}{test!!+}|\\
% &|\begin{tabular}{c}|\\
% &|\number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\|\\
% &|\number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\|\\
% &|\number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\|\\
% &|\number\rownum\\ \number\rownum\\ \number\rownum\\ \number\rownum\\|\\
% &|\end{tabular}|\\
% \hline
% \end{tabular}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Masques de couleur}\label{fig.mask}
% \begin{adjustwidth}{-2.5cm}{}
% \small\raggedleft
% \extrarowheight2pt
% \makeatletter
% \def\X#1#2{\edef\tmp{\@ifxempty{#1}{}{[#1]}{#2}}\dots\Meaning{tmp}&
%   \maskcolors[#1]{#2}\testclr{red} \testclr{green} \testclr{blue} 
% \testclr{cyan} \testclr{magenta} \testclr{yellow} \testclr{brown} 
% \testclr{lime} \testclr{olive} \testclr{orange} \testclr{pink} 
% \testclr{purple} \testclr{teal} \testclr{violet} \testclr{black} 
% \testclr{darkgray} \testclr{gray} \testclr{lightgray} 
% \testclr{white}\\}\relax
% \makeatother
% \begin{tabular}{@{}>{\ttfamily}l@{ }l@{}}
% \string\maskcolors&\\
% \hline
% \X{}{}
% \hline
% \X{cmyk}{cyan}
% \X{cmyk}{magenta}
% \X{cmyk}{yellow}
% \X{cmyk}{black}
% \hline
% \X{cmyk}{red}
% \X{cmyk}{green}
% \X{cmyk}{blue}
% \hline
% \X{rgb}{red}
% \X{rgb}{green}
% \X{rgb}{blue}
% \hline
% \X{hsb}{red}
% \X{hsb}{green}
% \X{hsb}{blue}
% \hline
% \X{rgb}{gray}
% \X{cmy}{gray}
% \end{tabular}
% \end{adjustwidth}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Rangées de couleurs alternées : \cmd\rowcolors{}
%   face à \cmd\rowcolors\texttt*}\label{fig.row}
% \centering
% \begin{minipage}{\textwidth}
% \begin{verbatim}
% \rowcolors[\hline]{3}{green!25}{yellow!50} \arrayrulecolor{red!75!gray}
% \begin{tabular}{ll}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \arrayrulecolor{black}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \rowcolor{blue!25}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \hiderowcolors
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \showrowcolors
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \multicolumn{1}%
%  {>{\columncolor{red!12}}l}{test} & rangée \number\rownum\\
% \end{tabular}
% \end{verbatim}
% \end{minipage}
% \hskip-.55\textwidth
% \rowcolors[\hline]{3}{green!25}{yellow!50} \arrayrulecolor{red!75!gray}
% \begin{tabular}{ll}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \arrayrulecolor{black}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \rowcolor{blue!25}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \hiderowcolors
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \showrowcolors
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \multicolumn{1}%
%  {>{\columncolor{red!12}}l}{test} & rangée \number\rownum\\
% \end{tabular}
% \quad
% \rowcolors*[\hline]{3}{green!25}{yellow!50}\arrayrulecolor{red!75!gray}
% \begin{tabular}{ll}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \arrayrulecolor{black}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \rowcolor{blue!25}
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \hiderowcolors
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \showrowcolors
% test & rangée \number\rownum\\
% test & rangée \number\rownum\\
% \multicolumn{1}%
%  {>{\columncolor{red!12}}l}{test} & rangée \number\rownum\\
% \end{tabular}
% \arrayrulecolor{black}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{\Model{Hsb} et \Model{tHsb}: \emph{teinte\Circ} par
%   pas de $15^\circ$}\label{fig.tHsb}
% \begin{adjustwidth}{-2.5cm}{}
% \footnotesize\sffamily\raggedleft
% \extrarowheight.5pt
% \begin{testcolors}[rgb,cmyk,hsb,Hsb,tHsb]
% \testcolor[Hsb]{0,1,1}
% \testcolor[Hsb]{15,1,1}
% \testcolor[Hsb]{30,1,1}
% \testcolor[Hsb]{45,1,1}
% \testcolor[Hsb]{60,1,1}
% \testcolor[Hsb]{75,1,1}
% \testcolor[Hsb]{90,1,1}
% \testcolor[Hsb]{105,1,1}
% \testcolor[Hsb]{120,1,1}
% \testcolor[Hsb]{135,1,1}
% \testcolor[Hsb]{150,1,1}
% \testcolor[Hsb]{165,1,1}
% \testcolor[Hsb]{180,1,1}
% \testcolor[Hsb]{195,1,1}
% \testcolor[Hsb]{210,1,1}
% \testcolor[Hsb]{225,1,1}
% \testcolor[Hsb]{240,1,1}
% \testcolor[Hsb]{255,1,1}
% \testcolor[Hsb]{270,1,1}
% \testcolor[Hsb]{285,1,1}
% \testcolor[Hsb]{300,1,1}
% \testcolor[Hsb]{315,1,1}
% \testcolor[Hsb]{330,1,1}
% \testcolor[Hsb]{345,1,1}
% \testcolor[Hsb]{360,1,1}
% \noalign{\medskip}
% \testcolor[tHsb]{0,1,1}
% \testcolor[tHsb]{15,1,1}
% \testcolor[tHsb]{30,1,1}
% \testcolor[tHsb]{45,1,1}
% \testcolor[tHsb]{60,1,1}
% \testcolor[tHsb]{75,1,1}
% \testcolor[tHsb]{90,1,1}
% \testcolor[tHsb]{105,1,1}
% \testcolor[tHsb]{120,1,1}
% \testcolor[tHsb]{135,1,1}
% \testcolor[tHsb]{150,1,1}
% \testcolor[tHsb]{165,1,1}
% \testcolor[tHsb]{180,1,1}
% \testcolor[tHsb]{195,1,1}
% \testcolor[tHsb]{210,1,1}
% \testcolor[tHsb]{225,1,1}
% \testcolor[tHsb]{240,1,1}
% \testcolor[tHsb]{255,1,1}
% \testcolor[tHsb]{270,1,1}
% \testcolor[tHsb]{285,1,1}
% \testcolor[tHsb]{300,1,1}
% \testcolor[tHsb]{315,1,1}
% \testcolor[tHsb]{330,1,1}
% \testcolor[tHsb]{345,1,1}
% \testcolor[tHsb]{360,1,1}
% \end{testcolors}
% \end{adjustwidth}
% \end{figure}
%
%
% \begin{figure}[htbp]\caption{Harmonies de couleur}\label{fig.harmony}
% \begin{adjustwidth}{-2.5cm}{}
% \small\sffamily\raggedleft
% \extrarowheight1.5pt
% \begin{testcolors}[rgb,cmyk,Hsb,tHsb]
% \noalign{\smallskip}
% \rlap{\em couleurs complémentaires (harmonie à deux couleurs):}\\
% \testcolor{yellow>wheel,1,2}
% \testcolor{yellow}
% \testcolor{yellow>twheel,1,2}
% \noalign{\medskip}
% \rlap{\em triade (harmonie à trois couleurs):}\\
% \testcolor{yellow>wheel,2,3}
% \testcolor{yellow>wheel,1,3}
% \testcolor{yellow}
% \testcolor{yellow>twheel,1,3}
% \testcolor{yellow>twheel,2,3}
% \noalign{\medskip}
% \rlap{\em tétrade (harmonie à quatre couleurs):}\\
% \testcolor{yellow>wheel,3,4}
% \testcolor{yellow>wheel,2,4}
% \testcolor{yellow>wheel,1,4}
% \testcolor{yellow}
% \testcolor{yellow>twheel,1,4}
% \testcolor{yellow>twheel,2,4}
% \testcolor{yellow>twheel,3,4}
% \noalign{\medskip}
% \rlap{\em couleurs complémentaires adjacentes :}\\
% \testcolor{yellow>wheel,7,12}
% \testcolor{yellow>wheel,5,12}
% \testcolor{yellow}
% \testcolor{yellow>twheel,5,12}
% \testcolor{yellow>twheel,7,12}
% \noalign{\medskip}
% \rlap{\em couleurs analogues (adjacentes) :}\\
% \testcolor{yellow>wheel,11,12}
% \testcolor{yellow>wheel,10,12}
% \testcolor{yellow>wheel,2,12}
% \testcolor{yellow>wheel,1,12}
% \testcolor{yellow}
% \testcolor{yellow>twheel,1,12}
% \testcolor{yellow>twheel,2,12}
% \testcolor{yellow>twheel,10,12}
% \testcolor{yellow>twheel,11,12}
% \end{testcolors}
% \end{adjustwidth}
% \end{figure}
%
% \end{adjustwidth}
%
%
% \clearpage
%
% \begin{adjustwidth}{-2.5cm}{}
% \raggedcolumns\columnsep2.5em
%
% \section{Couleurs par nom}\label{sec.names}
%
% \begin{multicols}{5}[\subsection{Couleurs de base (toujours disponibles)}\label{sec.basenam}]
% \footnotesize\def\0#1{\Testclr{#1}{#1}}
% \0{black}
% \0{blue}
% \0{brown}
% \0{cyan}
% \0{darkgray}
% \0{gray}
% \0{green}
% \0{lightgray}
% \0{lime}
% \0{magenta}
% \0{olive}
% \0{orange}
% \0{pink}
% \0{purple}
% \0{red}
% \0{teal}
% \0{violet}
% \0{white}
% \0{yellow}
% \end{multicols}
%
%
% \begin{multicols}{5}[\subsection{Couleurs obtenues avec l'option \Option{dvipsnames}}\label{sec.dvipsnam}]
% \footnotesize\def\0#1{\Testclr{#1}{#1}}
% \0{Apricot}
% \0{Aquamarine}
% \0{Bittersweet}
% \0{Black}
% \0{Blue}
% \0{BlueGreen}
% \0{BlueViolet}
% \0{BrickRed}
% \0{Brown}
% \0{BurntOrange}
% \0{CadetBlue}
% \0{CarnationPink}
% \0{Cerulean}
% \0{CornflowerBlue}
% \0{Cyan}
% \0{Dandelion}
% \0{DarkOrchid}
% \0{Emerald}
% \0{ForestGreen}
% \0{Fuchsia}
% \0{Goldenrod}
% \0{Gray}
% \0{Green}
% \0{GreenYellow}
% \0{JungleGreen}
% \0{Lavender}
% \0{LimeGreen}
% \0{Magenta}
% \0{Mahogany}
% \0{Maroon}
% \0{Melon}
% \0{MidnightBlue}
% \0{Mulberry}
% \0{NavyBlue}
% \0{OliveGreen}
% \0{Orange}
% \0{OrangeRed}
% \0{Orchid}
% \0{Peach}
% \0{Periwinkle}
% \0{PineGreen}
% \0{Plum}
% \0{ProcessBlue}
% \0{Purple}
% \0{RawSienna}
% \0{Red}
% \0{RedOrange}
% \0{RedViolet}
% \0{Rhodamine}
% \0{RoyalBlue}
% \0{RoyalPurple}
% \0{RubineRed}
% \0{Salmon}
% \0{SeaGreen}
% \0{Sepia}
% \0{SkyBlue}
% \0{SpringGreen}
% \0{Tan}
% \0{TealBlue}
% \0{Thistle}
% \0{Turquoise}
% \0{Violet}
% \0{VioletRed}
% \0{White}
% \0{WildStrawberry}
% \0{Yellow}
% \0{YellowGreen}
% \0{YellowOrange}
% \end{multicols}
%
%
% \makeatletter
% \def\ColorList#1#2#3#4{\begin{multicols}{#1}[\subsection{Couleurs obtenues 
%   avec l'option \Option{#2names}}\label{sec.#2nam}]
%   \footnotesize
%   \def\preparecolorset
%    {\def\XC@@cmd[####1]####2####3####4{\definecolor[####1]{@test}{####3}{####4}#4{@test}{####2}}\@testopt{\XC@definecolorset}{}}
%   \edef\restore{\catcode`\noexpand\%\the\catcode`\%\relax}
%   \catcode`\%14\relax\input{#3nam.def}\restore
%   \end{multicols}}
% \makeatother
%
% \ColorList4{svg}{svg}\Testclr
% \medskip
% \begin{adjustwidth}{1cm}{1cm}
% \footnotesize\raggedright Couleurs doublées :
% \Color[-]{}{Aqua} = \Color[-]{}{Cyan},
% \Color[-]{}{Fuchsia} = \Color[-]{}{Magenta};
% \Color[-]{}{Navy} = \Color[-]{}{NavyBlue};
% \Color[-]{}{Gray} = \Color[-]{}{Grey},
% \Color[-]{}{DarkGray} = \Color[-]{}{DarkGrey},
% \Color[-]{}{LightGray} = \Color[-]{}{LightGrey},
% \Color[-]{}{SlateGray} = \Color[-]{}{SlateGrey},
% \Color[-]{}{DarkSlateGray} = \Color[-]{}{DarkSlateGrey},
% \Color[-]{}{LightSlateGray} = \Color[-]{}{LightSlateGrey},
% \Color[-]{}{DimGray} = \Color[-]{}{DimGrey}.
% \par\smallskip
% Sous-ensemble des mot-clés de couleur \Index{HTML4} :
% \Color[-]{}{Aqua}, \Color[-]{}{Black}, \Color[-]{}{Blue}, \Color[-]{}{Fuchsia},
% \Color[-]{}{Gray}, \Color[-]{}{Green}, \Color[-]{}{Lime}, \Color[-]{}{Maroon},
% \Color[-]{}{Navy}, \Color[-]{}{Olive}, \Color[-]{}{Purple}, \Color[-]{}{Red},
% \Color[-]{}{Silver}, \Color[-]{}{Teal}, \Color[-]{}{White}, \Color[-]{}{Yellow}.
% \par\smallskip
% Couleurs tirées de \Index{Unix}/\Index{X11}:
% \Color[-]{}{LightGoldenrod},
% \Color[-]{}{LightSlateBlue},
% \Color[-]{}{NavyBlue},
% \Color[-]{}{VioletRed}.
% \end{adjustwidth}
%
% \ColorList4{x11}{x11}\Testclr
% \medskip
% \begin{adjustwidth}{1cm}{1cm}
% \footnotesize\raggedright Couleurs doublées :
% \Color[-]{}{Gray0} = \Color[-]{}{Grey0},
% \Color[-]{}{Green0} = \Color[-]{}{Green1}.
% \end{adjustwidth}
%
% \end{adjustwidth}
%
%
%
%
% \clearpage
% \section{Supplément technique}
%
% \subsection{Modèles colorimétriques supportés par les pilotes}
%
% Comme certains pilotes ne font que prétendre supporter le modèle \Model{hsb},
% nous avons inclus du code pour éviter cet comportement.
% Les modèles effectivement ajoutés par \XC{} sont indiqués dans le fichier 
% journal.
% La table \vref{tab.drv} liste principalement les pilotes qui font partie de 
% la distribution MiK\TeX{} \cite{mik} et leur support des modèles 
% colorimétriques.
% Selon toute vraisemblance, d'autres distributions se comportent de façon
% similaire.
%
% \begin{table}[htbp]\caption{Pilotes et modèles 
%   colorimétriques}\label{tab.drv}
% \centering\small
% \extrarowheight1pt
% \tabcolsep3pt
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabular}{ll*{9}{c}}
% \rowcolor{tableheadcolor}
% \hline
% \em Pilote&\em Version&\Model{rgb}&\Model{cmy}&\Model{cmyk}&\Model{hsb}&\Model{gray}&\Model{RGB}&\Model{HTML}&\Model{HSB}&\Model{Gray}\\
% \Option{dvipdf}&2015/12/30 v3.0k&d&n&d&n&d&i&n&n&n\\
% \Option{dvips}&2015/12/30 v3.0k&d&n&d&d&d&i&n&n&n\\
% \Option{dvipsone}&2015/12/30 v3.0k&d&n&d&d&d&i&n&n&n\\
% \Option{pctex32}&2015/12/30 v3.0k&d&n&d&d&d&i&n&n&n\\
% \Option{pctexps}&2015/12/30 v3.0k&d&n&d&d&d&i&n&n&n\\
% \hline
% \Option{pdftex}&2011/05/27 v0.06d&d&n&d&n&d&i&n&n&n\\
% \Option{luatex}&2016/01/23 v0.01b&d&n&d&n&d&i&n&n&n\\
% \hline
% \Option{dvipdfm}&1999/9/6 vx.x&d&n&d&n&d&i&n&n&n\\
% \Option{dvipdfmx}&2016/04/06 v4.08&d&n&d&?&d&i&n&n&n\\
% \hline
% \Option{textures}&1997/5/28 v0.3&d&n&d&?&i&n&n&n&n\\
% \hline
% \Option{vtex}&1999/01/14 v6.3&d&n&d&n&i&i&n&n&n\\
% \hline
% \Option{xetex}&2016/04/06 v4.08&d&n&d&d&d&i&n&n&n\\
% \hline
% \Option{tcidvi}&2015/12/30 v3.0k&i&n&i&n&i&d&n&n&n\\
% \Option{truetex}&2015/12/30 v3.0k&i&n&i&n&i&d&n&n&n\\
% \hline
% \Option{dviwin}&2015/12/30 v3.0k&n&n&n&n&n&n&n&n&n\\
% \Option{emtex}&2015/12/30 v3.0k&n&n&n&n&n&n&n&n&n\\
% \Option{pctexhp}&2015/12/30 v3.0k&n&n&n&n&n&n&n&n&n\\
% \Option{pctexwin}&2015/12/30 v3.0k&n&n&n&n&n&n&n&n&n\\
% \hline\hline
% \multicolumn{11}c{\Option{dviwindo} = \Option{dvipsone}; \Option{oztex} = \Option{dvips}; \Option{xdvi} = \Option{dvips} + \Option{monochrome}}\\
% \hline
% \multicolumn{11}c{Support du modèle par le pilote : d\,=\,direct, i\,=\,indirect, n\,=\,none}\\
% \hline
% \end{tabular}
% \end{table}
%
%
%
% \subsection{Gestion des modèles colorimétriques spécifiques aux pilotes par \XC}
%
% Bien qu'il y a une grande variété de pilotes qui implémentent différentes
% approches à la visualisation des couleurs, ils ont tous des fonctionnalités
% en commun, comme définies par l'\LCP originale. 
% Une des fonctionnalités est que tout modèle de couleur \og test \fg{} 
% requiert une commande |\color@test|\marg{commande}\marg{spéc} afin de 
% traduire la couleur dépendante de test \Meta{spéc} en code spécifique
% au pilote qui est stocké dans \Meta{commande}.
% Ainsi, \XC{} détecte en général le support du pilote pour le modèle
% \og test \fg{} par l'existence de |\color@test|. 
%
% Avec ce mécanisme, \XC{} peut également changer le comportement de certains
% modèles sans toucher au pilote lui-même. Un bon exemple est ici la commande
% |\substitutecolormodel| utilisée pendant le processus d'installation de 
% l'extension pour fournir un support des modèles qui ne sont pas couverts par
% le pilote actuel (comme \Model{hsb} pour \Option{pdftex}) ou qui ont une 
% implémentation incorrecte (comme \Model{hsb} pour \Option{dvipdfm}).
%
%
% \subsection{En coulisse : la représentation interne des couleurs}
%
% 
% Chaque définition d'une couleur permettant d'y accéder par son nom requiert
% une représentation interne de la couleur, c'est-à-dire une commande qui 
% contient les informations nécessaires au pilote pour bien afficher la 
% couleur.
%
% La commande |\definecolor{foo}{...}{...}| de \LC\ génère une commande
% |\\color@foo|\footnote{La double contre-oblique est intentionnelle.} qui 
% contient la définition de la couleur d'une manière dépendante du pilote ;
% c'est pourquoi il est possible mais non évident d'accéder au modèle 
% colorimétrique et aux paramètres par la suite (voir l'extension
% \Package{colorinfo} \cite{colorinfo} pour une solution).
%
% La commande |\DefineNamedColor{named}{foo}{...}{...}| de \LC\ génère 
% |\col@foo|\footnote{La contre-oblique simple est intentionnelle.} qui 
% contient une nouvelle fois des informations dépendantes du pilote.
% Dans ce cas, un |\\color@foo| additionnele ne sera défini que si 
% l'option d'extension \Option{usecolors} est active.
%
% La commande |\definecolor{foo}{...}{...}| de \XC\ génère\footnote{Ce
% système a été introduit en 1.10; avant cela, une commande 
% \cs{\string\xcolor@foo} avec une syntaxe différente était générée.} également
% une commande |\\color@foo|, celle-ci combinant les fonctionnalités de la 
% commande précédente et contenant à la fois des informations dépendant du 
% pilote et des informations indépendantes du pilote, rendant ainsi possible
% l'accès aux paramètres pertinents de façon standardisée. 
% Bien qu'elle ait maintenant une syntaxe différente, |\\color@foo| se
% développe en une expression identique à la commande d'origine.
% Par ailleurs, les commandes |\col@foo| ne sont plus utiles et sont plus
% générées dans le cas de couleurs nommées : \XC{} fonctionne avec une unique
% structure de données de couleur (comme décrit).
%
% La table \vref{tab.internal} montre quelques exemples pour deux des pilotes
% les plus importants avec la couleur \Color{prune}{plum}. Voir aussi la figure
% \vref{fig.progress} qui affiche les définitions en rapport avec le pilote 
% utilisé pour traiter ce document.
%
%
% \begin{table}[htb]\caption{Représentation de la couleur interne dépendante 
%   du pilote}\label{tab.internal}
% \centering\small
% \def\X{\hspace*{-.845\textwidth}\\}
% \extrarowheight1pt
% \tabcolsep8pt
% \begin{tabular}{l>{\color{blue}(}r<{)}l}
% \hline
% \multicolumn3{>{\columncolor{tableheadcolor}}l}{Pilote \Option{dvips}}\\
% \hline
% |\\color@Plum=macro:| & |\definecolor{Plum}{rgb}{.5,0,1}| & \LC\\
% |->rgb .5 0 1.|\X
% \hline
% |\\color@Plum=macro:| & |\definecolor{Plum}{rgb}{.5,0,1}|& \XC\\
% |->\xcolor@ {}{rgb 0.5 0 1}{rgb}{0.5,0,1}.|\X
% \hline
% |\col@Plum=macro:| & |\DefineNamedColor{Plum}{rgb}{.5,0,1}|& \LC\\
% |->\@nil .|\X
% |\\color@Plum=macro:| & avec l'option \oOption{usenames}\\
% |-> Plum.|\X
% \hline
% |\\color@Plum=macro:| & |\definecolor[named]{Plum}{rgb}{.5,0,1}|& \XC\\
% |->\xcolor@ {named}{ Plum}{rgb}{0.5,0,1}.|\X
% \hline
% \multicolumn3{>{\columncolor{tableheadcolor}}l}{Pilote \Option{pdftex}}\\
% \hline
% |\\color@Plum=macro:| & |\definecolor{Plum}{rgb}{.5,0,1}|& \LC\\
% |->.5 0 1 rg .5 0 1 RG.|\X
% \hline
% |\\color@Plum=macro:| & |\definecolor{Plum}{rgb}{.5,0,1}|& \XC\\
% |->\xcolor@ {}{0.5 0 1 rg 0.5 0 1 RG}{rgb}{0.5,0,1}.|\X
% \hline
% |\col@Plum=macro:| & |\DefineNamedColor{Plum}{rgb}{.5,0,1}|& \LC\\
% |->.5 0 1 rg .5 0 1 RG.|\X
% |\\color@Plum=macro:| & avec l'option  \oOption{usenames}\\
% |->.5 0 1 rg .5 0 1 RG.|\X
% \hline
% |\\color@Plum=macro:| & |\definecolor[named]{Plum}{rgb}{.5,0,1}|& \XC\\
% |->\xcolor@ {}{0.5 0 1 rg 0.5 0 1 RG}{rgb}{0.5,0,1}.|\X
% \hline
% \end{tabular}
% \end{table}
%
%
%
% \subsection{Remarque sur la précision}
%
% Comme les commandes présentées ici requièrent des calculs, des efforts
% particuliers ont été faits pour assurer un maximum de précision pour les
% formules de conversion et de mélange -- tout cela avec les capacités limitées
% de \TeX pour le calcul\footnote{Par exemple, en appliquant la \og 
% transformation \fg{} \cs{dimen0=0.}\Meta{int}\texttt{pt}
% \cs{the\string\dimen0} pour tous les entiers à 5 chiffres de la plage 
% [00000,99999], exactement 34464 entiers sur les 100000 ne survivent pas sans
% être modifiés. Et nous ne parlons ici des zéros finaux élagés\dots} 
% Nous avons décidé de développer et d'inclure un petit ensemble de commandes
% pour améliorer la qualité des résultats de division et de multiplication,
% au lieu de charger une des extensions qui fournit une arithmétique à plusieurs
% chiffres significatifs et bien plus, comme les extensions \Package{realcalc} 
% ou \Package{fp}.
% La contribution marginale de ces dernières extensions semble ne pas justifier
% leur usage pour nos objectifs. Aussi, nous restons dans une sorte de cadre 
% d'arithmétique à virgule fixe, fournissant au plus cinq décimales par le 
% biais des registres de dimension.
%
%
%
%
% \clearpage
% \section{Les formules}
%
% \subsection{Le mélange des couleurs}
%
% En général, nous utilisons l'interpolation linéaire pour les mélanges de 
% couleur :
% \begin{align}
% \mix(C, C', p) = p \cdot C + (1-p) \cdot C'\label{eq.mix}
% \end{align}
% Notez qu'il existe une situation particulière dans le cas de \Model{hsb} :
% si  $\emph{saturation}=0$ alors la couleur est un gris de niveau 
% \emph{luminosité}, indépendamment de la valeur de la \emph{teinte}. C'est 
% pourquoi, pour obtenir des transitions hormonieuses une couleur arbitraire et
% un gris particulier (comme le blanc ou le noir), nous utilisons les formules 
% \begin{align}
% \Op\tint{hsb}(C, p) &= p \cdot C + (1-p) \cdot \bigl(\emph{teinte},0,1\bigr)\\
% \Op\shade{hsb}(C, p) &= p \cdot C + (1-p) \cdot \bigl(\emph{teinte},0,0\bigr)\\
% \Op\tone{hsb}(C, p) &\textstyle= p \cdot C + (1-p) \cdot \bigl(\emph{teinte},0,\frac12\bigr)
% \end{align}
% where $C=(\emph{teinte},\emph{saturation},\emph{luminosité})$.
%
% À partir de l'équation (\ref{eq.mix}) et de la manière dont les expressions
% de couleur sont interprêtées, comme décrit en section \vref{sec.term}, une
%  simple preuve par induction permet de vérifier qu'une expression de couleur
% \begin{gather}
% C_0!P_1!C_1!P_2!\dots!P_n!C_n
% \end{gather}
% avec $n\in\{0,1,2,\dots\}$, les couleurs $C_0,C_1,\dots,C_n$, et les 
% pourcentages $P_1,\dots,P_n\in [0,100]$ va générer un vecteur de paramètre
% \begin{equation}
% \begin{split}
% C &= \sum_{\nu=0}^n \Biggl(\prod_{\mu=\nu+1}^n p_\mu \Biggr) (1-p_\nu)\cdot C_\nu\\
%   &= p_n\cdots p_1\cdot C_0\\
%   &\quad + p_n\cdots p_2(1-p_1)\cdot C_1\\
%   &\quad + p_n\cdots p_3(1-p_2)\cdot C_2\\
%   &\quad + \dots\\
%   &\quad + p_n(1-p_{n-1})\cdot C_{n-1}\\
%   &\quad + (1-p_n)\cdot C_n
% \end{split}
% \end{equation}
% où $p_0 := 0$ et $p_\nu := P_\nu/100$ pour $\nu=1,\dots,n$.
% Nous notons également une formule fractionnée :
% \begin{equation}
% \begin{split}
% C_0!P_1!C_1!\dots!P_{n+k}!C_{n+k}
%  &= p_{n+k}\cdots p_{n+1}\cdot C_0!P_1!C_1!\dots!P_n!C_n\\
%  &\quad - p_{n+k}\cdots p_{n+1}\cdot C_n\\
%  &\quad + C_n!P_{n+1}!C_{n+1}!\dots!P_{n+k}!C_{n+k}
% \end{split}
% \end{equation}
%
%
% \begin{table}[p]\caption{Constantes de couleur}\label{tab.const}
% \centering
% \extrarowheight2pt
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabular}{*4{c}}
% \hline
% \rowcolor{tableheadcolor}
% \emph{modèle/constante} &
%       {\ttfamily white}(blanc)  &  {\ttfamily black}(noir) & {\ttfamily gray}(blanc)\\[2pt]
% \Model{rgb}&  $(1,1,1)$   & $(0,0,0)$   & $(\frac12,\frac12,\frac12)$ \\[2pt]
% \Model{cmy}&  $(0,0,0)$   & $(1,1,1)$   & $(\frac12,\frac12,\frac12)$ \\[2pt]
% \Model{cmyk}& $(0,0,0,0)$ & $(0,0,0,1)$ & $(0,0,0,\frac12)$ \\[2pt]
% \Model{hsb}&  $(h,0,1)$   & $(h,0,0)$   & $(h,0,\frac12)$ \\[2pt]
% \Model{Hsb}&  $(h^\circ,0,1)$ & $(h^\circ,0,0)$ & $(h^\circ,0,\frac12)$ \\[2pt]
% \Model{tHsb}& $(h^\circ,0,1)$ & $(h^\circ,0,0)$ & $(h^\circ,0,\frac12)$ \\[2pt]
% \Model{gray}& $1$ & $0$ & $\frac12$ \\[2pt]
% \Model{RGB}&  $(L,L,L)$ & $(0,0,0)$ & $(\lfloor\frac {L+1}2\rfloor,\lfloor\frac {L+1}2\rfloor,\lfloor\frac {L+1}2\rfloor)$ \\[2pt]
% \Model{HTML}& \texttt{FFFFFF}& \texttt{000000}& \texttt{808080}\\[2pt]
% \Model{HSB}&  $(H,0,M)$ & $(H,0,0)$ & $(H,0,\lfloor\frac {M+1}2\rfloor)$ \\[2pt]
% \Model{Gray}& $N$ & $0$ & $\lfloor\frac {N+1}2\rfloor$ \\[2pt]
% \hline
% \end{tabular}
% \end{table}
%
%
% \begin{table}[p]\caption{Paires de conversion de couleur}\label{tab.cnv}
% \begin{adjustwidth}{-2.5cm}{}
% \small\raggedleft
% \def\Em#1{\Model{#1}}
% \def\sp{\hbox to3em{\hfil$\ast$\hfil}}
% \def\id{\textrm{id}}
% \extrarowheight1pt
% \tabcolsep3pt
% \rowcolors{3}{tablerowcolor}{}
% \begin{tabular}{c*{11}{>{\sffamily}c}}
% \rowcolor{tableheadcolor}
% \hline
% \emph{de/à}&
%            \Em{rgb}& \Em{cmy}& \Em{cmyk}& \Em{hsb}& \Em{Hsb} & \Em{tHsb} & \Em{gray}& \Em{RGB}& \Em{HTML}& \Em{HSB}& \Em{Gray}\\
% \Em{rgb}&  \id     & \sp     & (cmy)    & \sp     & (hsb)    & (hsb)     & \sp      & \sp     & \sp      & (hsb)   & (gray)\\
% \Em{cmy}&  \sp     & \id     & \sp      & (rgb)   & (rgb)    & (rgb)     & \sp      & (rgb)   & (rgb)    & (rgb)   & (gray)\\
% \Em{cmyk}& (cmy)   & \sp     & \id      & (cmy)   & (cmy)    & (cmy)     & \sp      & (cmy)   & (cmy)    & (cmy)   & (gray)\\
% \Em{hsb}&  \sp     & (rgb)   & (rgb)    & \id     & \sp      & (Hsb)     & (rgb)    & (rgb)   & (rgb)    & \sp     & (rgb)\\
% \Em{Hsb}&  (hsb)   & (hsb)   & (hsb)    & \sp     & \id      & \sp       & (hsb)    & (hsb)   & (hsb)    & (hsb)   & (hsb)\\
% \Em{tHsb}& (Hsb)   & (Hsb)   & (Hsb)    & (Hsb)   & \sp      & \id       & (Hsb)    & (Hsb)   & (Hsb)    & (Hsb)   & (Hsb)\\
% \Em{gray}& \sp     & \sp     & \sp      & \sp     & \sp      & \sp       & \id      & \sp     & \sp      & \sp     & \sp\\
% \Em{RGB}&  \sp     & (rgb)   & (rgb)    & (rgb)   & (rgb)    & (rgb)     & (rgb)    & \id     & (rgb)    & (rgb)   & (rgb)\\
% \Em{HTML}& \sp     & (rgb)   & (rgb)    & (rgb)   & (rgb)    & (rgb)     & (rgb)    & (rgb)   & \id      & (rgb)   & (rgb)\\
% \Em{HSB}&  (hsb)   & (hsb)   & (hsb)    & \sp     & (hsb)    & (hsb)     & (hsb)    & (hsb)   & (hsb)    & \id     & (hsb)\\
% \Em{Gray}& (gray)  & (gray)  & (gray)   & (gray)  & (gray)   & (gray)    & \sp      & (gray)  & (gray)   & (gray)  & \id\\
% \Em{wave}& (hsb)   & (hsb)   & (hsb)    & \sp     & (hsb)    & (hsb)     & (hsb)    & (hsb)   & (hsb)    & (hsb)   & (hsb)\\
% \hline\hline
% \multicolumn{12}{c}{\id{} = fonction identité; $\ast$ = fonction de conversion spécifique;}\\
% \multicolumn{12}{c}{\textsf{(modèle)} = conversion par le biais du modèle indiqué}\\
% \hline
% \end{tabular}
% \end{adjustwidth}
% \end{table}
%
%
%
% \subsection{Conversion entre les modèles entiers et réels}
%
% Nous posons un entier positif $n$ et définissons les ensembles 
% $\mathcal I_n:=\{0,1,\dots,n\}$ et $\mathcal R:= [0,1]$. Le complémentaire
% de $\nu\in\mathcal I_n$ est $n-\nu$, le complémentaire de $x\in\mathcal R$
% est $1-x$.
%
% \subsubsection{Conversion réel vers entier}\label{sec.real2int}
%
% L'application la plus directe pour ce cas est
% \begin{gather}
% \textstyle\RtoI n : \mathcal R \to \mathcal I_n,\ x \mapsto \rd(n\cdot x,0)
% = \left\lfloor \frac12+n\cdot x\right\rfloor
% \end{gather}
% où $\rd(r,d)$ arrondit le nombre réel $r$ à $d\ge0$ décimales. 
% Cette application préserve presque toujours la relation entre 
% complémentaires, comme le montre le lemme suivant.
% \begin{lemma}[Préservation des complémentaires]
% Pour tout $x\in\mathcal R$,
% \begin{gather}
% \textstyle\RtoI n(x) + \RtoI n(1-x) = n \iff x \notin \mathcal R_n^\circ 
%  := \left\{ \frac1n\bigl(\nu - \frac12\bigr) \bigm\vert 
%  \nu=1,2,\dots,n\right\}.
% \end{gather}
% \end{lemma}
% \begin{proof}
% Soit $\nu:=\RtoI n(x)$, ayant $-\frac12 \le \eta := n\cdot x - \nu 
%  < \frac12$, nous concluons
% \begin{gather*}
% \textstyle \RtoI n(1-x) = \rd(n(1-x),0) = \rd(n-\nu-\eta,0) =
% \begin{cases}
%  n-\nu   & \text{if $\eta\neq-\frac12$}\\
%  n-\nu+1 & \text{if $\eta=-\frac12$}
% \end{cases}
% \end{gather*}
% Dès lors, $\eta = -\frac12 \iff x = \frac1n\bigl(\nu-\frac12\bigr) \iff 
% x\in\mathcal I_n'$.
% \end{proof}
% Remarque: l'ensemble $\mathcal R_n^\circ$ est à l'évidence identique à 
% l'ensemble des points où $\RtoI n$ n'est pas continu.
%
%
% \subsubsection{Conversion entier vers réel}\label{sec.int2real}
%
% La manière directe dans ce cas est la fonction
% \begin{gather}
% \ItoR n^*: \mathcal I_n \to \mathcal R,\ \nu \mapsto \frac \nu n.
% \end{gather}
% Ce n'est cependant qu'une solution parmi une grande variété d'autres : 
% chaque fonction $\ItoR n:\mathcal I_n\to\mathcal R$ qui respecte la condition
% \begin{gather}
% \nu\in\mathcal I_n \Rightarrow \Gamma_n\bigl(\ItoR n(\nu)\bigr) = \nu
% \end{gather}
% équivalente à 
% \begin{gather}
% \nu\in\mathcal I_n \Rightarrow \nu + \frac12 > n\cdot\ItoR n(\nu) 
%  \ge \nu - \frac12\label{eq.round}
% \end{gather}
% garantit au moins que chaque entier $\nu$ peut être reconstruit à partir de 
% $\ItoR n(\nu)$ par le biais de la multiplication de $n$ puis en arrondissant
% à l'entier le plus proche.
% La préservation des complémentaires signifie maintenant 
% \begin{gather}
% \nu\in\mathcal I_n \Rightarrow \ItoR n(\nu) + \ItoR n(n-\nu) = 1
% \end{gather}
% Ce qui est évidemment le cas pour $\ItoR n = \ItoR n^*$.

% Si nous considérons, plus généralement, une transformation
% \begin{gather}
% \ItoR n(\nu) = \frac{\nu + \alpha}{n + \beta}
% \end{gather}
% avec $\beta\neq-n$, alors l'inégalité (\ref{eq.round}) est 
% équivalente à 
% \begin{gather}
% \frac12 > \frac{\alpha n - \beta\nu}{n + \beta} \ge -\frac12
% \end{gather}
% ce qui est respecté par la fonction
% \begin{gather}
% \ItoR n':\mathcal I_n\to\mathcal R,\ \nu \mapsto
% \begin{cases}
% \frac\nu{n+1}& \text{if $\nu\le\frac{n+1}2$}\\[0.25ex]
% \frac{\nu+1}{n+1}& \text{if $\nu>\frac{n+1}2$}
% \end{cases}
% \end{gather}
% qui présente la belle fonctionnalité 
% $\ItoR n'\bigl(\frac{n+1}2\bigr) = \frac12$ pour les $n$ impairs.
% \begin{lemma}[Préservation des complémentaires]
% Pour tout $n$ impair et tout $\nu\in\mathcal I_n$,
% \begin{gather}
% \textstyle\ItoR n'(\nu) + \ItoR n'(n-\nu) = 1 \iff \nu \notin 
% \mathcal I_n^\circ := \left\{ \frac{n-1}2, \frac{n+1}2 \right\}.
% \end{gather}
% \end{lemma}
% \begin{proof}
% Cette assertion est une conséquence des arguments suivants :
% \begin{itemize}
% \item $\nu<\frac{n-1}2 \iff n-\nu>\frac{n+1}2$ \ and \ $\frac{n-1}2 
%  + \frac{n+1}2 = n$;
% \item $\nu<\frac{n-1}2 \,\Rightarrow\, \ItoR n'(\nu) + \ItoR n'(n-\nu) 
%  = \frac\nu{n+1} + \frac{n-\nu+1}{n+1} = 1$;
% \item $\nu=\frac{n-1}2 \,\Rightarrow\, \ItoR n'(\nu) + \ItoR n'(n-\nu)
%  = \frac{n-1}{2(n+1)} + \frac12 = \frac n{n+1} \neq1$.\qedhere
% \end{itemize}
% \end{proof}
%
% Pour le moment, nous choisissons \fbox{$\ItoR n := \ItoR n^*$} comme fonction
% de transformation par défaut. 
%
% \medskip
% Une autre variante --- probablement trop lente pour des calculs à la volée à
% grande échelle --- peut être utilisée pour construire des ensembles de
% couleurs prédéfinies.
% L'idée de base est de réduire le nombre de décimales dans la représentation 
% tout en gardant une certaine invariance par rapport à la solution 
% originale :
% \begin{gather}
% \textstyle\ItoR n'':\mathcal I_n\to\mathcal R,\ \nu \mapsto \rd\bigl(\frac\nu n, d_n(\frac\nu n)\bigr)
% \end{gather}
% où
% \begin{gather}
% d_n:[0,1]\to\bbbN,\ x \mapsto \min\bigl\{ d\in\bbbN \bigm\vert \RtoI n\bigl(\rd(\ItoR n^*(\RtoI n(x)),d)\bigr) = \RtoI n(x)\bigr\}
% \end{gather}
% Dans la plupart des cas $n=255$, il s'avère que nous arrivons à trois 
% décimales au plus : la préservation des complémentaires n'est pas 
% respectée pour $\nu\in\{25,26,76,77,127,128,178,179,229,230\}$ pour 
% l'ensemble de nombre décimaux correspondant est 
% $\{0.098,0.1,0.298,0.3,0.498,0.5,0.698,0.7,0.898,0.9\}$.
%
%
%
% \subsection{Conversion de couleur et complémentaires}\label{sec.cnv}
%
% Nous regroupons ici les formules de conversion spécifiques entre les
% différents modèles colorimétriques supportés. La table \vref{tab.cnv} donne
% un aperçu de la manière dont la conversion pour chaque paire de modèle
% est traitée. 
% En général, \Index{PostScript} (comme décrit dans \cite{plrm}) est utilisé
% comme base pour la plupart des calculs puisqu'il supporte nativement les
% modèles colorimétriques \Model{rgb}, \Model{cmyk}, \Model{hsb} et 
% \Model{gray}.
% De plus, l'article d'\People{Alvy Ray}{Smith} \cite{smith} est cité dans
% \cite{plrm} comme référence pour les formules liées au modèle \Model{hsb}.
%
% Tout d'abord, nous définissons une constante qui est utilisée dans les 
% formules de conversion :
% \begin{gather}
% E := (1,1,1)
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{rgb}}
%
% \paragraph{Conversion de \Model{rgb} vers \Model{cmy}}\label{sec.rgb2cmy}
% Source: \cite{plrm}, p. 475.
% \begin{gather}
% (\emph{cyan}, \emph{magenta}, \emph{jaune}) := E-(\emph{rouge}, \emph{vert}, \emph{bleu})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{rgb} vers \Model{hsb} (1)}
% Nous définissons
% \begin{align}
% x & := \max\{\emph{rouge}, \emph{vert}, \emph{bleu}\}\\
% y & := \med\{\emph{rouge}, \emph{vert}, \emph{bleu}\}\\
% z & := \min\{\emph{rouge}, \emph{vert}, \emph{bleu}\}%\\
% \end{align}
% où \og $\med$ \fg{} restitue la valeur médiane entre les trois valeurs.
% Alors,
% \begin{align}
% \emph{luminosité} & := x\\
% \intertext{Cas où $x=z$:}
% \emph{saturation} & := 0\\
% \emph{teinte} & := 0\\
% \intertext{Cas où $x\neq z$:}
% \emph{saturation} & := \frac{x - z}x\\
% f & := \frac{x - y}{x - z}
% \end{align}
% \begin{gather}
% \emph{teinte} := \frac 16\cdot
%  \begin{cases}
%  1-f & \text{si $x=\emph{rouge}\ge\emph{vert}\ge\emph{bleu}=z$}\\
%  1+f & \text{si $x=\emph{vert}\ge\emph{rouge}\ge\emph{bleu}=z$}\\
%  3-f & \text{si $x=\emph{vert}\ge\emph{bleu}\ge\emph{rouge}=z$}\\
%  3+f & \text{si $x=\emph{bleu}\ge\emph{vert}\ge\emph{rouge}=z$}\\
%  5-f & \text{si $x=\emph{bleu}\ge\emph{rouge}\ge\emph{vert}=z$}\\
%  5+f & \text{si $x=\emph{rouge}\ge\emph{bleu}>\emph{vert}=z$}
%  \end{cases}\label{eq.rgb2hsb1}
% \end{gather}
%
% \medskip
%
% Ceci est basé sur \cite{smith}, \emph{RGB to HSV Algorithm (Hexcone Model)},
% qui donne (légèrement reformulé):
% \begin{gather}
% r := \frac{x - \emph{rouge}}{x - z},\qquad
% g := \frac{x - \emph{vert}}{x - z},\qquad
% b := \frac{x - \emph{bleu}}{x - z}\\
% \emph{teinte} := \frac 16\cdot
%  \begin{cases}
%  5+b & \text{si $\emph{rouge}=x$ et $\emph{vert}=z$}\\
%  1-g & \text{si $\emph{rouge}=x$ et $\emph{vert}>z$}\\
%  1+r & \text{si $\emph{vert}=x$ et $\emph{bleu}=z$}\\
%  3-b & \text{si $\emph{vert}=x$ et $\emph{bleu}>z$}\\
%  3+g & \text{si $\emph{bleu}=x$ et $\emph{rouge}=z$}\\
%  5-r & \text{si $\emph{bleu}=x$ et $\emph{rouge}>z$}
%  \end{cases}
% \end{gather}
% Notez que le cas particulier $x=z$ n'est pas totalement couvert par
% l'algorithme original de Smith; nous conservons ici le comportement de
% \Index{PostScript} dans la vraie vie.
%
% Parce que nous avons besoin de tirer trois nombres afin de calculer $x,y,z$,
% plusieurs comparaisons sont à l'\oe uvre dans l'algorithme. Nous présentons
% maintenant une seconde méthode bien plus adaptée à \TeX.
%
%
% \paragraph{Conversion de \Model{rgb} vers \Model{hsb} (2)}
% Soit $\beta$ une fonction qui prend une expression booléenne comme argument
% et restitue 1 si l'expression est vraie et 0 sinon; définissons 
% \begin{gather}
% i := 4\cdot\beta(\emph{rouge}\ge\emph{vert}) + 2\cdot\beta(\emph{vert}\ge\emph{bleu}) + \beta(\emph{bleu}\ge\emph{rouge}),
% \intertext{et}
% (\emph{teinte},\emph{saturation},\emph{luminosité}) :=
% \begin{cases}
% \Phi(\emph{bleu},\emph{vert},\emph{rouge},3,1) & \text{si $i=1$}\\
% \Phi(\emph{vert},\emph{rouge},\emph{bleu},1,1) & \text{si $i=2$}\\
% \Phi(\emph{vert},\emph{bleu},\emph{rouge},3,-1) & \text{si $i=3$}\\
% \Phi(\emph{rouge},\emph{bleu},\emph{vert},5,1) & \text{si $i=4$}\\
% \Phi(\emph{bleu},\emph{rouge},\emph{vert},5,-1) & \text{si $i=5$}\\
% \Phi(\emph{rouge},\emph{vert},\emph{bleu},1,-1) & \text{si $i=6$}\\
% (0,0,\emph{bleu}) &  \text{si $i=7$}
% \end{cases}\label{eq.rgb2hsb2}
% \intertext{où}
% \Phi(x,y,z,u,v) := \Bigl( \frac{u\cdot(x-z)+v\cdot(x-y)}{6(x-z)}, \frac{x-z}x, x\Bigr)
% \end{gather}
%
% Le cas particulier $x=z$, qui est équivalent à 
% $\emph{rouge}=\emph{vert}=\emph{bleu}$, est couvert ici par $i=7$.
%
% \medskip
%
% Il n'est pas difficile de voir que cet algorithme est une reformulation
% de la méthode précédente. La table suivante explique comment la transition
% de l'équation (\ref{eq.rgb2hsb1}) à l'équation (\ref{eq.rgb2hsb2})
% fonctionne :
%
% \medskip
%
% \begin{tabular*}{\textwidth}{@{\extracolsep\fill}*5{>{$}c<{$}}l@{}}
% 6\cdot\emph{teinte}& \emph{Condition}& \emph{rouge}\ge\emph{vert}& \emph{vert}\ge\emph{bleu}& \emph{bleu}\ge\emph{rouge}& $i$\\\hline
%  1-f & \emph{rouge}\ge\emph{vert}\ge\emph{bleu}& 1& 1& *& \textbf6/7\\
%  1+f & \emph{vert}\ge\emph{rouge}\ge\emph{bleu}& *& 1& *& \textbf2/3/6/7\\
%  3-f & \emph{vert}\ge\emph{bleu}\ge\emph{rouge}& *& 1& 1& \textbf3/7\\
%  3+f & \emph{bleu}\ge\emph{vert}\ge\emph{rouge}& *& *& 1& \textbf1/3/5/7\\
%  5-f & \emph{bleu}\ge\emph{rouge}\ge\emph{vert}& 1& *& 1& \textbf5/7\\
%  5+f & \emph{rouge}\ge\emph{bleu}\ge\emph{vert}& 1& *& *& \textbf4/5/6/7\\
% \end{tabular*}
%
% \medskip
%
% Ici, $*$ indique des valeurs valant 0 ou 1.
% Les valeurs de $i$ en gras indiquent les cas principaux quand toutes les 
% valeurs des $*$ d'une rangée sont des zéros.
% La légère différence avec l'équation (\ref{eq.rgb2hsb1}) dans la dernière
% inégalité est intentionnelle et ne fait pas de mal.
%
%
% \paragraph{Conversion de \Model{rgb} vers \Model{gray}}
% Source: \cite{plrm}, p. 474.
% \begin{align}
% \emph{gris} & := 0.3\cdot\emph{rouge} + 0.59\cdot\emph{vert} + 0.11\cdot\emph{bleu}
% \end{align}
%
%
% \paragraph{Conversion de \Model{rgb} vers \Model{RGB}}
% Comme décrit en section \vref{sec.real2int}.
% \begin{gather}
% (\emph{Rouge},\emph{Vert},\emph{Bleu}) := \bigl(\RtoI L(\emph{rouge}), \RtoI L(\emph{vert}), \RtoI L(\emph{bleu})\bigr)
% \end{gather}
%
%
% \paragraph{Conversion de \Model{rgb} vers \Model{HTML}}
% Comme décrit en section \vref{sec.real2int}.
% La conversion en un héxadecimal à 6 chiffres est faite ensuite.
% La multiplication et la sommation peuvent être remplacées par une simple
% concaténation de texte d'héxadecimaux à 2 chiffres.
% \begin{gather}
% \emph{RRGGBB} := \bigl( 65536\cdot\RtoI L(\emph{rouge}) + 256\cdot \RtoI L(\emph{vert}) + \RtoI L(\emph{bleu}) \bigr)_{\emph{hex}}
% \end{gather}
%
%
% \paragraph{Complémentaire d'une couleur de \Model{rgb}}
% Nous prenons simplement le vecteur complémentaire :
% \begin{gather}
% (\emph{rouge}^*, \emph{vert}^*, \emph{bleu}^*) := E - (\emph{rouge}, \emph{vert}, \emph{bleu})
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{cmy}}
%
% \paragraph{Conversion de \Model{cmy} vers \Model{rgb}}
% Il s'agit d'une simple inversion du cas $\Model{rgb}\to\Model{cmy}$, cf. section \vref{sec.rgb2cmy}.
% \begin{gather}
% (\emph{rouge}, \emph{vert}, \emph{bleu}) := E - (\emph{cyan}, \emph{magenta}, \emph{jaune})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{cmy} vers \Model{cmyk}}\label{sec.cmy2cmyk}
% Cette tâche de conversion est probablement la plus difficile : de nombreuses
% sources insistent sur le fait qu'il n'existe pas d'algorithme de conversion
% universel pour ce cas du fait de la dépendance au pilote. 
% L'algorithme qui suit est une version étendue de celle donnée dans
% \cite{plrm}, p. 476.
% \begin{align}
% k & := \min\{\emph{cyan},\emph{magenta},\emph{jaune}\}\\
% \emph{cyan} & := \min\{1,\max\{0,\emph{cyan} - \emph{UCR}_c(k)\}\}\\
% \emph{magenta} & := \min\{1,\max\{0,\emph{magenta} - \emph{UCR}_m(k)\}\}\\
% \emph{jaune} & := \min\{1,\max\{0,\emph{jaune} - \emph{UCR}_y(k)\}\}\\
% \emph{noir} & := \emph{BG}(k)
% \end{align}
% Ici, quatre fonctions additionnelles sont requises :
% \begin{align}
% \emph{UCR}_c, \emph{UCR}_m, \emph{UCR}_y & : [0,1] \to [-1,1]\tag*{\em \trad{undercolor-removal}}\\
% \emph{BG} & : [0,1] \to [0,1]\tag*{\em \trad{black-generation}}
% \end{align}
% Ces fonctions sont dépendantes du pilote, voir la remarque dans \cite{plrm}.
% Bien qu'il y ait des indications comme quoi elles devraient être choisies
% parmi des fonctions non linéaires, tant que nous n'avons pas connaissance
% sur le matériel cible, nous les définissons linérairement :
% \begin{align}
% \emph{UCR}_c(k) &:= \beta_c\cdot k\\
% \emph{UCR}_m(k) &:= \beta_m\cdot k\\
% \emph{UCR}_y(k) &:= \beta_y\cdot k\\
% \emph{BG}(k) &:= \beta_k\cdot k
% \end{align}
% \DescribeMacro\adjustUCRBG
% où les paramètres sont donnés par
% |\def\adjustUCRBG{|\Meta{$\beta_c$},\Meta{$\beta_m$},\Meta{$\beta_y$},\Meta{$\beta_k$}|}|
% à n'importe quel endroit dans un document, avec pour valeur par défaut
% |{|$\adjustUCRBG$|}|.
%
%
% \paragraph{Conversion de \Model{cmy} vers \Model{gray}}
% Cette conversion est dérivée de la chaîne de conversion 
% $\Model{cmy}\to\Model{rgb}\to\Model{gray}$.
% \begin{align}
% \emph{gray} & := 1 - (0.3\cdot\emph{cyan} + 0.59\cdot\emph{magenta} 
% + 0.11\cdot\emph{jaune})
% \end{align}
%
%
% \paragraph{Complémentaire d'une couleur de \Model{cmy}}
% Nous prenons simplement le vecteur complémentaire :
% \begin{gather}
% (\emph{cyan}^*, \emph{magenta}^*, \emph{jaune}^*) := E - (\emph{cyan}, \emph{magenta}, \emph{jaune})
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{cmyk}}
%
% \paragraph{Conversion de \Model{cmyk} vers \Model{cmy}}\label{sec.cmyk2cmy}
% Elle se base sur \cite{plrm}, p. 477, en lien avec la conversion 
% $\Model{rgb}\to\Model{cmy}$.
% \begin{align}
% \emph{cyan} & := \min\{1,\emph{cyan} + \emph{noir}\}\\
% \emph{magenta} & := \min\{1,\emph{magenta} + \emph{noir}\}\\
% \emph{jaune} & := \min\{1,\emph{jaune} + \emph{noir}\}
% \end{align}
%
%
% \paragraph{Conversion de \Model{cmyk} vers \Model{gray}}
% Source: \cite{plrm}, p. 475.
% \begin{align}
% \emph{gris} & := 1 - \min\{1,0.3\cdot\emph{cyan} + 0.59\cdot\emph{magenta} + 0.11\cdot\emph{jaune} + \emph{noir}\}
% \end{align}
%
%
% \paragraph{Complémentaire d'une couleur de \Model{cmyk}}
% Le simple vecteur complémentaire ne mène pas à des résultats fructueux.
% C'est pourquoi nous convertissons d'abord %$C=(\emph{cyan}, \emph{magenta},
% \emph{jaune}, \emph{noit})$ en modèle \Model{cmy}, calculons là la couleur
% complémentaire et revenons ensuite dans le modèle \Model{cmyk}.
%
%
% \subsubsection{Le modèle \Model{hsb}}
%
% \paragraph{Conversion de \Model{hsb} vers \Model{rgb}}
% \begin{gather}
% (\emph{rouge},\emph{vert},\emph{bleu}) :=
%  \emph{luminosité}\cdot( E - \emph{saturation}\cdot F)\\
% \intertext{avec}
% i := \left\lfloor 6\cdot\emph{teinte}\right\rfloor,\qquad f := 
% 6\cdot\emph{teinte} - i\\
% \intertext{et}
% F :=
%  \begin{cases}
%   (0,1-f,1) & \text{si $i=0$}\\
%   (f,0,1) & \text{si $i=1$}\\
%   (1,0,1-f) & \text{si $i=2$}\\
%   (1,f,0) & \text{si $i=3$}\\
%   (1-f,1,0) & \text{si $i=4$}\\
%   (0,1,f) & \text{si $i=5$}\\
%   (0,1,1) & \text{si $i=6$}
%  \end{cases}\label{eq.hsb2rgb2}
% \end{gather}
%
% \medskip
%
% Ceci se base sur \cite{smith}, \emph{HSV to RGB Algorithm (Hexcone Model)},
% qui donne (légèrement reformulé) :
% \begin{align}
% m & := 1-\emph{saturation}\\
% n & := 1-f\cdot\emph{saturation}\\
% k & := 1-(1-f)\cdot\emph{saturation}\\
% (\emph{rouge},\emph{vert},\emph{bleu}) & := \emph{luminosité}\cdot
%  \begin{cases}
%   (1,k,m) & \text{si $i=0,6$}\\
%   (n,1,m) & \text{si $i=1$}\\
%   (m,1,k) & \text{si $i=2$}\\
%   (m,n,1) & \text{si $i=3$}\\
%   (k,m,1) & \text{si $i=4$}\\
%   (1,m,n) & \text{si $i=5$}
%  \end{cases}\label{eq.hsb2rgb1}
% \end{align}
% Notez que le cas $i=6$ (qui s'obtient si $\emph{teinte}=1$) est manquant
% dans l'algorithme de Smith.
% À cause de 
% \begin{align}
% \lim_{f\to1} (0,1,f) = (0,1,1) = \lim_{f\to0} (0,1-f,1)
% \end{align}
% il est clair qu'il n'y a qu'une façon de définir $F$ pour $i=6$ afin
% d'obtenir une fonction continue, comme indiqué en équation (\ref{eq.hsb2rgb2}).
% Ceci a été \trad{ramené} à l'équation (\ref{eq.hsb2rgb1}).
% Un argument similaire montre en effet que $F$ est une fonction continue de
% la \emph{teinte} sur l'intervalle $[0,1]$.
%
%
% \paragraph{Conversion de \Model{hsb} vers \Model{Hsb}}
% Seule la première composante doit être changée.
% \begin{gather}
% (\emph{teinte\Circ}, \emph{saturation}, \emph{luminosité}) := 
% (H\cdot\emph{teinte}, \emph{saturation}, \emph{luminosité})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{hsb} vers \Model{HSB}}
% Comme décrit en section \vref{sec.real2int}.
% \begin{gather}
% (\emph{Teinte}, \emph{Saturation}, \emph{Luminosité}) := 
% \bigl(\RtoI M(\emph{teinte}), \RtoI M(\emph{saturation}), 
% \RtoI M(\emph{luminosité})\bigr)
% \end{gather}
%
%
% \paragraph{Complémentaire d'une couleur de \Model{hsb}}
% Nous n'avons pas trouvé de formule dans la littérature, c'est pourquoi nous
% donnons une courte preuve par la suite.
% \begin{lemma}
% La couleur complémentaire en modèle \textup{\Model{hsb}} peut être calculée
% par les formules suivantes:\em
% \begin{align}
% \emph{teinte}^* & :=
% \begin{cases}
% \emph{teinte} + \frac12 & \text{si $\emph{teinte}<\frac12$}\\[1ex]
% \emph{teinte} - \frac12 & \text{si $\emph{teinte}\ge\frac12$}\\
% \end{cases}\\[1ex]
% \emph{luminosité}^* & := 1 - \emph{luminosité}\cdot(1-\emph{saturation})\\[1ex]
% \emph{saturation}^* & :=
% \begin{cases}
% 0 & \text{si $\emph{luminosité}^*=0$}\\[1ex]
% \displaystyle\frac{\emph{luminosité}\cdot\emph{saturation}}{\emph{luminosité}^*} & \text{si $\emph{luminosité}^*\ne0$}
% \end{cases}
% \end{align}
% \end{lemma}
%
% \begin{proof}
% En partant de la couleur originale $C=(h,s,b)$, nous définissons la couleur 
% $C^*=(h^*,s^*,b^*)$ par les formules suivantes, convertissons $C$ et $C^*$ en
% modèle \Model{rgb} et montrons que 
% \begin{gather}
% C_{\Model{rgb}} + C_{\Model{rgb}}^* = b\cdot(E - s\cdot F) + b^*\cdot(E - s'\cdot F^*) \stackrel!= E,\label{eq.hsbcompl1}
% \end{gather}
% ce qui signifie que $C_{\Model{rgb}}$ est la couleur complémentaire de
% $C_{\Model{rgb}}^*$.
% Tout d'abord nous notons que les paramètres de $C^*$ sont dans l'intervalle
% autorisé $[0,1]$.
% Ceci est évident pour $h^*,b^*$.
% De
% $b^* = 1-b\cdot(1-s) = 1 - b + b\cdot s$
% nous tirons $b\cdot s = b^* - (1-b) \le b^*$, c'est pourquoi $s^*\in[0,1]$ et
% \begin{gather*}
% b^* = 0 \Leftrightarrow s=0 \text{ et } b=1.
% \end{gather*}
% Ainsi, l'équation (\ref{eq.hsbcompl1}) fonctionne dans le cas $b^*=0$.
% Maintenant, supposons que $b^*\ne0$, alors
% \begin{align*}
% C_{\Model{rgb}} + C_{\Model{rgb}}^*
% &= b\cdot(E - s\cdot F) + b^*\cdot\Bigl(E - \frac{b\cdot s}{b^*}\cdot F^*\Bigr) \\
% &= b\cdot E - b\cdot s\cdot F + b^*\cdot E - b\cdot s\cdot F^*\\[1ex]
% &= E - b\cdot s\cdot(F+F^*-E)
% \end{align*}
% puisque $b^*=1-b+bs$.
% C'est pourquoi il suffit de montrer que
% \begin{gather}
% F+F^*=E.\label{eq.hsbcompl2}
% \end{gather}
% Partant de 
% \begin{gather*}\textstyle
% h<\frac12 \Rightarrow h^*=h+\frac12 \Rightarrow 6h^* = 6h+3 \Rightarrow 
%  i^*=i+3 \text{ et } f^*=f
% \end{gather*}
% il est simple de montrer avec (\ref{eq.hsb2rgb2}) que l'équation 
% (\ref{eq.hsbcompl2}) fonctionne pour les cas $i=0,1,2$.
% De façon similaire, 
% \begin{gather*}\textstyle
% h\ge\frac12 \Rightarrow h^*=h-\frac12 \Rightarrow 6h^* = 6h-3 \Rightarrow
   i^*=i-3 \text{ et } f^*=f
% \end{gather*}
% et, une nouvelle fois, à partir de (\ref{eq.hsb2rgb2}) nous obtenons 
% (\ref{eq.hsbcompl2}) pour les cases $i=3,4,5$.
% Enfin, si $i=6$ alors $f=0$ et $F+F^* = (0,1,1) + (1,0,0) = E$.
% \end{proof}
%
%
% \subsubsection{Le modèle \Model{Hsb}}
%
% \paragraph{Conversion de \Model{Hsb} vers \Model{hsb}}
% Seule la première composante doit être changée.
% \begin{gather}
% (\emph{teinte}, \emph{saturation}, \emph{luminosité}) :=
%  (\emph{teinte\Circ}/H, \emph{saturation}, \emph{luminosité})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{Hsb} vers \Model{tHsb}}
% Sur la base de (\ref{eq.tHsb1})--(\ref{eq.tHsb3}), nous avons simplement à
% échanger les lettres $x$ et $y$ dans l'équation (\ref{eq.tHsb4}) pour
% obtenir la transformation inverse :
% \begin{gather}
% \displaystyle \emph{teinte\Circ}\in\left[y_{\eta-1},y_\eta\right] \Rightarrow
% \emph{teinte\Circ} := x_{\eta-1} + \frac{x_\eta - x_{\eta-1}}{y_\eta -
%   y_{\eta-1}}\cdot(\emph{teinte\Circ} - y_{\eta-1})
% \end{gather}
% où \emph{saturation} et \emph{luminosité} sont laissées inchangées.
%
%
% \subsubsection{Le modèle \Model{tHsb}}
%
% \paragraph{Conversion de \Model{tHsb} vers \Model{Hsb}}\label{sec.tHsb2Hsb}
% \DescribeMacro\rangeHsb
% \DescribeMacro\rangetHsb
% Supposons que $\texttt{\string\rangeHsb}=H$ et |\rangetHsb| se développe en 
% \begin{gather}
% x_1,y_1;x_2,y_2;\dots;x_{h-1},y_{h-1}\label{eq.tHsb1}
% \intertext{où}
% x_0:=0<x_1<x_2<\dots<x_{h-1}<x_h:=H\label{eq.tHsb2}\\
% y_0:=0<y_1<y_2<\dots<y_{h-1}<y_h:=H\label{eq.tHsb3}
% \end{gather}
% avec un entier $h>0$.
% Maintenant les valeurs de $x$ et $y$ détermine une transformation linéaire
% par morceau :
% \begin{gather}
% \displaystyle \emph{teinte\Circ}\in\left[x_{\eta-1},x_\eta\right] \Rightarrow
% \emph{teinte\Circ} := y_{\eta-1} + \frac{y_\eta - y_{\eta-1}}{x_\eta
%  - x_{\eta-1}}\cdot(\emph{teinte\Circ} - x_{\eta-1})
% \label{eq.tHsb4}
% \end{gather}
% tandis que \emph{saturation} et \emph{luminosité} sont laissées inchangées.
%
%
% \subsubsection{Le modèle \Model{gray}}
%
% \paragraph{Conversion de \Model{gray} vers \Model{rgb}}
% Source: \cite{plrm}, p. 474.
% \begin{gather}
% (\emph{rouge}, \emph{vert}, \emph{bleu}) := \emph{gris}\cdot E
% \end{gather}
%
%
% \paragraph{Conversion de \Model{gray} vers \Model{cmy}}
% La conversion est dérivée de la chaîne de conversion 
% $\Model{gray}\to\Model{rgb}\to\Model{cmy}$.
% \begin{gather}
% (\emph{cyan}, \emph{magenta}, \emph{jaune}) := (1-\emph{gris})\cdot E
% \end{gather}
%
%
% \paragraph{Conversion de \Model{gray} vers \Model{cmyk}}
% Source: \cite{plrm}, p. 475.
% \begin{gather}
% (\emph{cyan}, \emph{magenta}, \emph{jaune}, \emph{noir}) := (0,0,0,1-\emph{gris})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{gray} vers \Model{hsb}}
% La conversion est dérivée de la chaîne de conversion 
% $\Model{gray}\to\Model{rgb}\to\Model{hsb}$.
% \begin{gather}
% (\emph{teinte}, \emph{saturation}, \emph{luminosité}) := (0,0,\emph{gris})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{gray} vers \Model{Hsb}/\Model{tHsb}}
% La conversion est dérivée de la chaîne de conversion 
% $\Model{gray}\to\Model{hsb}\to\Model{Hsb}$, suivie par 
% $\Model{Hsb}\to\Model{tHsb}$ si possible.
% \begin{gather}
% (\emph{teinte\Circ}, \emph{saturation}, \emph{luminosité}) := (0,0,\emph{gris})
% \end{gather}
%
%
% \paragraph{Conversion de \Model{gray} vers \Model{Gray}}
% Comme décrit en section \vref{sec.real2int}.
% \begin{gather}
% \emph{Gris} := \RtoI N(\emph{gris})
% \end{gather}
%
%
% \paragraph{Complémentaire d'une couleur de \Model{gray}}
% Ceci est similaire au cas \Model{rgb} :
% \begin{gather}
% \emph{gris}^* := 1 - \emph{gris}
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{RGB}}
%
% \paragraph{Conversion de \Model{RGB} vers \Model{rgb}}
% Comme décrit en section \vref{sec.int2real}.
% \begin{gather}
% (\emph{rouge}, \emph{vert}, \emph{bleu}) := \bigl(\ItoR L(\emph{Rouge}),
%  \ItoR L(\emph{Vert}), \ItoR L(\emph{Bleu})\bigr)
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{HTML}}
%
% \paragraph{Conversion de \Model{HTML} vers \Model{rgb}}
% Comme décrit en section \vref{sec.int2real}: en commençant avec 
% \emph{RRGGBB}, nous définissons
% \begin{gather}
% (\emph{rouge}, \emph{vert}, \emph{bleu}) := 
% \bigl(\ItoR{255}(\emph{RR}_{\emph{dec}}), \ItoR{255}(\emph{GG}_{\emph{dec}}),
% \ItoR{255}(\emph{BB}_{\emph{dec}})\bigr)
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{HSB}}
%
% \paragraph{Conversion de \Model{HSB} vers \Model{hsb}}
% Comme décrit en section \vref{sec.int2real}.
% \begin{gather}
% (\emph{teinte}, \emph{saturation}, \emph{luminosité}) := 
%  \bigl(\ItoR M(\emph{Teinte}), \ItoR M(\emph{Saturation}), 
%  \ItoR M(\emph{Luminosité})\bigr)
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{Gray}}
%
% \paragraph{Conversion de \Model{Gray} vers \Model{gray}}
% Comme décrit en section \vref{sec.int2real}.
% \begin{gather}
% \emph{gray} := \ItoR N(\emph{Gray})
% \end{gather}
%
%
% \subsubsection{Le modèle \Model{wave}}
%
% \paragraph{Conversion \Model{wave} to \Model{rgb}}
% Source: méthode basée sur l'algorithme de \People{Dan}{Bruton} \cite{Bruton}.
% Soit $\lambda$ une longueur d'onde visible, exprimée en nanomètres (nm), 
% autrement dit, $\lambda\in\left[380,780\right]$.
% Nous supposons également que $\gamma>0$ est un nombre fixé ($\gamma=0.8$ dans
% \cite{Bruton}).
% Posons d'abord
% \begin{align}
% (r,v,b) & :=
%  \begin{cases}
%   \displaystyle \Bigl(\frac{440-\lambda}{440-380},0,1\Bigr) & 
%    \text{si $\lambda\in[380,440[$}\\[1.75ex]
%   \displaystyle \Bigl(0,\frac{\lambda-440}{490-440},1\Bigr) &
%    \text{si $\lambda\in[440,490[$}\\[1.75ex]
%   \displaystyle \Bigl(0,1,\frac{510-\lambda}{510-490}\Bigr) & 
%    \text{si $\lambda\in[490,510[$}\\[1.75ex]
%   \displaystyle \Bigl(\frac{\lambda-510}{580-510},1,0\Bigr) &
%    \text{si $\lambda\in[510,580[$}\\[1.75ex]
%   \displaystyle \Bigl(1,\frac{645-\lambda}{645-580},0\Bigr) &
%    \text{si $\lambda\in[580,645[$}\\[2.5ex]
%   \displaystyle (1,0,0) & \text{si $\lambda\in[645,780]$}\\
%  \end{cases}\label{eq.gamma2rgb1}\\
% \intertext{alors, afin de faire chuter l'intensité aux limites des zones
% du spectre visible,}
% f & :=
%  \begin{cases}
%   \displaystyle 0.3 + 0.7\cdot\frac{\lambda-380}{420-380} & 
%    \text{si $\lambda\in\left[380,420\right[$}\\[1.25ex]
%   \displaystyle 1 & \text{si $\lambda\in[420,700]$}\\[1ex]
%   \displaystyle 0.3 + 0.7\cdot\frac{780-\lambda}{780-700} & 
%    \text{si $\lambda\in\left]700,780\right]$}\\
%  \end{cases}\label{eq.gamma2rgb2}\\
% \intertext{et finalement}
% (\emph{rouge},\emph{vert},\emph{bleu}) & := \bigl((f\cdot r)^\gamma, 
%  (f\cdot v)^\gamma, (f\cdot b)^\gamma\bigr)
% \end{align}
% Les couleurs intermédiaires $(r,v,b)$ aux bords de l'intervalle de
% l'équation (\ref{eq.gamma2rgb1}) sont bien connues :
% pour $\lambda=380,440,490,510,580,645$ nous obtenons les couleurs 
% \Color{magenta}{magenta}, \Color{bleu}{blue}, \Color{cyan}{cyan}, 
% \Color{vert}{green}, \Color{jaune}{yellow}, \Color{rouge}{red}
% respectivement.
% Celles-ci s'avèrent être représentées dans le modèle \Model{hsb} par 
% $\emph{teinte}=\frac56,\frac46,\frac36,\frac26,\frac16,\frac06$, 
% tandis que $\emph{saturation}=\emph{luminosité}=1$ pour les 6~couleurs.
% De plus, ces représentations en \Model{hsb} sont indépendantes de la
% valeur $\gamma$.
% En restant dans le cadre de ce modèle, nous observons que la décroissance
% de l'intensité aux limites de la vision --- comme convenu avec l'équation 
% (\ref{eq.gamma2rgb2}) --- se manifeste par la décroissance du paramètre
% d'\emph{luminosité} vers ces limites.
% Un simple calcul montre que les bords $\lambda=380,780$ de l'algorithme
% restituent respectivement les couleurs |magenta!|$0.3^\gamma$|!black|, 
% |red!|$0.3^\gamma$|!black|.
% Nous ne voyons pas de raison pour lesquelles nous ne devrions pas étendre ces
% limites de façon similaire pour aboutir à un vert \Color{noir}{black} de
% chaque côté du spectre.
% Maintenant nous sommes prêts à placer le tout dans un autre algorithme plus
% naturel.
%
%
% \paragraph{Conversion de \Model{wave} vers \Model{hsb}}
% Soit $\lambda$ une longueur d'onde visible, exprimée en nanomètres (nm), et
% soit
% \begin{gather}
% \varrho : \bbbR \to \left[0,1\right],\ x \mapsto 
%  \bigl( \min\{ 1, \max\{ 0,x\} \} )^\gamma
% \end{gather}
% avec un nombre fixé de correction $\gamma>0$.
% Alors
% \begin{align}
% \emph{teinte} & := \displaystyle \frac16\cdot
%  \begin{cases}
%   \displaystyle 4 + \varrho\Bigl(\frac{\lambda-440}{380-440}\Bigr) &
%    \text{si $\lambda<440$}\\[1.75ex]
%   \displaystyle 4 - \varrho\Bigl(\frac{\lambda-440}{490-440}\Bigr) &
%    \text{si $\lambda\in[440,490[$}\\[1.75ex]
%   \displaystyle 2 + \varrho\Bigl(\frac{\lambda-510}{490-510}\Bigr) &
%    \text{si $\lambda\in[490,510[$}\\[1.75ex]
%   \displaystyle 2 - \varrho\Bigl(\frac{\lambda-510}{580-510}\Bigr) &
%    \text{si $\lambda\in[510,580[$}\\[1.75ex]
%   \displaystyle 0 + \varrho\Bigl(\frac{\lambda-645}{580-645}\Bigr) &
%    \text{si $\lambda\in[580,645[$}\\[2.5ex]
%   \displaystyle 0 & \text{si $\lambda\ge645$}\\
%  \end{cases}\label{eq.gamma2hsb1}\\[1ex]
% \emph{saturation} & := 1\\[1ex]
% \emph{luminosité} & :=
%  \begin{cases}
%   \displaystyle \varrho\Bigl(0.3 + 
%    0.7\cdot\frac{\lambda-380}{420-380}\Bigr) &
%    \text{si $\lambda<420$}\\[1.5ex]
%   \displaystyle 1 & \text{si $\lambda\in[420,700]$}\\[1ex]
%   \displaystyle \varrho\Bigl(0.3 + 
%    0.7\cdot\frac{\lambda-780}{700-780}\Bigr) &
%    \text{si $\lambda>700$}\\
%  \end{cases}\label{eq.gamma2hsb2}
% \end{align}
% 
% Par souci d'exhaustivité, nous notons que, indépendamment de $\gamma$,
% \begin{gather*}
% (\emph{teinte},\emph{saturation},\emph{luminosité}) =
%  \begin{cases}
%   \bigl(\frac56,1,0\bigr) & \text{si $\lambda\le 380 - 
%    \frac{3\cdot(420-380)}7 = 362.857\dots$}\\[1.5ex]
%   \bigl(0,1,0\bigr) & \text{si $\lambda\ge 780 + 
%    \frac{3\cdot(780-700)}7 = 814.285\dots$}\\
%  \end{cases}\label{eq.gamma2hsb3}
% \end{gather*}
% Quelle est la meilleure (ou, au moins une bonne) valeur pour $\gamma$?
% Dans l'algorithme original \cite{Bruton}, $\gamma=0.8$ a été retenu.
% Cependant, nous n'avons pas pu détecter de différence visuelle significative
% entre les cas $\gamma=0.8$ et $\gamma=1$.
% Aussi, pour le moment, l'implémentation de \XC retient cette dernière qui 
% implique une pure approche linéaire.
% Dans les fichiers d'exemple \Package{pstricks} 
% \href{xcolor2.pdf}{\File{xcolor2.tex}}, il est fait démonstration de 
% différentes valeurs de $\gamma$.
%
% \clearpage
%
%
%
% \begin{adjustwidth}{-2.5cm}{}
% \begingroup\raggedright
% \begin{thebibliography}{00}
% \addcontentsline{toc}{section}{Références}
%
% \bibitem{plrm}%
%  {Adobe Systems Incorporated: \og PostScript Language Reference Manual 
%  \fg{}. Addison-Wesley, troisième édition, 1999.
%   \URL{http://www.adobe.com/products/postscript/pdfs/PLRM.pdf}}
%
% \bibitem{fbox}%
%  {\People{Donald}{Arseneau}: \og Patch so \cmd\fbox{} draws frame on top 
%  of text \fg{}. \LaTeX{} bug report, latex/3655, 18/03/2004.
%   \URL{http://www.latex-project.org/cgi-bin/ltxbugs2html?pr=latex/3655}}
%
% \bibitem{url}%
%  {\People{Donald}{Arseneau}: extension \Package{url}, \og 2005/06/27  ver 3.2
%  Verb mode for urls, etc. \fg{}.
%   \CTAN{macros/latex/contrib/misc/}{url.sty}}
%
% \bibitem{Bruton}%
%  {\People{Dan}{Bruton}: \og Approximate RGB values for Visible Wavelengths
%  \fg{}, 1996.
%   \URL{http://www.physics.sfasu.edu/astro/color/spectra.html}}
%
% \bibitem{dpc}%
%  {\People{David P.}{Carlisle}: \og Packages in the `graphics' bundle \fg{},
%  2014.
%   \CTAN{macros/latex/required/graphics/}{grfguide.*}}
%
% \bibitem{color}%
%  {\People{David P.}{Carlisle}: \LCP, ``2016/01/03 v1.1b Standard LaTeX Color (DPC)''.
%   \CTAN{macros/latex/required/graphics/}{color.dtx}}
%
% \bibitem{colortbl}%
%  {\People{David P.}{Carlisle}: extension \Package{colortbl}, 
%  \og 2001/02/13 v0.1j Color table columns \fg{}.
%   \CTAN{macros/latex/contrib/colortbl/}{}}
%
% \bibitem{pstcol}%
%  {\People{David P.}{Carlisle}, \People{Herbert}{Vo\ss}, 
%  \People{Rolf}{Niepraschk}: extension \Package{pstcol}, 
%  \og 2005/11/16 v1.2 LaTeX wrapper for `PSTricks'{} \fg{}.
%   \CTAN{macros/graphics/pstricks/latex/}{pstcol.sty}}
%
% \bibitem{chroma}%
%  {\People{Uwe}{Kern}: \og Chroma: a reference book of \LaTeX{} colors \fg{}.
%   \CTAN{info/colour/chroma/}{} et
%   \URL{http://www.ukern.de/tex/chroma.html}}
%
% \bibitem{xcolor}%
%  {\People{Uwe}{Kern}: extension \Package{xcolor}, 
%   \og \LaTeX{} color extensions \fg{}.
%   \CTAN{macros/latex/contrib/xcolor/}{} et
%   \URL{http://www.ukern.de/tex/xcolor.html}}
%
% \bibitem{colorinfo}%
%  {\People{Rolf}{Niepraschk}: extension \Package{colorinfo}, 
%   \og 2003/05/04 v0.3c Info from defined colors \fg{}.
%   \CTAN{macros/latex/contrib/colorinfo/}{}}
%
% \bibitem{pdfcolmk}%
%  {\People{Heiko}{Oberdiek}: extension \Package{pdfcolmk}, 
%   \og 2006/02/20 v0.8 PDFtex COLor MarK \fg{}.
%   \CTAN{macros/latex/contrib/oberdiek/}{pdfcolmk.*}}
%
% \bibitem{mik}%
%  Projet {MiK\TeX{} :
%   \URL{http://www.miktex.org/}}
%
% \bibitem{hyperref}%
%  {\People{Sebastian}{Rahtz}, \People{Heiko}{Oberdiek}: 
%   extension \Package{hyperref},
%   \og 2006/09/06 v6.75e Hypertext links for \LaTeX \fg{}.
%   \CTAN{macros/latex/contrib/hyperref/}{}}
%
% \bibitem{smith}%
%  {\People{Alvy Ray}{Smith}: \og Color Gamut Transform Pairs \fg{}. 
%   \emph{Computer Graphics} (ACM SIGGRAPH), Volume 12, Numéro 3, Août 1978.
%   \URL{http://alvyray.com/Papers/PapersCG.htm}}
%
% \bibitem{HTML4}%
%  {World Wide Web Consortium: \og HTML4 color keywords \fg{}.
%   \URL{http://www.w3.org/TR/css3-color/\#html4}}
%
% \bibitem{svg}%
%  {World Wide Web Consortium: \og Scalable Vector Graphics (\Index{SVG}) 1.1
%   Specification --- Basic Data Types and Interfaces \fg{}.
%   \URL{http://www.w3.org/TR/SVG11/types.html\#ColorKeywords}}
%
% \end{thebibliography}
% \endgroup
% \clearpage
%
% \columnsep2.25em
% \begin{multicols}{2}[\section*{Annexes}%
% \addcontentsline{toc}{section}{Annexes}]
%
% \subsection*{Remerciements}
% \addcontentsline{toc}{subsection}{Remerciements}
% Cette extension se base sur \cite{color} (Copyright (C) 1994--1999 
% \People{David P.}{Carlisle}) et contient du code de cette extension, cette
% dernière faisant partie de l'\og ensemble graphique\fg{} du standard  
% \LaTeX{}.
% Bien que de nombreuses commandes et fonctionnalités ont été ajoutées et que 
% la plupart des commandes originales de \LC{} ont été réécrites ou adaptées
% dans \XC, cette dernière n'existerait pas sans \LC. 
% Aussi, l'auteur est reconnaissant à \People{David P.}{Carlisle} d'avoir
% créé \LC{} et ses fichiers associés.
%
% \subsection*{Marques déposées}
% \addcontentsline{toc}{subsection}{Marques déposées}
% Des Marques déposées apparaissent tout au long de cette documentation sans
% aucun symbole les dénotant; elles sont la propriété de leur dépositaire 
% respectif.
% Il n'y a ici aucune intention d'infraction ; l'utilisation est
% au bénéfice du dépositaire de la marque.
%
% \raggedright
% \leftmargini1em
% \leftmarginii1em
% \leftmarginiii1em
%
% \subsection*{Problèmes connus}
% \addcontentsline{toc}{subsection}{Problèmes connus}
% \begin{itemize}
% \item |\rowcolors[\hline]...| ne fonctionne pas avec \Package{longtable}.
% \end{itemize}
%
% \subsection*{Historique}
% \addcontentsline{toc}{subsection}{Historique}
%
% \subsubsection*{11/05/2016 v2.12}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item |\nopagecolor| command as introduced in \LC{} v1.1a (example added to \File{xcolor3.tex});
%   \item \Option{luatex} driver option (code provided by DPC) to fix incompatibilities due to changes in new Lua\TeX\ version.
%   \end{itemize}
% \item Corrections d'erreur:
%   \begin{itemize}
%   \item possible name conflict by |\XC@ifxcase| call;
%   \item incorrect internal |\@hex@@Hex| macro.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{21/01/2007 v2.11}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item les noms de couleur \Color{citron vert}{lime} et 
%     \Color{bleu sarcelle}{teal} sont ajoutés à l'ensemble des couleurs
%     prédéfinies.
%   \end{itemize}
% \item Correction d'erreur :
%   \begin{itemize}
%   \item appel incorrect de |\XC@strip@comma| dans les options liées à 
%   \Package{hyperref}.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{28/11/2006 v2.10}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item l'option \Option{fixinclude} empêche \Program{dvips} de basculer 
%     explicitement la couleur courante au \Color{noir}{black} avant d'insérer
%     un fichier \File{.eps} par le biais de 
%    |\color{red}\includegraphics{test}|.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item |\colorbox| et |\fcolorbox| sont rendues robustes ;
%   \item l'option d'extension obsolète \oOption{pst} est retirée ;
%   \item plusieurs changements aux commandes internes.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item traitement incorrect de la couleur courante \og . \fg{} de type 
%     \Model{cmyk}.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{21/12/2005 v2.09}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item |\definecolor| et |\color| acceptent maintenant des spécifications
%     de couleur avec comme séparateur l'espace, par exemple : 
%     |\color| |[rgb]{1 .5 0}|;
%   \item l'option expérimentale \Option{xcdraw} est étendue aux pilotes 
%     \Option{pdftex} et \Option{dvipdfm}.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item le fichier de test \File{xcolor2.tex} est rendu compatible avec les
%     changements récents dans \Package{pstricks};
%   \item le fichier de test \File{xcolor3.tex} est étendu ;
%   \item le fichier de test de pilote \File{xcolor4.tex} est étendu pour
%     illustrer les différentes approches de tracés de cadres ;
%   \item implémentation plus efficace du code spécifique aux pilotes.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{25/11/2005 v2.08}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item ajout de flexibilité aux arguments de |\fcolorbox|, par exemple, 
%     |\fcolorbox| |[gray]{0.5}[wave]{580}{test}|;
%   \item |\boxframe| restitue une boîte de dimensions indiquées ;
%   \item nouvelle implémentation de |\f(rame)box| et |\fcolorbox| comme des
%     extensions du rapport d'anomalie latex/3655 pour réduire les erreurs 
%     de positionnement en pixels sur les matériels en sortie ;
%   \item l'option \Option{kernelfbox} pour ceux qui préfère l'ancienne
%     approche de |\f(rame)box| ;
%   \item l'option expérimentale \Option{xcdraw} utilise des commandes
%     \Index{PostScript} pour dessiner les cadres et les couleurs des boîtes
%     dans les cas avec \Option{dvips}.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item détection des types d'expression insuffisante dans |\colorlet|;
%   \item mauvais calcul dans \trad{unit interval reduction} pour les entiers
%     négatifs (ce qui affecte les séries de couleur et les expressions de 
%     couleur étendues).
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{12/11/2005 v2.07}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item le modèle colorimétrique \Model{Hsb} permet de spécifier la 
%    \emph{teinte} en degrés ;
%   \item le modèle colorimétrique \Model{tHsb} (\Model{Hsb} 
%    \pModel{transformé}) permet la configuration personnalisée de la
%    \emph{teinte} sur des cercles colorimétriques ;
%   \item génération simple d'harmonies de couleur dérivées des cercles
%    colorimétriques en modèle \Model{Hsb} ou \Model{tHsb}, par exemple, 
%    |\color{red>wheel,1,12}| donne la couleur analogue au \Color{rouge}{red}
%    sur un cercle colorimétrique à 12 secteurs ;
%   \item 317 noms prédéfinis additionnels issus de \File{rgb.txt},
%    qui fait partie des distributions \Index{Unix}/\Index{X11} ;
%   \item l'option \Option{svgnames} est augmentée avec 4 nouvelles couleurs
%    tirées de \File{rgb.txt} ;
%   \item une syntaxe améliorée pour la conversion immédiate, par exemple
%    |\definecolor||{test}{rgb:gray}{0.3}| ou |\color| |[rgb:wave]{478}| ;
%   \item les commandes |\@ifundefinedcolor| et |\@ifundefinedmodel| ;
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item documentation améliorée ;
%   \item plusieurs changements aux commandes internes.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item mauvais calcul des composantes d'une série de couleur dans 
%    certains cas de paramètres de pas négatifs.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{15/10/2005 v2.06}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item le modèle colorimétrique \Model{wave} pour une visualisation
%    (approximée) des longueurs d'onde visible reste toujours experimental ;
%   \item le pseudo-modèle \nModel{ps} pour les couleurs définies par un 
%    code \Index{PostScript} littéral en conjonction avec \Package{pstricks} et
%    \Option{dvips}; une illustration d'une approche de correction $\gamma$
%    est donnée avec \href{xcolor2.pdf}{\File{xcolor2.tex}} ;
%   \item la commande |\substitutecolormodel| pour le remplacement d'un modèle
%    colorimétrique dépendant du pilote manquant ou erroné ;  
%   \item détection améliorée et gestion des modèles colorimétriques dépendant 
%    du pilote ;
%   \item les options \Option{dvipdfmx} et \Option{xetex} pour supporter ces
%    pilotes ;
%   \item fichier générique de test de pilote : \File{xcolor4.tex}.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item |\XC@strip@comma| ne génère plus d'espace résiduel, ce qui améliore
%    également la restitution de l'environnement |testcolors|.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{30/09/2005 v2.05}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item l'environnement |testcolors| aide à tester les couleurs dans 
%    différents modèles, ce qui montre à la fois le résultat visuel et les
%    paramètres spécifiques du modèle ;
%   \item |\extractcolorspecs| met les spécifications du modèle et des 
%    couleurs dans deux commandes séparées, par opposition à
%    |\extractcolorspec|;
%   \item les noms de couleurs \Color{rose}{pink} et \Color{olive}{olive} sont
%    ajoutées à l'ensemble des couleurs prédéfinies.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item |\definecolor{test}{named}{truc}| ne fonctionne pas en v2.04.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{23/09/2005 v2.04}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item préparation pour l'utilisation de modèles additionnels (fournis par
%    les pilotes) ;
%   \item les utilisateurs de \Package{pstricks} peuvent maintenant spécifier
%    explicitement les paramètres de couleur dans |\psset| et les commandes 
%    liées, par exemple, |\psset{linecolor=[rgb]{1,0,0}}|; une illustration de
%    de ce point est donnée dans \href{xcolor2.pdf}{\File{xcolor2.tex}}.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item noms des modèles colorimétriques assainis (autrement dit, mis en code
%     de catégorie~12) dans toute l'extension ;
%   \item la commande |\@namelet| est rendue obsolète du fait d'un conflit de 
%     nom avec \Package{memoir} --- utilisez |\XC@let@cc| en lieu et place
%     (de nombreuses commandes |\XC@let@..| sont également disponibles) ;
%   \item les codes de conversion de couleur sont simplifiés en utilisant la
%     nouvelle commande |\XC@ifxcase| ;
%   \item quelques changements mineurs aux commandes internes.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{06/06/2005 v2.03}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item l'option \Option{fixpdftex} charge l'extension \Package{pdfcolmk} 
%     afin d'améliorer le traitement des couleurs de pdf\TeX\ lors de saut
%     de page.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item quelques changements mineurs aux commandes internes.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item du fait d'une condition incorrecte dans un |\if| de |\XC@info|, 
%     |\colorlet| causait un problème à chaque fois que le second argument
%     commençait avec deux lettres identiques, par exemple, 
%     |\colorlet{test}{oooh}| ;
%   \item le traitement de l'argument de |\XC@getcolor| cause des
%     incompatibilités incompatibility avec l'extension \Package{msc} ;
%   \item l'option \Option{prologue} causait des incompatibilités avec 
%     l'extension \Package{preview}.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{24/03/2005 v2.02}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item la commande|\aftergroupedef| reproduit le comportement de 
%     |\aftergroupdef| avant la version v2.01 ;
%   \item le site web de \XC, \XCW, fournit maintenant un fichier compressé
%     contenant tous les fichiers nécessaires organisés en une arborescence
%     cohérente avec celle de \TeX.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item |\rowcolors| et assimilés sont accessibles uniquement avec 
%     l'option \Option{table} ;
%   \item |\@ifxempty| changé à nouveau pour revenir à la version plus
%     robuste de la version v2.00.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item |\psset{linecolor=\ifcase\test| |red\or green\or blue\fi}| ne 
%     fonctionnait pas avec \Package{pstricks} (erreur introduite en v2.01).
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{15/03/2005 v2.01}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item l'option \Option{prologue} pour un support complet des couleurs
%     nommées en conjonction avec l'option \Option{dvips}: génération à la 
%     volée de fichiers de prologue \Index{PostScript} avec les définitions
%     de toutes les couleurs, prêt pour l'inclusion de \Program{dvips} et/ou 
%     le traitement ultérieur avec des paramètres spécifiques au pilote
%     (par exemple les tons directs) ;
%   \item le fichier de prologue de \Program{dvips} \File{xcolor.pro} pour
%     supporter les couleurs nommées additionnelles ;
%   \item |\colorlet| peut être maintenant utilisé pour créer des couleurs
%     nommées à partir d'expressions de couleur arbitraires ;
%   \item syntaxe des définitions des couleurs améliorée pour permettre des 
%     paramètres de couleur spécifiques au modèle cible, par exemple 
%     |\definecolor| |{red}{rgb/cmyk}{1,0,0/0,1,1,0}|, facilitant l'usage de
%     couleurs sur mesure à la fois pour l'affichage et l'impression ;
%   \item \og définition différée \fg{} de couleur : |\preparecolor| et
%     |\definecolors| permettent de découpler la spécification des couleurs et
%     la génération de la séquence de contrôle, ce qui est particulier utile 
%     (en économisant de la mémoire) pour de larges listes de couleurs dans
%     lesquelles peu de couleurs servent réellement ;
%   \item les options \Option{dvipsnames*} et \Option{svgnames*} pour supporter
%     la définition différée.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item plus grande précision : la plupart des calculs de couleur
%     complémentaire sont maintenant exact sur les 5 chiffres décimaux ;
%   \item |\rangeRGB| et les variables similaires peut maintenant être
%     changées n'importe où dans un document ;
%   \item |\aftergroupdef| exécute maintenant un développement d'un niveau
%     uniquement du code de son argument ;
%   \item |\XCfileversion| et les constantes internes similaires sont
%     retirées des fichiers \File{.sty} et \File{.def} ;
%   \item gestion de la mémoire améliorée (génération réduite de \og séquences
%     de contrôle à plusieurs lettres \fg{} par les tests |\@ifundefined|);
%   \item plusieurs commandes internes améliorées et/ou renommées.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item |\XC@getcolor| pouvait causer des espaces non souhaitées quand 
%     |\psset| était utilisé dans des environnements |pspicture|
%     (\Package{pstricks});
%   \item un débordement arithmétique pouvait survenir quand trop de chiffres
%     décimaux étaient utilisés dans des paramètres de couleur, par exemple,
%     en conséquence de calculs fait par l'extension \Package{fp}.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{04/07/2004 v2.00}
% \tradini
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item extended functionality for color expressions: mix colors like a
%    painter;
%   \item support for color blending: specify color mix expressions that are
%    being blended with every displayed color;
%   \item |\xglobal| command for selective control of globality for color
%    definitions, blends, and masks;
%   \item multiple step operations (e.g., |\color{foo!!+++}|) and access to
%    individual members (e.g., |\color{foo!![7]}|) in color series;
%   \item |\providecolor| command to define only non-existent colors;
%   \item |\definecolorset| and |\providecolorset| commands to facilitate the
%    construction of color sets with common underlying color model;
%   \item additional 147 predefined color names according to \Index{SVG}~1.1
%    specification;
%   \item \Key{xpdfborder} key for setting the width of hyperlink borders in a
%    more driver-independent way if \Program{dvips} is used.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item \LCP{} now completely integrated within \XC;
%   \item \oOption{override}, \oOption{usenames}, \oOption{nodvipsnames}
%    options and |\xdefinecolor| command no longer needed;
%   \item \Option{dvips} and \Option{dvipsnames} options now independent of
%    each other;
%   \item |\tracingcolors|'s behaviour changed to make it more versatile and
%    reduce log file size in standard cases;
%   \item |\rdivide|'s syntax made more flexible (divide by numbers and/or
%    dimensions);
%   \item code restructured, some internal commands renamed;
%   \item documentation rearranged and enhanced.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item |\definecolor{foo}{named}{bar}| did not work (error introduced in
%    v1.11);
%   \item more robust behaviour of conditionals within \Package{pstricks} 
%    key-values.
%   \end{itemize}
% \end{itemize}
%
% \tradfin
% \subsubsection*{09/05/2004 v1.11}
% \tradini
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item switch |\ifglobalcolors| to control whether color definitions are
%    global or local;
%   \item option \Option{hyperref} provides color expression support for the
%    border colors of hyperlinks, e.g., |\hypersetup| 
%    |{xurlbordercolor=red!50!yellow}|;
%   \item internal hooks |\XC@bcolor|, |\XC@mcolor|, and |\XC@ecolor| for
%    additional code that has to be executed immediately before/after the
%    current color is being displayed.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item |\XC@logcolor| renamed to |\XC@display|, which is now the core color
%    display command;
%   \item improved interface to \Package{pstricks}.
%   \end{itemize}
% \end{itemize}
%
% \tradfin
% \subsubsection*{27/03/2004 v1.10}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item support du modèle \nModel{named} ;
%   \item support des couleurs \Program{dvips} (peuvent être maintenant
%     utilisées dans des expressions de couleur);
%   \item représentations internes des couleurs \og ordinaires \fg{} et \og
%     nommées \fg{} regroupées en une structure de données unifiée ;
%   \item autorisation de signes \og - \fg{} multiples au début d'expressions
%     de couleur.
%   \end{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item les commandes comme |\color[named]{test}| causaient des erreurs quand
%     le masque de couleur ou la conversaion de modèle cible étaient actives ;
%   \item incompatibilité avec l'extension \Package{soul} : les commandes 
%     |\hl|, |\ul|, etc. pouvaient mener à des résultats inattendus.
%   \end{itemize}
% \item Documentation :
%   \begin{itemize}
%   \item ajout de formule pour les expressions de couleur générales ;
%   \item texte et index amélioré ;
%   \item retrait de la dépendance de la génération de l'index sur un fichier
%     local de configuration.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{16/02/2004 v1.09}
% \begin{itemize}
% \item Nouvelles fonctionnalités :
%   \begin{itemize}
%   \item le modèle de couleur \Model{HTML}, une variante \Model{RGB} en 
%     héxadecimal 24-bit; ceci permet de spécifier des couleurs comme 
%    |\color[HTML]{AFFE90}| ;
%   \item les noms de couleur \Color{orange}{orange}, \Color{violet}{violet},
%     \Color{pourpre}{purple} et \Color{brun}{brown} sont ajoutés à l'ensemble
%     des couleurs prédéfinies.
%   \end{itemize}
% \item Nouvelle page web de \XC{} : \XCW
% \item Correction d'erreur : |\xdefinecolor| ne normalisait parfois pas ses
%   paramètres.
% \item Changements :
%   \begin{itemize}
%   \item légères améliorations de la documentation ;
%   \item le fichier d'exemple |xcolor1.tex| est réorganisé et abrégé.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{04/02/2004 v1.08}
% \begin{itemize}
% \item Commandes nouvelles:
%   \begin{itemize}
%   \item |\selectcolormodel| pour changer le modèle cible au sein d'un 
%     document;
%   \item |\adjustUCRBG| pour contrôler finement le \trad{undercolor-removal}
%     et le \trad{black-generation} durant la conversion en \Model{cmyk}.
%   \end{itemize}
% \item Correction d'erreur : les expressions de couleur ne fonctionnaient pas
%   correctement avec le caractère actif \og ! \fg{}, par exemple, en cas 
%   d'utilisation de |\usepackage[frenchb]{babel}|.
% \item Réorganisation du code :
%   \begin{itemize}
%   \item |\XC@xdefinecolor| est intégré à |\xdefinecolor|, rendant la première
%     commande obsolète ;
%   \item plusieurs commandes internes améliorées/rationalisées.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{20/01/2004 v1.07}
% \begin{itemize}
% \item Nouvelle fonctionnalité : support des masques de couleur et de la
%   séparation de couleur.
% \item Nouvelles commandes :
%   \begin{itemize}
%   \item |\rmultiply| pour multiplier un registre de dimension par un nombre
%     réel ;
%   \item |\xcolorcmd| pour passer des commandes à exécuter à la fin de 
%     l'extension.
%   \end{itemize}
% \item Changements :
%   \begin{itemize}
%   \item meilleure gestion de la couleur : les couleurs étendues ont la 
%     priorité sur les couleurs standards ;
%   \item plusieurs commandes sont améliorées en utilisant le code du noyau
%     \LaTeX{}.
%   \end{itemize}
% \item Documentation : quelques changements mineurs.
% \item Fichiers d'exemples : exemples \Package{pstricks} complémentaires 
%  (fichier \href{xcolor2.pdf}{\File{xcolor2.tex}}).
% \end{itemize}
%
% \subsubsection*{15/12/2003 v1.06}
% \begin{itemize}
% \item Nouvelle fonctionnalité : expressions de couleur étendues, ce qui
%  permet des opérations de mélange en cascade, par exemple
%  |\color{red!30!green!40!blue}|.
% \item Documentation : nouvelle section sur les expressions de couleur.
% \item Correction d'erreur : l'incrémentation des séries de couleur ne 
%  fonctionnait pas correctement dans les commandes sans affichage telle
%  |\extractcolorspec{foo!!+}| (cette erreur a été introduite en in v1.05).
% \item Commandes renommées : |\ukfileversion| et les constantes internes 
%  similaires sont renommées en |\XCfileversion| et ainsi de suite.
% \item Commandes retranchées : |\ifXCpst| et |\ifXCtable| sont rendues 
%  obsolètes par une simple astuce.
% \end{itemize}
%
% \subsubsection*{21/11/2003 v1.05}
% \begin{itemize}
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item l'option d'extension \Option{hideerrors} fonctionne maintenant comme
%    attendu ;
%   \item l'utilisation de `.' dans la première expression de couleur causait
%    une erreur du fait d'une initialisation incorrecte.
%   \end{itemize}
% \item Réorganisation du code : |\extractcolorspec| utilise maintenant 
% |\XC@splitcolor|, ce qui rend |\XC@extract| obsolète.
% \end{itemize}
%
% \subsubsection*{09/11/2003 v1.04}
% \begin{itemize}
% \item Nouvelle fonctionnalité : accès simplifié à la couleur courante dans
%  les expressions de couleur.
% \item Nouvelle option : \oOption{override} pour remplacer |\definecolor| par 
%  |\xdefinecolor|.
% \item Nouvelle commande : |\tracingcolors| pour afficher dans le fichier
%  journal les informations spécifiques aux couleurs.
%  information.
% \end{itemize}
%
% \subsubsection*{21/09/2003 v1.03}
% \begin{itemize}
% \item Changement : contournement du comportement étrange de certains
%  pilotes. 
% \item Nouvelle fonctionnalité : partage de pilote avec \Package{hyperref}.
% \end{itemize}
%
% \subsubsection*{19/09/2003 v1.02}
% \begin{itemize}
% \item Changement : |\extractcolorspec| et |\colorlet| acceptent maintenant
%  aussi les séries de couleur comme arguments.
% \end{itemize}
%
% \subsubsection*{15/09/2003 v1.01}
% \begin{itemize}
% \item Nouvelle fonctionnalité : |\definecolorseries| et apparentés.
% \item Documentation : retrait de certains effets indésirables liés à 
%  \Package{doc}.
% \item Réorganisation du code : tous les outils de calculs sont placés en un
%  seul endroit.
% \item Corrections d'erreur :
%   \begin{itemize}
%   \item |\@rdivide|: ajout d'un |\relax| pour résouder le problème des
%    numérateurs négatifs ;
%   \item |\rowc@l@rs|: remplacement de |\@ifempty| par |\@ifxempty|.
%   \end{itemize}
% \end{itemize}
%
% \subsubsection*{09/09/2003 v1.00}
% \begin{itemize}
% \item Première version publiée.
% \end{itemize}
%
% \end{multicols}
% \end{adjustwidth}
% \StopEventually{}
% \clearpage
%
% \section{The Implementation}
%
% Some commands have been copied unchanged from \cite{color} (Copyright (C) 1994--1999 \People{David P.}{Carlisle}), which is part of the Standard \LaTeX{} `Graphics Bundle'.
% Additionally, also some parts of the code documentation were copied from \cite{color}.
%
%
%
% \subsection{Preparation}
%
% \subsubsection{File identification}
%
% \renewcommand*\MacroFont{\footnotesize\ttfamily}
% \renewcommand*\AltMacroFont{\footnotesize\ttfamily\slshape}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \fbox{\MacroFont\string\ProvidesPackage\string{xcolor\string}[\XCfiledate\space\XCfileversion\space LaTeX color extensions (UK)]}
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
%    \end{macrocode}
%
%
% \subsubsection{Safety first}
%
% \begin{macro}{\XC@catcodes}
% Save catcodes for later restore:
%    \begin{macrocode}
\expandafter\edef\csname XC@catcodes\endcsname
 {\catcode33 \the\catcode33 % !
  \catcode34 \the\catcode34 % "
  \catcode39 \the\catcode39 % '
  \catcode42 \the\catcode42 % *
  \catcode44 \the\catcode44 % ,
  \catcode45 \the\catcode45 % -
  \catcode46 \the\catcode46 % .
  \catcode47 \the\catcode47 % /
  \catcode58 \the\catcode58 % :
  \catcode59 \the\catcode59 % ;
  \catcode60 \the\catcode60 % <
  \catcode61 \the\catcode61 % =
  \catcode62 \the\catcode62 % >
  \catcode63 \the\catcode63 % ?
  \catcode64 \the\catcode64 % @
  \catcode94 \the\catcode94 % ^
  \catcode96 \the\catcode96 % `
  \catcode`\noexpand\^^A\the\catcode`\^^A\relax}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\catcode64 11 %
\@makeother\! \@makeother\" \@makeother\' \@makeother\* \@makeother\,
\@makeother\- \@makeother\. \@makeother\/ \@makeother\: \@makeother\;
\@makeother\< \@makeother\= \@makeother\> \@makeother\? \@makeother\`
\catcode94 7 %
\catcode`\^^A=14 %
%    \end{macrocode}
%
%
% \subsubsection{Constants}
%
%  \begin{macro}{\XC@@}
% Macro consisting of the macro |\\XC@@|, serves as a delimiter.
%    \begin{macrocode}
\edef\XC@@{\expandafter\noexpand\csname\string\XC@@\endcsname}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsubsection{Switches}
%
%  \begin{macro}{\ifcolors@}
% This boolean can be tested by higher level macros that may want to alter their behaviour if a monochrome driver is being used.
%    \begin{macrocode}
\newif\ifcolors@ \colors@true
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\ifcolorerrors@}
% Controls whether missing color models/names result in error or warning messages.
%    \begin{macrocode}
\newif\ifcolorerrors@
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\ifglobalcolors}
% Controls whether |\definecolor| and |\colorlet| generate global or local color definitions.
%    \begin{macrocode}
\newif\ifglobalcolors \globalcolorsfalse
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifdefinecolors}
% Controls whether |\definecolorset| should \emph{define} or \emph{prepare} colors.
%    \begin{macrocode}
\newif\ifdefinecolors \definecolorstrue
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifconvertcolorsD}
% \begin{macro}{\ifconvertcolorsU}
% Control whether conversion to target models take place at \emph{definition} time (|\ifconvertcolorsD|) and/or \emph{usage} (|\ifconvertcolorsU|).
%    \begin{macrocode}
\newif\ifconvertcolorsD
\newif\ifconvertcolorsU
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ifblendcolors}
% \begin{macro}{\ifmaskcolors}
% Control whether colors are to be blended and/or masked at display time.
%    \begin{macrocode}
\newif\ifblendcolors
\newif\ifmaskcolors
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ifXC@@fbox}
% \begin{macro}{\ifXC@@tst}
% Auxiliary test variables.
%    \begin{macrocode}
\newif\ifXC@@fbox \XC@@fboxtrue
\newif\ifXC@@tst
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Error handling}
%
% \begin{macro}{\c@lor@error}
% Multi-purpose error handler (issues warnings instead of errors if the \Option{hideerrors} option is used).
% This command is used already in the options section.
%    \begin{macrocode}
\def\c@lor@error#1%
 {\ifcolorerrors@\PackageError{xcolor}{Undefined color #1}\@ehc
  \else\PackageWarning{xcolor}{Undefined color #1}\fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Macro concatenation}
%
% \begin{macro}{\XC@append}
%   \marg{cmd}\marg{token list}\\
% Append \Meta{token list} to the definition of \Meta{cmd}.
% This command is used already in the options section.
%    \begin{macrocode}
\def\XC@append#1#2%
 {\ifx#1\@undefined\def#1{#2}\else\ifx#1\relax\def#1{#2}\else
  \toks@\expandafter{#1#2}\edef#1{\the\toks@}\fi\fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Macro definition}
%
% The following |\XC@let@..| commands mimic \LaTeX3's coding syntax for the type of arguments used:
% the `c' type is for brace delimited arguments which turn into a control sequence inside |\csname ... \endcsname|, whereas `N' is just a single token.
% Thanks to \People{Morten}{H\o gholm} for pointing me to that.
%
% \begin{macro}{\XC@let@cc}
%   \marg{target character string}\marg{source character string}\\
% Performs |\let\|\Meta{target character string}|=\|\Meta{source character string}.
%    \begin{macrocode}
\def\XC@let@cc#1{\expandafter\XC@let@Nc\csname#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@namelet}
% This is provided for compatibility reasons only, although deprecated because of a name clash with \Package{memoir}.
%    \begin{macrocode}
\providecommand*\@namelet[1]{\expandafter\XC@let@Nc\csname#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@let@Nc}
%   \marg{target name}\marg{source character string}\\
% Performs |\let|\Meta{target name}|=\|\Meta{source character string}.
% Formerly called |\@@namelet|.
%    \begin{macrocode}
\def\XC@let@Nc#1#2{\expandafter\let\expandafter#1\csname#2\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@let@cN}
%   \marg{target character string}\marg{source name}\\
% Performs |\let\|\Meta{target character string}|=|\Meta{source name}.
%    \begin{macrocode}
\def\XC@let@cN#1{\expandafter\let\csname#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@namexdef}
%   \marg{character string}\marg{code}\\
% Performs |\xdef\|\Meta{character string}|{|\Meta{code}|}|.
% Similar to the \LaTeX{} internal |\@namedef| command.
%    \begin{macrocode}
\def\@namexdef#1{\expandafter\xdef\csname #1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\aftergroupdef}
% \begin{macro}{\aftergroupedef}
%   \marg{cmd}\marg{code}\\
% Defines \meta{cmd} with the first-level or complete expansion of \meta{code} after the end of the current group.
%    \begin{macrocode}
\def\aftergroupdef#1#2%
 {\expandafter\endgroup\expandafter\def\expandafter#1\expandafter{#2}}
\def\aftergroupedef#1#2%
 {\edef\@@tmp{\def\noexpand#1{#2}}\expandafter\endgroup\@@tmp}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\XC@edef}
% \begin{macro}{\XC@mdef}
% \begin{macro}{\XC@sdef}
%   \marg{cmd}\marg{code}\\
% Defines \Meta{cmd} as a safe expansion of \Meta{code}; needed for color expressions in certain languages.
% The second form is a streamlined version that takes only care of active `|/|' and `|:|' characters that may occur in \Meta{liste-modèle} and \Meta{liste-spéc} arguments.
% The third form defines a sanitized expansion without considering active characters.
% It is faster since it needs no grouping operation.
%    \begin{macrocode}
\begingroup
\catcode`\!=13 \catcode`\:=13 \catcode`\-=13 \catcode`\+=13
\catcode`\;=13 \catcode`\/=13 \catcode`\"=13 \catcode`\>=13
\gdef\XC@edef#1#2%
 {\begingroup
  \ifnum\catcode`\!=13 \edef!{\string!}\fi
  \ifnum\catcode`\:=13 \edef:{\string:}\fi
  \ifnum\catcode`\-=13 \edef-{\string-}\fi
  \ifnum\catcode`\+=13 \edef+{\string+}\fi
  \ifnum\catcode`\;=13 \edef;{\string;}\fi
  \ifnum\catcode`\"=13 \edef"{\string"}\fi
  \ifnum\catcode`\>=13 \edef>{\string>}\fi
  \edef#1{#2}\@onelevel@sanitize#1\aftergroupdef#1#1}
\gdef\XC@mdef#1#2%
 {\begingroup
  \ifnum\catcode`\/=13 \edef/{\string/}\fi
  \ifnum\catcode`\:=13 \edef:{\string:}\fi
  \edef#1{#2}\@onelevel@sanitize#1\aftergroupdef#1#1}
\endgroup
\def\XC@sdef#1#2{\edef#1{#2}\@onelevel@sanitize#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Conditional processing}
%
% \begin{macro}{\@ifxempty}
%   \marg{arg}\marg{empty}\marg{non-empty}\\
% Tests without expanding, whether the argument \Meta{arg} is empty and executes the following code accordingly; \Meta{arg} must not start with the token |\XC@@|.
% Can also be used within |\edef|.
%    \begin{macrocode}
\def\@ifxempty#1{\@@ifxempty#1\@@ifxempty\XC@@}
\def\@@ifxempty#1#2\XC@@
 {\ifx#1\@@ifxempty
  \expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@ifxcase}
%   \marg{cmd}|{{|\Meta[1]{cmd}|}{|\Meta[1]{code}|}...{|\Meta[n]{cmd}|}{|\Meta[n]{code}|}}|\marg{default code}\\
% Performs the test |\ifx|\Meta{cmd}\Meta[k]{cmd} for $k=1,\dots,n$.
% If for some $k$ the test is `true', then the attached code \Meta[k]{code} is executed.
% If all tests are `false', then \Meta{default code} is executed.
%    \begin{macrocode}
\long\def\XC@ifxcase#1#2#3%
 {\long\def\XC@if@##1##2%
   {\ifx#1##1%
      \toks@{##2}\expandafter\remove@to@nnil\else\expandafter\XC@if@\fi}%
  \XC@if@#2#1{#3}\@nnil\the\toks@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@ifcase}
%   \marg{str}|{{|\Meta[1]{str-list}|}{|\Meta[1]{code}|}...{|\Meta[n]{str-list}|}{|\Meta[n]{code}|}}|\marg{default code}\\
% Tests whether \Meta{str} appears in one of the comma-separated lists \Meta[k]{str-list}.
% Performs the test |\if|\Meta{str}\Meta[kl]{str} for $k=1,\dots,n$ and $l=1,\ldots,m_n$.
% If for some $k,l$ the test is `true', then the attached code \Meta[k]{code} is executed.
% If all tests are `false', then \Meta{default code} is executed.
%    \begin{macrocode}
\long\def\XC@ifcase#1#2#3%
 {\long\def\XC@if@##1##2%
   {\@expandtwoargs\in@{,#1,}{,##1,}\ifin@
      \toks@{##2}\expandafter\remove@to@nnil\else\expandafter\XC@if@\fi}%
  \XC@if@#2{#1}{#3}\@nnil\the\toks@}
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsection{Package options}
%
% \begin{macro}{\XC@@opt}
% Initialise the macro to hold the names of \emph{executed} \XCP{} options.
%    \begin{macrocode}
\def\XC@@opt{,}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@ifXCopt}
%   \marg{option}\marg{executed}\marg{not executed}\\
% Performs action dependent on whether a specific \XCP{} option has been executed or not.
%    \begin{macrocode}
\def\@ifXCopt#1%
 {\@expandtwoargs\in@{,#1,}{\XC@@opt}%
  \ifin@\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@@pkg}
% Initialise the macro to hold the names of packages that are to be loaded by \XC.
%    \begin{macrocode}
\let\XC@@pkg\relax
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DeclareOption}
% |\DeclareOption| has to be redefined in order to collect every executed package option in |\XC@@opt|.
% This is being restored immediately before |\ProcessOptions|; thus, other packages use the original definition.
%    \begin{macrocode}
\let\XC@declareoption\@declareoption
\long\def\@declareoption#1#2%
 {\XC@declareoption{#1}{\edef\XC@@opt{\XC@@opt#1,}#2}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Color model selection}
%
% \begin{macro}{\selectcolormodel}
%   \marg{num model}\\
% Determines the target model for color definitions with |\definecolor| and friends.
%    \begin{macrocode}
\def\selectcolormodel#1%
 {\@ifundefined{XC@mod@#1}%
   {\c@lor@error{target model `#1'}}%
   {\expandafter\ifx\csname XC@mod@#1\endcsname\XC@mod@natural
      \def\XC@tgt@mod##1{##1}\convertcolorsDfalse\convertcolorsUfalse
    \else\expandafter\ifx\csname XC@mod@#1\endcsname\XC@mod@named
      \c@lor@error{target model `#1'}
    \else
      \edef\XC@tgt@mod##1{#1}\convertcolorsDtrue\convertcolorsUtrue
    \fi\fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@mod@Hsb}
% \begin{macro}{\XC@mod@tHsb}
% \begin{macro}{\XC@mod@ignore}
% \begin{macro}{\XC@mod@named}
% \begin{macro}{\XC@mod@ps}
% \begin{macro}{\XC@mod@wave}
% \begin{macro}{\XC@mod@natural}
% \begin{macro}{\XC@mod@rgb}
% \begin{macro}{\XC@mod@cmy}
% \begin{macro}{\XC@mod@cmyk}
% \begin{macro}{\XC@mod@hsb}
% \begin{macro}{\XC@mod@gray}
% \begin{macro}{\XC@mod@RGB}
% \begin{macro}{\XC@mod@HTML}
% \begin{macro}{\XC@mod@HSB}
% \begin{macro}{\XC@mod@Gray}
% Put model names into commands and define package options
% \Option{natural}, \Option{rgb}, \Option{cmy}, \Option{cmyk}, \Option{hsb}, \Option{gray}, \Option{RGB}, \Option{HTML}, \Option{HSB}, \Option{Gray}.
%    \begin{macrocode}
\@tfor\@@tmp:={Hsb}{tHsb}{ignore}{named}{ps}{wave}\do
 {\expandafter\XC@sdef\csname XC@mod@\@@tmp\endcsname{\@@tmp}}
%    \end{macrocode}
%
%    \begin{macrocode}
\@tfor\@@tmp:={natural}{rgb}{cmy}{cmyk}{hsb}{gray}{RGB}{HTML}{HSB}{Gray}\do
 {\expandafter\XC@sdef\csname XC@mod@\@@tmp\endcsname{\@@tmp}%
  \edef\@@tmp
   {\noexpand\DeclareOption{\@@tmp}{\noexpand\selectcolormodel{\@@tmp}}}%
  \@@tmp}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% The \Option{monochrome} option should be used \emph{in addition} to one of the standard driver options.
%    \begin{macrocode}
\DeclareOption{monochrome}
 {\ExecuteOptions{hideerrors}%
  \AtEndOfPackage
   {\colors@false
    \def\set@color{\c@lor@special\m@ne
      {color push \current@color}\aftergroup\reset@color}%
    \def\reset@color{\c@lor@special\m@ne{color pop}}%
    \def\set@page@color{\c@lor@special\m@ne{background \current@color}}}}
%    \end{macrocode}
%
%
% \subsubsection{Sets of predefined colors}
%
% \begin{macro}{\XC@@names}
% Initialise the macro to hold the names of files that contain predefined colors; these files are loaded near to the end of this package.
%    \begin{macrocode}
\let\XC@@names\relax
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\colornameprefix}
% \begin{macro}{\XC@@nameprefix}
% Initialise the macro to hold the string that is prefixed to driver-specific color names.
% Save the value for later restore.
%    \begin{macrocode}
\providecommand*\colornameprefix{XC@}
\let\XC@@nameprefix\colornameprefix
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\XC@declarenames}
%   \marg{base name}\marg{file name}\marg{initial commands}\\
% Construct package options for color names.
%    \begin{macrocode}
\def\XC@declarenames#1#2#3%
 {\DeclareOption{#1}{\XC@append\XC@@names
   {#3\definecolorstrue\input{#2.def}\definecolorstrue
    \let\colornameprefix\XC@@nameprefix}}
  \DeclareOption{#1*}{\XC@append\XC@@names
   {#3\definecolorsfalse\input{#2.def}\definecolorstrue
    \let\colornameprefix\XC@@nameprefix}}}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\XC@declarenames{dvipsnames}{dvipsnam}{\let\colornameprefix\@empty}
\XC@declarenames{svgnames}{svgnam}{}
\XC@declarenames{x11names}{x11nam}{}
\XC@declarenames{hksnames}%
 {hks\ifcase\paperquality k\or n\or k\or z\else n\fi nam}{}
\XC@declarenames{pmsnames}{pmsnam}{}
\XC@declarenames{ralnames}{ralnam}{}
%    \end{macrocode}
%
%
% \subsubsection{Support for other packages}
%
% Use this option to load \People{David P.}{Carlisle}'s \Package{colortbl} package:
%    \begin{macrocode}
\DeclareOption{table}{\XC@append\XC@@pkg{\RequirePackage{colortbl}}}
%    \end{macrocode}
%
% Use this option to load \People{Heiko}{Oberdiek}'s \Package{pdfcolmk} package:
%    \begin{macrocode}
\DeclareOption{fixpdftex}{\XC@append\XC@@pkg{\RequirePackage{pdfcolmk}}}
%    \end{macrocode}
%
% \begin{macro}{\KV@Hyp@xcitebordercolor}
% \begin{macro}{\KV@Hyp@xfilebordercolor}
% \begin{macro}{\KV@Hyp@xlinkbordercolor}
% \begin{macro}{\KV@Hyp@xmenubordercolor}
% \begin{macro}{\KV@Hyp@xpagebordercolor}
% \begin{macro}{\KV@Hyp@xrunbordercolor}
% \begin{macro}{\KV@Hyp@xurlbordercolor}
% \begin{macro}{\KV@Hyp@xpdfborder}
% Use this option to define the extended keys for the \Package{hyperref} package.
%    \begin{macrocode}
\DeclareOption{hyperref}
 {\@tfor\@@tmp:={cite}{file}{link}{menu}{page}{run}{url}\do
   {\expandafter\edef\csname KV@Hyp@x\@@tmp bordercolor\endcsname #1%
     {\noexpand\XC@bordercolor{\@@tmp}{#1}}}%
  \AtEndOfPackage
   {\GetGinDriver\def\KV@Hyp@xpdfborder#1{\edef\@pdfborder{#1}}%
    \@tfor\@@tmp:={dvips}\do
     {\ifx\GinDriver\@@tmp
       \def\KV@Hyp@xpdfborder#1%
        {\edef\@pdfborder{#1}\expandafter\XC@pdfborder\@pdfborder\relax}%
      \@break@tfor\fi}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Driver options}
%
% \begin{macro}{\Gin@driver}
% Initialise the macro to hold the driver file name.
%    \begin{macrocode}
\providecommand*\Gin@driver{}
%    \end{macrocode}
%
% Drivers that come with their individual definition files:
%    \begin{macrocode}
\@tfor\@@tmp:={dvipdf}{dvipdfm}{dvipdfmx}{dvips}{dvipsone}{dviwin}%
              {emtex}{luatex}{pctex32}{pctexhp}{pctexps}{pctexwin}{pdftex}%
              {tcidvi}{textures}{truetex}{vtex}{xetex}\do
 {\edef\@@tmp{\noexpand\DeclareOption{\@@tmp}%
    {\def\noexpand\Gin@driver{\@@tmp.def}}}%
  \@@tmp}
%    \end{macrocode}
%
% Drivers that are derivatives of others:
%    \begin{macrocode}
\DeclareOption{dviwindo}{\ExecuteOptions{dvipsone}}
\DeclareOption{oztex}{\ExecuteOptions{dvips}}
\DeclareOption{xdvi}{\ExecuteOptions{dvips,monochrome}}
%    \end{macrocode}
%
% Options used by (some) drivers.
%    \begin{macrocode}
\DeclareOption{xcdraw}{\def\XC@@xcd@{1}}
\DeclareOption{noxcdraw}{\def\XC@@xcd@{-1}}
\DeclareOption{fixinclude}{\def\XC@@xcf@{1}}
\DeclareOption{prologue}{\def\XC@@xcp@{1}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Other options}
%
% Switch to original kernel |\fbox| command instead of new \XC{} version.
%    \begin{macrocode}
\DeclareOption{kernelfbox}{\XC@@fboxfalse}
%    \end{macrocode}
%
% These options control how non-existing colors are treated:
%    \begin{macrocode}
\DeclareOption{showerrors}{\colorerrors@true}
\DeclareOption{hideerrors}{\colorerrors@false}
%    \end{macrocode}
%
% The \Option{debugshow} option turns on debugging info (perhaps).
%    \begin{macrocode}
\DeclareOption{debugshow}{\catcode`\^^A=9 \let\GDebug\typeout}
%    \end{macrocode}
%
% All other options (including \LC's \oOption{usenames}, \oOption{nodvipsnames}) are being ignored.
%    \begin{macrocode}
\DeclareOption*%
 {\PackageInfo{xcolor}{Package option `\CurrentOption' ignored}}
%    \end{macrocode}
%
% Choose default options:
%    \begin{macrocode}
\def\XC@@xcd@{-1}
\def\XC@@xcf@{-1}
\def\XC@@xcp@{-1}
\ExecuteOptions{natural,showerrors}
%    \end{macrocode}
%
%
% \subsubsection{Processing options}
%
% A local configuration file may declare more options.
% It should also make one driver option the default, by calling |\ExecuteOptions| with the appropriate option.
%    \begin{macrocode}
\InputIfFileExists{color.cfg}{}{}
%    \end{macrocode}
%
% After the options are processed, load the appropriate driver file.
% If a site wants a default driver (e.g., \Option{dvips}) it just needs to put |\ExecuteOptions{dvips}| in a \File{color.cfg} file.
%    \begin{macrocode}
\let\@declareoption\XC@declareoption
\ProcessOptions\relax
%    \end{macrocode}
%
% \begin{macro}{\XC@@drv}
% Holds the name of the loaded driver (without \File{.def} extension).
%    \begin{macrocode}
\edef\Gin@driver{\Gin@driver}
\if!\Gin@driver!
  \PackageError{xcolor}
    {No driver specified}
    {You should make a default driver option in a file \MessageBreak
     color.cfg\MessageBreak
     eg: \protect\ExecuteOptions{dvips}}
\else
  \PackageInfo{xcolor}{Driver file: \Gin@driver}
  \@ifundefined{ver@\Gin@driver}{\input{\Gin@driver}}{}
  \def\@@tmp#1.def{\def\XC@@drv{#1}}
  \expandafter\@@tmp\Gin@driver
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@@xcd@}
% \begin{macro}{\XC@@xcf@}
% \begin{macro}{\XC@@xcp@}
% These are used firstly by the \Option{xcdraw} and \Option{prologue} options, indicating whether either option is switched on or off.
% Secondly, the macros serve as test variables for |\ifcase| expressions, storing the intended type of output: $-1=\text{dvi}, 0=\text{ps}, 1=\text{pdf}$.
%    \begin{macrocode}
\count@\XC@@xcd@ \advance\count@\XC@@xcf@ \advance\count@\XC@@xcp@\relax
\ifnum\count@>-3
%    \end{macrocode}
%
% \begin{macro}{\XC@special}
%   \meta{code}\\
% Driver-specific variant of |\special|.
% Even if the intended type of output is the same (e.g., pdf), the |\special| commands may differ.
%    \begin{macrocode}
  \XC@ifcase\XC@@drv
   {{dvips,pctex32}%
    {\def\@tempa{0}
     \def\XC@special#1{\special{ps:XC!b}\special{"#1}\special{ps:XC!e}}}%
    {pdftex}%
    {\def\@tempa{1}
     \def\XC@special#1{\pdfliteral{ q #1 Q }}}%
    {luatex}%
    {\def\@tempa{1}
     \ifnum\luatexversion<87%
       \def\XC@special#1{\pdfliteral{ q #1 Q }}%
     \else%
       \def\XC@special#1{\pdfextension literal{ q #1 Q }}%
     \fi}%
    {dvipdfm}%
    {\def\@tempa{1}
     \def\XC@special#1{\special{pdf: content #1}}}%
   }{\def\@tempa{-1}}
%    \end{macrocode}
% \end{macro}
%
% Since the options are independent of each other, we have to adjust the affiliated test variables independently as well.
%    \begin{macrocode}
  \ifnum\XC@@xcd@>\m@ne\let\XC@@xcd@\@tempa\fi
  \ifnum\XC@@xcf@>\m@ne\let\XC@@xcf@\@tempa\fi
  \ifnum\XC@@xcp@>\m@ne\let\XC@@xcp@\@tempa\fi
%    \end{macrocode}
%
%    \begin{macrocode}
  \ifnum\@tempa=0 \AtBeginDvi{\special{header=xcolor.pro}}\fi
  \ifcase\XC@@xcf@
    \AtBeginDvi{\special{! XCfixnormalscale}}
  \fi
  \ifcase\XC@@xcp@
    \AtBeginDvi{\special{header=\jobname.xcp}}
    \newwrite\XC@@xcp\immediate\openout\XC@@xcp=\jobname.xcp
    \immediate\write\XC@@xcp{\@percentchar!}
    \immediate\write\XC@@xcp{TeXDict begin}
    \AtEndDocument
     {\immediate\write\XC@@xcp{end}\immediate\closeout\XC@@xcp}
  \fi
%    \end{macrocode}
%
% End of driver-specific part.
%    \begin{macrocode}
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Required packages}
%
% All packages within the list |\XC@pkg|
% receive a pretended \LC.
%    \begin{macrocode}
\@namedef{ver@color.sty}{1999/02/16}
\XC@@pkg
%    \end{macrocode}
%
%
% \subsection{Macro tools}
%
% \subsubsection{General tools}
%
% \begin{macro}{\@secondoffive}
% \begin{macro}{\@thirdoffive}
% Argument grabbing, similar to \LaTeX{} kernel.
%    \begin{macrocode}
\long\def\@secondoffive#1#2#3#4#5{#2}
\long\def\@thirdoffive#1#2#3#4#5{#3}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xglobal}
% \begin{macro}{\xglobal@test}
% If |\foo| occurs in the token list |\xglobal@@|, then the command |\xglobal\foo| will set the switch |\xglobal@true| which can be used inside |\foo| to determine whether certain definitions are to be made explicitely global.
% |\foo| is responsible for resetting |\xglobal@false| in order to avoid side effects.
% To include |\foo| in the magic list, simply say |\XC@append\xglobal@list{\foo}|.
% If |\foo| is not in the list, |\xglobal\foo| will behave like |\global\foo|, thus |\xglobal\let| will be like |\global\let| etc.
%    \begin{macrocode}
\def\xglobal{\xglobal@stop\begingroup\futurelet\@@tok\xglobal@test}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\xglobal@test
 {\expandafter\@tfor\expandafter\@@tmp
   \expandafter:\expandafter=\xglobal@list\do
    {\expandafter\ifx\@@tmp\@@tok
       \aftergroup\let\aftergroup\xglobal@\@break@tfor\fi}%
  \endgroup\global}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xglobal@stop}
% Resetting |\xglobal@|.
%    \begin{macrocode}
\def\xglobal@stop{\let\xglobal@\@empty}
\xglobal@stop
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xglobal@list}
% Initial list of commands that may be prefixed by |\xglobal|.
%    \begin{macrocode}
\def\xglobal@list
 {\definecolor\definecolors\definecolorset\colorlet\providecolor
  \providecolors\providecolorset\blendcolors\maskcolors
  \substitutecolormodel}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xglobalize@}
% Globalisation command: makes a local definition global.
%    \begin{macrocode}
\def\xglobalize@#1{\ifx\xglobal@\global\global\let#1#1\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\GetGinDriver}
% Transforms the chosen driver option ready for \Package{hyperref}.
%    \begin{macrocode}
\def\GetGinDriver
 {\@tempswafalse
  \@tfor\@@tmp:={dvips}{luatex}{pdftex}{dvipdf}{dvipdfm}{dvipsone}{vtex}{textures}%
  \do{\ifx\XC@@drv\@@tmp\@tempswatrue\@break@tfor\fi}%
  \edef\GinDriver{\if@tempswa\XC@@drv\else hypertex\fi}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{String manipulation}
%
% \begin{macro}{\@hex@Hex}
%   \Meta{hex-string}|\relax|\\
% Converts \Meta{hex-string} to a string where all letters a--f are changed into their uppercase variants.
% All other letters are left unchanged.
% May be used inside |\edef|.
%    \begin{macrocode}
\def\@hex@Hex#1{\ifx#1\relax\else\expandafter\@hex@@Hex\expandafter#1\fi}
\def\@hex@@Hex#1%
 {\if a#1A\else \if b#1B\else \if c#1C\else \if d#1D\else
  \if e#1E\else \if f#1F\else #1\fi\fi\fi\fi\fi\fi \@hex@Hex}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@strip@comma}
%   \Meta[1]{string}|,|\Meta[2]{string}|,...,|\Meta[n]{string}|,,\@nnil|\\
% Converts a comma-separated list into a space-separated list.
% The evaluation stops at the first empty argument, skipping all remaining tokens until (and including) |\@nnil|.
% Thus, the list to be converted should always contain at least one `|,,|' sequence.
% May be used inside |\edef|.
%    \begin{macrocode}
\def\XC@strip@comma#1,#2%
 {\ifx,#2%
    #1\expandafter\remove@to@nnil\else#1 \expandafter\XC@strip@comma\fi
  #2}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@replace}
%   \marg{cmd}\marg{search}\marg{replace}\\
% Replace all occurences of \meta{search} within the first-level expansion of \meta{cmd} by \meta{replace} and save the result in \meta{cmd}.
% The replacement is recursive, so don't put the search pattern into the replacement text!
% Note that this macro is incapable of seeing `into' braces.
% The code and its explanation is taken from \People{Donald}{Arseneau}'s \Package{url} package \cite{url}, with only minor changes and renamings applied.
% The original name of the game is |\Url@Edit|.
% Thanks to \People{Donald}{Arseneau} for giving me valuable hints.
%    \begin{macrocode}
{\catcode`Q=3
 \gdef\XC@replace#1#2#3%
  {\begingroup
%    \end{macrocode}
%
% If finished, then remove |\@empty|'s and redefine macro else, re-iterate.
%    \begin{macrocode}
   \def\XC@repl@ce##1#2##2Q##3%
    {\@ifxempty{##2}{\XC@r@pl@ce##1Q}{\XC@repl@ce##1##3##2Q{##3}}}%
   \def\XC@r@pl@ce##1\@empty Q%
    {\expandafter\endgroup\expandafter\def\expandafter#1\expandafter{##1}}%
%    \end{macrocode}
%
% The leading |\@empty| preserves braces, as does the trailing pattern.
%    \begin{macrocode}
   \expandafter\XC@repl@ce\expandafter\@empty #1\@empty#2Q{#3}}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@clean}
%   \marg{cmd}\\
% Makes a proper comma-separated list from \meta{cmd}'s contents and stores it again in \meta{cmd}.
% Firstly, all commas are changed into spaces, secondly, `|. |' strings are changed to spaces.
% Thirdly, non-trailing spaces are turned into commas (using a technique similar to \LaTeX's |\zap@space|).
% Finally, the two leading commas are gobbled.
% For example, `| 1 2. ,  3 |' is mapped to `|1,2,3|'.
%    \begin{macrocode}
\def\XC@clean#1%
 {\edef#1{ #1 }%
  \XC@cle@n#1,{ }\XC@cle@n#1{. }{ }\XC@cle@n#1{ },%
  \edef#1{\expandafter\@gobbletwo#1}}
\def\XC@cle@n#1#2#3%
 {\def\XC@cl@@n##1#2##2{#3##1\ifx##2\@empty\else\expandafter\XC@cl@@n\fi##2}%
  \edef#1{\expandafter\XC@cl@@n#1#2\@empty}}%
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Scalar arithmetic}
%
% \begin{macro}{\rdivide}
%   \marg{dimension register}\marg{div}\\
% Divides \Meta{dimension register} by a real number \Meta{div}, which may also be buried in a dimension (register), and stores the resulting rounded dimension in \Meta{dimension register}.
% The denominator \Meta{div} is assumed to be non-zero.
%    \begin{macrocode}
\def\rdivide#1#2%
 {\begingroup\toks@{#1}\edef\@@tmp{\noexpand\@tempdima\the#1}%
  \@defaultunits\@tempdimb=#2pt\relax\@nnil \@@tmp\relax
  \ifdim\@tempdima<\z@ \@tempdima-\@tempdima\def\@sign{-}\else
    \def\@sign{}\fi
  \ifdim\@tempdimb<\z@ \@tempdimb-\@tempdimb\edef\@sign{\@sign-}\fi
  \ifdim\@tempdima<.1\maxdimen \ifdim\@tempdimb<.01\maxdimen
    \lshift\@tempdima \lshift\@tempdimb \fi\fi
  \@tempcnta=\@tempdima \@tempcntb=\@tempdimb
  \count@=\@tempcnta \divide\count@\@tempcntb
  \edef\@@tmp{\number\count@.}%
  \@tempswatrue  \@rdivide \@rdivide \@rdivide \@rdivide \@rdivide
  \@tempswafalse \@rdivide
  \dimen@\@@tmp\p@ \ifnum\count@>4\advance\dimen@1sp\fi
  \dimen@\@sign\dimen@
  \edef\@@tmp{\the\toks@\the\dimen@}%
  \expandafter\endgroup\@@tmp}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\@rdivide
 {\multiply\count@\@tempcntb \advance\@tempcnta-\count@
  \multiply\@tempcnta10 \count@=\@tempcnta \divide\count@\@tempcntb
  \if@tempswa\edef\@@tmp{\@@tmp\number\count@}\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rmultiply}
%   \marg{dimension register}\marg{dec}\\
% Multiplies \Meta{dimension register} by \Meta{dec} and stores the resulting dimension in \Meta{dimension register}.
%    \begin{macrocode}
\def\rmultiply#1#2%
 {\begingroup
  \edef\@@mul{#2}\@tempdima\the#1\relax
  \afterassignment\@tempdimb\@tempcntb=\@@mul\p@
  \ifdim\@tempdima<\z@ \@tempdima-\@tempdima\def\@sign{-}\else
    \def\@sign{}\fi
  \ifnum\@tempcntb<\z@ \@tempcntb-\@tempcntb\edef\@sign{\@sign-}\fi
  \lshift\@tempdima \dimen@\z@
  \expandafter\@rmultiply\@@mul.0.\@nil
  \advance\dimen@\@tempcntb\@tempdima \rshift\dimen@
  \dimen@\@sign\dimen@
  \edef\@@tmp{#1\the\dimen@}%
  \expandafter\endgroup\@@tmp}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\@rmultiply#1.#2.#3\@nil
 {\def\@@tmp{}%
  \@tfor\@@mul:=#2\do
   {\edef\@@tmp
     {\advance\dimen@\@@mul\@tempdima \divide\dimen@10 \@@tmp}}%
  \@@tmp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lshift}
% \begin{macro}{\llshift}
%   \marg{dimension register}\\
% Multiplies \Meta{dimension register} safely by 10 resp. 100.
%    \begin{macrocode}
\def\lshift#1{#1\expandafter\lshift@\the#1}
\def\llshift#1{\lshift#1\lshift#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lshiftnum}
% \begin{macro}{\llshiftnum}
%   \marg{decimal number}\\
% Multiplies \Meta{decimal number} by 10 resp. 100.
%    \begin{macrocode}
\def\lshiftnum#1{\expandafter\lshiftnum@#1.00.:}
\def\lshiftnum@#1.#2#3.#4:{#1#2\ifnum0#3>\z@.#3\fi}
\def\llshiftnum#1{\expandafter\llshiftnum@#1\@empty.00.:}
\def\llshiftnum@#1.#2#3#4.#5:%
 {#1#2\ifnum0#3>\z@#3\else0\fi\ifnum0#4>\z@.#4\fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lshiftset}
% \begin{macro}{\llshiftset}
%   \marg{dimension register}\marg{decimal number}\\
% Multiplies \Meta{decimal number} by 10 resp. 100 and puts it into \Meta{dimension register}.
%    \begin{macrocode}
\def\lshiftset#1#2{\edef\@@XC{\noexpand\lshiftnum{#2}}#1\@@XC\p@}
\def\llshiftset#1#2{\edef\@@XC{\noexpand\llshiftnum{#2}}#1\@@XC\p@}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\rshift}
% \begin{macro}{\rrshift}
%   \marg{dimension register}\\
% Divides \Meta{dimension register} safely by 10 resp. 100.
%    \begin{macrocode}
\def\rshift#1{#1\expandafter\rshift@\the#1}
\def\rrshift#1{\rshift#1\rshift#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lshift}
% \begin{macro}{\llshift}
%   \marg{dec}\\
% Multiplies \Meta{dec}, which may be either a number or something like |\the\dimen@|, safely by 10 resp. 100.
% The following definitions are similar to the way how |\strip@pt| is defined in the \LaTeX{} kernel.
%    \begin{macrocode}
\begingroup
\catcode`P=12
\catcode`T=12
\lowercase
 {\def\@@tmp{\def\lshift@##1.##2##3PT{##1##2\ifnum0##3>\z@.##3\fi\p@}
             \def\rshift@##1.##2PT{\rshift@@##1\relax##2\p@}}}
\expandafter\endgroup\@@tmp
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\def\rshift@@#1#2%
 {\ifx#2\relax.#1\else#1\expandafter\rshift@@\expandafter#2\fi}
%    \end{macrocode}
%
%
% \subsubsection{Vector arithmetic}
%
% \begin{macro}{\XC@inflate}
%   \marg{core model}\marg{first}\marg{second}\marg{cmd}\\
% Constructs an 8-dimensional vector based on two vectors \Meta{first}, \Meta{second} (of common dimension $1,3,4$) and an underlying color model (stored in the macro \Meta{core model}).
% The resulting vector is stored in \Meta{cmd}.
%    \begin{macrocode}
\def\XC@inflate#1#2#3#4%
 {\edef#4{#2,\ifx#1\XC@mod@cmyk #3\else
             \ifx#1\XC@mod@gray ,,,#3,,,\else ,#3,\fi\fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@vec}
%   \Meta{a}|,|\Meta{b}|,|\Meta{c}|,|\Meta{d}|,|\Meta{a'}|,|\Meta{b'}|,|\Meta{c'}|,|\Meta{d'}|,|\marg{cmd}\\
% Generic vector calculation for two vectors (of common dimension $1,3,4$), puts the result into \Meta{cmd}.
%    \begin{macrocode}
\def\XC@vec#1,#2,#3,#4,#5,#6,#7,#8,#9%
 {\def\@@tmp{}%
  \XC@vec@{#1}{#5}%
  \ifx,#2,\else
  \XC@vec@{#2}{#6}\XC@vec@{#3}{#7}\ifx,#4,\else\XC@vec@{#4}{#8}\fi\fi
  \aftergroupdef#9\@@tmp}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@vec@@{\edef\@@tmp{\ifx\@@tmp\@empty\else\@@tmp,\fi\strip@pt\dimen@}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@add}
%   \Meta{a}|,|\Meta{b}|,|\Meta{c}|,|\Meta{d}|,|\Meta{a'}|,|\Meta{b'}|,|\Meta{c'}|,|\Meta{d'}|,|\marg{cmd}\\
% Calculates the sum of two vectors (of common dimension $1,3,4$) and puts it into \Meta{cmd}.
%    \begin{macrocode}
\def\XC@add{\begingroup \let\XC@vec@\XC@add@ \XC@vec}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@add@#1#2%
 {\llshiftset\dimen@{#1}\llshiftset\@tempdima{#2}%
  \advance\dimen@\@tempdima \rrshift\dimen@ \XC@vec@@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@sub}
%   \Meta{a}|,|\Meta{b}|,|\Meta{c}|,|\Meta{d}|,|\Meta{a'}|,|\Meta{b'}|,|\Meta{c'}|,|\Meta{d'}|,|\marg{cmd}\\
% Calculates the difference of two vectors (of common dimension $1,3,4$) and puts it into \Meta{cmd}.
%    \begin{macrocode}
\def\XC@sub{\begingroup \let\XC@vec@\XC@sub@ \XC@vec}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@sub@#1#2{\XC@add@{#1}{-#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@mul}
%   \Meta{a}|,|\Meta{b}|,|\Meta{c}|,|\Meta{d}|,|\Meta{a'}|,|\Meta{b'}|,|\Meta{c'}|,|\Meta{d'}|,|\marg{cmd}\\
% Calculates the (component-wise) product of two vectors (of common dimension $1,3,4$) and puts it into \Meta{cmd}.
%    \begin{macrocode}
\def\XC@mul{\begingroup \let\XC@vec@\XC@mul@ \XC@vec}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@mul@#1#2%
 {\llshiftset\dimen@{#1}\rmultiply\dimen@{#2}\rrshift\dimen@ \XC@vec@@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@mix}
%   \Meta{a}|,|\Meta{b}|,|\Meta{c}|,|\Meta{d}|,|\Meta{a'}|,|\Meta{b'}|,|\Meta{c'}|,|\Meta{d'}|,|\marg{cmd}\\
% Calculates the linear interpolation of two color parameter vectors and puts it into \Meta{cmd}.
% The percentage parameter $p$ is input via register |\dimen@|.
%    \begin{macrocode}
\def\XC@mix%
 {\begingroup
  \@tempdima\dimen@ \@tempdimb100\p@ \advance\@tempdimb-\@tempdima
  \let\XC@vec@\XC@mix@ \XC@vec}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@mix@#1#2%
 {\dimen@#1\@tempdima \advance\dimen@#2\@tempdimb \rrshift\dimen@ \XC@vec@@}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@calc@}
%   \Meta{x}|,|\Meta{y}|,|\Meta{z}|,|\Meta{w}|,|\Meta{dummy}|:|\marg{function}\\
% Performs, dependent on the number of non-empty parameters, |\edef\@@tmp{|$f(x)$|}| or |\edef\@@tmp{|$f(x),f(y),f(z)$|}| or |\edef\@@tmp{|$f(x),f(y),f(z),f(w)$|}|, where the function $f$ is determined by the parameter \Meta{function}.
%    \begin{macrocode}
\def\XC@calc@#1,#2,#3,#4,#5:#6%
 {\XC@let@Nc\@@cmd{XC@calc#6}\@@cmd{#1}\@@tmp
  \ifx,#2,\else
    \@@cmd{#2}\@tempa\@@cmd{#3}\@tempb
    \ifx,#4,%
      \edef\@@tmp{\@@tmp,\@tempa,\@tempb}\else
      \@@cmd{#4}\@tempc\edef\@@tmp{\@@tmp,\@tempa,\@tempb,\@tempc}\fi\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcC}
%   \marg{x}\marg{cmd}\\
% \textbf Complement of $x$: performs |\def|\Meta{cmd}|{|$1-x$|}|.
% Yields exact results for all numbers within $[0,1]$ with 5 decimal digits.
%    \begin{macrocode}
\def\XC@calcC#1#2%
 {\llshiftset\dimen@{-#1}\advance\dimen@100\p@
  \rrshift\dimen@ \XC@calcN{\strip@pt\dimen@}#2}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcD}
%   \marg{x}\marg{cmd}\\
% \textbf Division of $x$ by $s$: performs |\def|\Meta{cmd}|{|$x/s$|}|.
% The parameter $s$ is input via |\@@scl|.
%    \begin{macrocode}
\def\XC@calcD{\XC@c@lcD\@@scl{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@c@lcD}
%   \marg{s}\marg{string}\marg{x}\marg{cmd}\\
% \textbf Division of $x$ by $s$, appending \Meta{string}: performs |\def|\Meta{cmd}|{|$x/s$\Meta{string}|}|.
%    \begin{macrocode}
\def\XC@c@lcD#1#2#3#4%
 {\dimen@#3\p@ \rdivide\dimen@{#1}\edef#4{\strip@pt\dimen@#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcF}
%   \marg{x}\marg{cmd}\\
% \textbf Format $x$ with 5 decimals, no range checks.
%    \begin{macrocode}
\def\XC@calcF#1#2%
 {\edef#2{#1}\expandafter\XC@c@lcF#2.0.:#2}
%    \end{macrocode}
%
% Special treatment of integer part because of so many possible variations ($---.0$, $7$, \dots).
%    \begin{macrocode}
\def\XC@c@lcF#1.#2.#3:#4%
 {\edef#4{\XC@c@@cR#200000:}%
  \dimen@#1.5\p@ \afterassignment\dimen@\count@=\the\dimen@
  \edef#4%
   {\ifnum#4>0 \ifnum\count@=0 \ifdim#1.5\p@<\z@ -\fi\fi\fi
    \number\count@.#4}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcH}
%   \marg{x}\marg{cmd}\\
% \textbf Hexadecimal transformation of $x\in\{0,1,\dots,255\}$: performs |\def|\Meta{cmd}|{|$x_{16}$|}|.
%    \begin{macrocode}
\def\XC@calcH#1#2%
 {\count@#1 \divide\count@\sixt@@n \edef\XC@@tmp{\hexnumber@\count@}%
  \multiply\count@-\sixt@@n \advance\count@#1
  \edef#2{\XC@@tmp\hexnumber@\count@}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcM}
%   \marg{x}\marg{cmd}\\
% \textbf Multiplication of $x$ by $s$ plus rounding: performs |\def|\Meta{cmd}|{|$[s\cdot x+0.5]$|}|.
% The parameter $s$ is input via |\@@scl|.
%    \begin{macrocode}
\def\XC@calcM#1#2%
 {\dimen@#1\p@ \dimen@\@@scl\dimen@ \advance\dimen@.5\p@
  \afterassignment\dimen@\count@=\the\dimen@ \edef#2{\number\count@}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcN}
%   \marg{x}\marg{cmd}\\
% \textbf Normalisation of $x$: similar to |\XC@calcR|, but trailing zeros are eliminated.
%    \begin{macrocode}
\def\XC@calcN#1#2%
 {\XC@calcR{#1}#2\edef#2{\expandafter\XC@c@lcN#200000:}}
%    \end{macrocode}
%
% Gobble trailing zeros.
%    \begin{macrocode}
\def\XC@c@lcN#1.#200000#3:{#1\ifnum0#2=0 \else.#2\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcR}
%   \marg{x}\marg{cmd}\\
% \textbf Reduction of $x$ to the unit interval: performs |\def|\Meta{cmd}|{|$\min\{1,\max\{0,x\}\}$|}|.
% Numbers are output with 5 decimals.
% This could also be done using |\XC@calcF|, followed by a range check, but perhaps less efficiently.
%    \begin{macrocode}
\def\XC@calcR#1#2{\edef#2{#1}\edef#2{\expandafter\XC@c@lcR#2.0.:}}
%    \end{macrocode}
%
% Check interval.
%    \begin{macrocode}
\def\XC@c@lcR#1.#2.#3:%
 {\ifnum#10>0 1.00000\else 0.\ifnum#11<0 00000\else
  \XC@c@@cR#200000:\fi\fi}
%    \end{macrocode}
%
% Normalize to 5 digits.
%    \begin{macrocode}
\def\XC@c@@cR#1#2#3#4#5#6:{#1#2#3#4#5}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcS}
%   \marg{x}\marg{cmd}\\
% \textbf Scaling of $x$ by $s$: performs |\def|\Meta{cmd}|{|$s\cdot x$|}|.
% The parameter $s$ is input via |\@@scl|.
%    \begin{macrocode}
\def\XC@calcS{\XC@c@lcS\@@scl{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@c@lcS}
%   \marg{s}\marg{string}\marg{x}\marg{cmd}\\
% \textbf Scaling of $x$ by $s$, appending \Meta{string}: performs |\def|\Meta{cmd}|{|$s\cdot x$\Meta{string}|}|.
%    \begin{macrocode}
\def\XC@c@lcS#1#2#3#4%
 {\lshiftset\dimen@{#3}%
  \ifdim#1\p@<100\p@
    \dimen@\lshiftnum#1\dimen@ \rrshift\dimen@ \else
    \dimen@#1\dimen@ \rshift\dimen@ \fi
  \edef#4{\strip@pt\dimen@#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcT}
%   \marg{x}\marg{cmd}\\
% \textbf Translate $x$ by $a$ and cut to unit interval: performs |\def|\Meta{cmd}|{|$\min\{1,\max\{0,x+a\}\}$|}|.
% The parameter $a$ is input via |\@@arg|.
%    \begin{macrocode}
\def\XC@calcT#1#2%
 {\lshiftset\dimen@{#1}\advance\dimen@\lshiftnum\@@arg\p@ \rshift\dimen@
  \edef#2%
   {\ifdim\dimen@>\p@1\else\ifdim\dimen@<\z@0\else\strip@pt\dimen@\fi\fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@calcU}
%   \marg{x}\marg{cmd}\\
% \textbf Unit interval mapping of $x$: performs |\def|\Meta{cmd}|{|$x-[x]$|}| if $x\neq1$, $1$ otherwise.
%    \begin{macrocode}
\def\XC@calcU#1#2%
 {\dimen@#1\p@
  \ifdim\dimen@=\p@\else
    \afterassignment\dimen@\count@=\the\dimen@
    \relax\ifdim\dimen@=\z@\else
      \ifdim#1\p@<\z@ \dimen@-\dimen@ \advance\dimen@\p@ \fi
    \fi
  \fi
  \edef#2{\strip@pt\dimen@}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Color definition}
%
% \subsubsection{Constants}
%
% \begin{macro}{\rangeRGB}
% \begin{macro}{\rangeHSB}
% \begin{macro}{\rangeHsb}
% \begin{macro}{\rangetHsb}
% \begin{macro}{\rangeGray}
% Scaling ranges for `integer' and other special models:
%    \begin{macrocode}
\providecommand*\rangeRGB{255}
\providecommand*\rangeHSB{240}
\providecommand*\rangeHsb{360}
\providecommand*\rangetHsb{60,30;120,60;180,120;210,180;240,240}
\providecommand*\rangeGray{15}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\adjustUCRBG}
% Parameters for undercolor-removal (UCR) and black-generation (BG) during \Model{cmy} to \Model{cmyk} conversion:
%    \begin{macrocode}
\providecommand*\adjustUCRBG{1,1,1,1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\paperquality}
% Parameter for choosing different color sets according to the paper quality; yet supported only for the HKS colors.
%    \begin{macrocode}
\providecommand*\paperquality{1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\colorseriescycle}
% Default cycle length for color series:
%    \begin{macrocode}
\providecommand*\colorseriescycle{16}
%    \end{macrocode}
% \end{macro}
%
% Model-dependent base colors:
%    \begin{macrocode}
\def\XC@clr@rgb@white{1,1,1}
\def\XC@clr@cmy@white{0,0,0}
\def\XC@clr@cmyk@white{0,0,0,0}
\def\XC@clr@hsb@white{\@@hue,0,1}
\def\XC@clr@hsb@gray{\@@hue,0,0.5}
\def\XC@clr@hsb@black{\@@hue,0,0}
\def\XC@clr@gray@white{1}
%    \end{macrocode}
%
% \begin{macro}{\XC@met@grad}
% \begin{macro}{\XC@met@last}
% \begin{macro}{\XC@met@step}
% Methods for color series:
%    \begin{macrocode}
\@tfor\@@tmp:={grad}{last}{step}\do
 {\XC@let@cN{XC@met@\@@tmp}\@@tmp}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Colors}\label{sec.definition}
%
% \begin{macro}{\definecolor}
%   \oarg{type}\marg{name}\oarg{prefix}\marg{liste-modèle}\marg{liste-spéc}\\
% Extends the facilities of \LC's |\definecolor|.
% The optional argument \Meta{type} has currently to be either empty (= normal color definition) or `named' or `ps'.
% \Meta{préfixe} is an argument used for the internal driver-dependent representation.
% |\definecolor| creates a new command |\\color@|\Meta{name} that contains the \emph{internal representation}
% |\xcolor@|\marg{type-spec}\marg{driver-spec}\marg{n-model}\marg{n-color-spec} of the color, where
% \begin{itemize}
% \item \Meta{type-spec} is either empty (if \Meta{type} was empty), or a driver-dependent macro or expression (if \Meta{type} was `named', `ps');
% \item \Meta{driver-spec} is a driver-dependent representation of the color, which also depends on \Meta{type};
% \item \Meta{n-model} is either \Meta{model} or the name of another color model, dependent on the desired transformation(s) at definition time;
% \item \Meta{n-color-spec} are the comma-separated normalised parameter values of the color with respect to \Meta{n-model}.
% \end{itemize}
% See table \vref{tab.internal} for some examples.
%    \begin{macrocode}
\def\definecolor{\@testopt{\XC@definecolor}{}}
\def\XC@definecolor[#1]#2%
 {\@testopt{\XC@definec@lor[#1]{#2}}\colornameprefix}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definec@lor[#1]#2[#3]#4#5%
 {\begingroup
  \XC@sdef\@@cls{#1}\XC@edef\@@nam{#2}\edef\colornameprefix{#3}%
  \XC@logdef\@@nam
  \XC@getmodclr02{#4}{#5}{\let\@@tmp\relax}%
   {\ifx\@@mod\XC@mod@named
      \XC@c@l@rlet\@@nam\@@clr
    \else
      \ifx\@@cls\XC@mod@ps
        \edef\@@drv{\@@mod\space\@@clr}\def\@@hue{0}%
        \edef\@@clr{\@nameuse{XC@clr@\@@mod @white}}%
      \else
        \ifconvertcolorsD
          \let\@@tmp\@@mod\XC@sdef\@@mod{\XC@tgt@mod\@@tmp}%
          \convertcolorspec\@@tmp\@@clr\@@mod\@@clr
        \fi
        \XC@coremodel\@@mod\@@clr
%    \end{macrocode}
%
% Determine driver-dependent color definition:
%    \begin{macrocode}
        \csname color@\@@mod\expandafter\endcsname
          \expandafter\@@drv\expandafter{\@@clr}%
%    \end{macrocode}
%
% Handle prologue and `named' colors:
%    \begin{macrocode}
        \ifcase\XC@@xcp@
          \immediate\write\XC@@xcp{/\colornameprefix\@@nam{\expandafter
            \XC@strip@comma\@@clr,,\@nnil}XC\@@mod}%
          \let\@@cls\XC@mod@named
        \fi
        \ifx\@@cls\@empty\else
          \let\@@tmp\@@cls
          \@nameuse{define@color@\@@cls}\@@nam\@@drv
          \csname color@\@@tmp\expandafter\endcsname
            \expandafter\@@drv\expandafter{\@@nam}%
        \fi
      \fi
%    \end{macrocode}
%
% Finally write all information into macro |\\color@|\Meta{name}:
%    \begin{macrocode}
      \toks@\expandafter{\@@drv}%
      \edef\@@tmp
       {\ifglobalcolors\global\else\xglobal@\fi
        \noexpand\@namedef{\string\color@\@@nam}%
         {\noexpand\xcolor@{\@@cls}{\the\toks@}{\@@mod}{\@@clr}}}%
    \fi}%
  \expandafter\endgroup\@@tmp\xglobal@stop}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@getmodclr}
%   \marg{mod-opt}\marg{clr-opt}\marg{liste-modèle}\marg{liste-spéc}\marg{undefined}\marg{defined}\\
% Depending on \Meta{mod-opt}, different tasks are performed:
% \begin{itemize}
% \item[0:] Retrieve color model and target model from \Meta{liste-modèle} if |\XC@@getmod| is `true'.
% \item[1:] Retrieve color model and target model from \Meta{liste-modèle} always.
% \end{itemize}
% The color model is stored in |\@@mod|, its position in |\XC@@pos|, a possible target model in |\@@Mod|.
% Depending on \Meta{clr-opt}, different tasks are performed:
% \begin{itemize}
% \item[0:] Don't pick color specification from \Meta{liste-spéc}.
% \item[1:] Pick color specification from \Meta{liste-spéc}, convert it from model |\@@mod| to |\@@Mod|, unless the latter is `ignore' or |\@@cls| is `ps'.
% \item[2:] Like the former case, additionally |\let\@@mod\@@Mod|.
% \end{itemize}
% The color specification is stored in |\@@clr|.
% Color specification picking relies on the position |\XC@@pos|, conversion relies on the model |\@@mod|, and the target model |\@@Mod|.
% If |\@@mod| represents an undefined color model, then \Meta{undefined} is executed at the end of the macro, else \Meta{defined}.
%    \begin{macrocode}
\def\XC@getmodclr#1#2#3#4%
 {\ifnum\ifcase#1 \ifXC@@getmod1\else0 \fi \or1 \fi>0
    \XC@mdef\@@mod{#3}\expandafter\XC@getmod\@@mod////////\XC@@
    \@ifundefinedmodel\@@Mod{\let\@@Mod\XC@mod@ignore}{}\fi
  \@ifundefined{XC@mod@\@@mod}%
   {\c@lor@error{model `\@@mod'}\@firstoftwo}%
   {\ifcase#2\else
      \XC@mdef\@@clr{#4}%
      \edef\@@clr{\expandafter\XC@getclr\@@clr////////\XC@@}%
      \ifx\@@cls\XC@mod@ps\else\XC@clean\@@clr\fi
      \ifx\@@Mod\XC@mod@ignore\else
        \convertcolorspec\@@mod\@@clr\@@Mod\@@clr
        \ifnum#2>1 \let\@@mod\@@Mod\fi
      \fi
    \fi \@secondoftwo}}
%    \end{macrocode}
%
% \begin{macro}{\XC@getmod}
% Retrieve model position |\XC@@pos|, model |\@@mod|, and target model |\@@Mod| from multiple definitions (up to~8), separated by `|/|'.
%    \begin{macrocode}
\def\XC@getmod#1/#2/#3/#4/#5/#6/#7/#8/#9\XC@@
 {\XC@g@tm@d0#1::\XC@@ \XC@getm@d1{#2}\XC@getm@d2{#3}%
  \XC@getm@d3{#4}\XC@getm@d4{#5}\XC@getm@d5{#6}\XC@getm@d6{#7}%
  \XC@getm@d7{#8}\def\XC@@pos{0}\def\@@mod{#1}\@gobble\@nnil}%
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@getm@d#1#2%
 {\edef\XC@@pos{#2}\XC@sdef\@@mod{\XC@tgt@mod\XC@@pos}%
  \ifx\XC@@pos\@@mod\def\XC@@pos{#1}\expandafter\remove@to@nnil\fi}%
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@g@tm@d#1#2:#3:#4\XC@@
 {\@ifxempty{#3}{\let\@@Mod\XC@mod@ignore\XC@getm@d0{#2}}%
    {\def\@@Mod{#2}\XC@getm@d0{#3}}}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@getclr}
% Pick color specification on position |\XC@@pos| from multiple definitions (up to~8), separated by `|/|'.
% Expandable.
%    \begin{macrocode}
\def\XC@getclr#1/#2/#3/#4/#5/#6/#7/#8/#9\XC@@
 {\ifcase\XC@@pos\space #1\or#2\or#3\or#4\or#5\or#6\or#7\or#8\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifXC@@getmod}
% Switch used to determine whether the model has to be retrieved (e.g., ordinary |\definecolor|) or not (e.g., |\definecolor| acting as subroutine to |\definecolorset|).
%    \begin{macrocode}
\newif\ifXC@@getmod \XC@@getmodtrue
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\xdefinecolor}
% This command is identical with |\definecolor|, it is kept only for compatibility reasons.
%    \begin{macrocode}
\let\xdefinecolor\definecolor
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\providecolor}
%   \oarg{type}\marg{name}\marg{liste-modèle}\marg{liste-spéc}\\
% Similar to |\definecolor|, but the color \Meta{name} is only defined if it does not exist already.
%    \begin{macrocode}
\def\providecolor{\@testopt{\XC@providecolor}{}}
\def\XC@providecolor[#1]#2%
 {\@testopt{\XC@providec@lor[#1]{#2}}\colornameprefix}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@providec@lor[#1]#2[#3]%
 {\XC@edef\XC@@tmp{#2}%
  \@ifundefinedcolor\XC@@tmp{\XC@definecolor[#1]{#2}[#3]}%
   {\ifnum\XC@tracing>0
      \PackageInfo{xcolor}{Ignoring color definition `\XC@@tmp'}\fi
    \@gobbletwo}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\xcolor@}
%   \marg{type-spec}\marg{driver-spec}\marg{model}\marg{spec}\\
% Simply grabs the driver-specific part of the color definition.
% Therefore, the command |\\color@|\Meta{name} behaves like in the original case, when first-level expanded.
%    \begin{macrocode}
\def\xcolor@#1#2#3#4{#2}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\colorlet}
%   \oarg{type}\marg{name}\oarg{num model}\marg{color}\\
% Create a color `name' consisting of \Meta{color}, converted to \Meta{num model} if non-empty.
%    \begin{macrocode}
\def\colorlet{\@testopt{\XC@colorlet}{}}
\def\XC@colorlet[#1]#2{\@testopt{\XC@col@rlet[#1]{#2}}{}}
\def\XC@col@rlet[#1]#2[#3]#4%
 {\begingroup
  \edef\@@cls{#1}\XC@edef\@@nam{#2}\XC@sdef\@@mod{#3}\XC@edef\@@clr{#4}%
%    \end{macrocode}
%
% Check whether |#4| is an explicit name, |#3| is empty and |#1| is either empty or equal to the corresponding parameter of |#4|: in this case, a simple |\let| command will do the job.
%    \begin{macrocode}
  \XC@info\@@clr\@@tmp\XC@@tstfalse
  \ifnum\@@tmp=\@ne\ifx\@@mod\@empty
    \ifx\@@cls\@empty
      \XC@@tsttrue
    \else
      \edef\@@tmp
       {\expandafter\expandafter\expandafter\@secondoffive
         \csname\string\color@\@@clr\endcsname}%
      \ifx\@@cls\@@tmp\XC@@tsttrue\fi
    \fi
  \fi\fi
  \ifXC@@tst
    \XC@logdef\@@nam\XC@c@l@rlet\@@nam\@@clr
  \else
    \extractcolorspec\@@clr\@@clr
    \ifx\@@mod\@empty\else
      \expandafter\convertcolorspec\@@clr\@@mod\@@clr
      \edef\@@clr{{\@@mod}{\@@clr}}\fi
    \edef\@@tmp{\noexpand\XC@definecolor[\@@cls]{\@@nam}\@@clr}%
  \fi
  \expandafter\endgroup\@@tmp\xglobal@stop}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@c@l@rlet#1#2%
 {\@ifundefinedcolor{#2}%
   {\c@lor@error{`#2'}\let\@@tmp\@empty}%
   {\edef\@@tmp
     {\ifglobalcolors\global\else\xglobal@\fi
      \noexpand\XC@let@cc{\string\color@#1}{\string\color@#2}}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DefineNamedColor}
%   \marg{type}\marg{name}\marg{liste-modèle}\marg{liste-spéc}
%    \begin{macrocode}
\def\DefineNamedColor#1%
 {\@nameuse{XC@\ifdefinecolors defin\else prepar\fi ecolor}[#1]}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsubsection{Deferred definition}
%
% \begin{macro}{\preparecolor}
%   \oarg{type}\marg{name}\oarg{prefix}\marg{liste-modèle}\marg{liste-spéc}\\
%    \begin{macrocode}
\def\preparecolor{\@testopt{\XC@preparecolor}{}}
\def\XC@preparecolor[#1]#2%
 {\@testopt{\XC@preparec@lor[#1]{#2}}\colornameprefix}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@preparec@lor[#1]#2[#3]#4#5%
 {\XC@sdef\@@cls{#1}\XC@edef\@@nam{#2}%
  \XC@getmodclr01{#4}{#5}{}%
   {\xdef\XC@@stack
     {\ifx\XC@@stack\@empty\else\XC@@stack,\fi{#1}{\@@nam}{#3}%
      {\ifx\@@Mod\XC@mod@ignore\@@mod\else\@@Mod\fi}{\@@clr}}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\let\XC@@stack\@empty
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\definecolors}
%   \marg{id-list}
%    \begin{macrocode}
\def\definecolors#1%
 {\let\XC@@cmd\definecolor\let\XC@@glb\xglobal@
  \expandafter\XC@definecolors#1,,}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definecolors#1,%
 {\@ifxempty{#1}{}{\expandafter\XC@definec@lors#1=#1=:\XC@definecolors}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definec@lors#1=#2=#3:%
 {\XC@edef\@@nam{#1}\XC@edef\@@arg{#2}%
  \let\next\XC@definec@l@rs\expandafter\next\XC@@stack,,\@nnil}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definec@l@rs#1,%
 {\ifx,#1,\let\next\remove@to@nnil\else\XC@defin@c@l@rs#1\fi\next}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@defin@c@l@rs#1#2#3#4#5%
 {\def\@@tmp{#2}%
  \ifx\@@tmp\@@arg
    \let\xglobal@\XC@@glb\XC@@cmd[#1]{\@@nam}[#3]{#4}{#5}%
    \let\next\remove@to@nnil
  \fi}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\providecolors}
%   \marg{id-list}\\
% Similar to |\definecolor|, but based on |\providecolor|, thus the individual colors are defined only if they do not exist already.
%    \begin{macrocode}
\def\providecolors#1%
 {\let\XC@@cmd\providecolor\let\XC@@glb\xglobal@
  \expandafter\XC@definecolors#1,,}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsubsection{Sets of colors}
%
% \begin{macro}{\definecolorset}
%   \oarg{type}\marg{liste-modèle}\marg{head}\marg{tail}\marg{set spec}\\
% This command facilitates the construction of \emph{color sets} with common underlying \Meta{liste-modèle} and \Meta{type}.
% Here, \Meta{set spec} = \Meta[1]{name},\Meta[1]{liste-spéc};\dots;\Meta[k]{name},\Meta[k]{liste-spéc} ($k\ge1$ name/specification-list pairs).
% Individual colors are being constructed by |\definecolor|\oarg{type}|{|\Meta{head}\Meta[1]{name}\Meta{tail}|}|\marg{liste-modèle}|{|\Meta[1]{liste-spéc}|}| etc.
%    \begin{macrocode}
\def\definecolorset
 {\let\XC@@cmd\definecolor\@testopt{\XC@definecolorset}{}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definecolorset[#1]#2#3#4#5%
 {\XC@getmodclr10{#2}{}{}%
   {\XC@@getmodfalse\XC@edef\XC@@tmp{#5}\let\XC@@glb\xglobal@
    \def\XC@definec@lorset##1,##2;%
     {\@ifxempty{##1}{}%
       {\let\xglobal@\XC@@glb
        \XC@@cmd[#1]{#3##1#4}{\@@mod}{##2}\XC@definec@lorset}}%
    \expandafter\XC@definec@lorset\XC@@tmp;,;\XC@@getmodtrue}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\providecolorset}
%   \oarg{type}\marg{liste-modèle}\marg{name-prefix}\marg{name-postfix}\marg{set spec}\\
% Similar to |\definecolorset|, but based on |\providecolor|, thus the individual colors are defined only if they do not exist already.
%    \begin{macrocode}
\def\providecolorset
 {\let\XC@@cmd\providecolor\@testopt{\XC@definecolorset}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\preparecolorset}
%   \oarg{type}\marg{liste-modèle}\marg{name-prefix}\marg{name-postfix}\marg{set spec}\\
% Similar to |\definecolorset|, but dependent on |\ifdefinecolors|, either a |\definecolor| or a |\preparecolor| command will be executed for each single set member.
%    \begin{macrocode}
\def\preparecolorset
 {\ifdefinecolors\let\XC@@cmd\definecolor\else\let\XC@@cmd\preparecolor\fi
  \@testopt{\XC@definecolorset}{}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Color series}
%
% \begin{macro}{\definecolorseries}
%   \marg{name}\marg{core model}\marg{method}\oarg{b-model}\marg{base color}\oarg{l-model}\marg{delta}
%    \begin{macrocode}
\def\definecolorseries#1#2#3%
 {\@testopt{\XC@definecolorseries{#1}{#2}{#3}}{}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definecolorseries#1#2#3[#4]#5%
 {\@testopt{\XC@definec@lorseries{#1}{#2}{#3}[#4]{#5}}{}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@definec@lorseries#1#2#3[#4]#5[#6]#7%
 {\begingroup
  \XC@sdef\@@mod{#2}%
  \@ifxempty{#4}{\extractcolorspec{#5}\@@clr}{\edef\@@clr{{#4}{#5}}}%
  \expandafter\convertcolorspec\@@clr\@@mod\@@clr
  \@namexdef{\string\colorB@#1}{{\@@mod}{\@@clr}}%
  \edef\@@met{#3}%
  \ifx\@@met\XC@met@last
    \@ifxempty{#6}{\extractcolorspec{#7}\@@tmp}{\edef\@@tmp{{#6}{#7}}}%
    \expandafter\convertcolorspec\@@tmp\@@mod\@@tmp
    \XC@inflate\@@mod\@@tmp\@@clr\@@tmp
    \expandafter\XC@sub\@@tmp,\@@tmp
  \else
    \edef\@@tmp{#7}%
  \fi
  \@namexdef{\string\colorD@#1}{{\@@met}{\@@tmp}}%
  \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\resetcolorseries}
%   \oarg{div}\marg{name}
%    \begin{macrocode}
\def\resetcolorseries{\@testopt{\XC@resetcolorseries}{}}
\def\XC@resetcolorseries[#1]#2%
 {\begingroup
  \@namexdef
   {\string\color@#2}{\noexpand\xcolor@{}{}\@nameuse{\string\colorB@#2}}%
  \XC@let@Nc\@@tmp{\string\colorD@#2}%
  \edef\@@met{\expandafter\@firstoftwo\@@tmp}%
  \edef\@@tmp{\expandafter\@secondoftwo\@@tmp}%
  \ifx\@@met\XC@met@step\else
    \edef\@@scl{\@ifxempty{#1}\colorseriescycle{#1}}%
    \expandafter\XC@calc@\@@tmp,,,,:D%
  \fi
  \@namexdef{\string\colorS@#2}{\@@tmp}%
  \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@step}
% \begin{macro}{\XC@stepabs}
%   \marg{name}\\
% Perform a relative or absolute (= direct access) step within a color series \Meta{name}.
% In the relative case, the (non-negative) number of single steps is supposed to be stored in |\@tempcnta|.
%    \begin{macrocode}
\def\XC@step#1%
 {\let\xcolor@\@gobbletwo\edef\@@tmp{\@nameuse{\string\color@#1}}%
  \expandafter\XC@st@p\@@tmp{#1}%
  \@namexdef{\string\color@#1}{\noexpand\xcolor@{}{}{\@@mod}{\@@tmp}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@st@p#1#2#3%
 {\def\@@mod{#1}\def\@@tmp{#2}\edef\@@vec{\@nameuse{\string\colorS@#3}}%
  \@whilenum\@tempcnta>\z@\do
   {\XC@inflate\@@mod\@@tmp\@@vec\@@tmp
    \expandafter\XC@add\@@tmp,\@@tmp \expandafter\XC@calc@\@@tmp,,,,:U%
    \advance\@tempcnta\m@ne}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@stepabs#1%
 {\edef\@@tmp{\@nameuse{\string\colorB@#1}}%
  \expandafter\XC@st@p\@@tmp{#1}%
  \edef\@@tmp
   {\def\noexpand\@@mod{\@@mod}\def\noexpand\@@clr{\@@tmp}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Color blending}
%
% \begin{macro}{\blendcolors}
% \begin{macro}{\blendcolors*}
%   \marg{mix expr}\\
% Initialises all necessary parameters for color blending.
% The actual (completed) color blend expression is stored in |\colorblend|.
% In the starred version, the argument will be appended to a previously defined blend expression.
% An empty \Meta{mix expr} argument will switch blending off.
%    \begin{macrocode}
\def\blendcolors{\@ifstar{\XC@blendcolors\colorblend}{\XC@blendcolors{}}}
\def\XC@blendcolors#1#2%
 {\edef\colorblend{#1}\XC@edef\XC@@tmp{#2}%
  \ifx\XC@@tmp\@empty
    \xglobal@\blendcolorsfalse
  \else
    \xglobal@\blendcolorstrue
    \expandafter\XC@blendc@lors\XC@@tmp!!\@nil
  \fi
  \xglobalize@\colorblend \xglobal@stop}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@blendc@lors!#1!#2!#3\@nil
 {\@ifxempty{#1}{}%
   {\@ifxempty{#2}%
    {\edef\colorblend{\colorblend!#1!white}}%
    {\edef\colorblend{\colorblend!#1!#2}\XC@blendc@lors!#3!\@nil}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\blendcolors{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Color masks and separation}
%
% \begin{macro}{\maskcolors}
%   \oarg{core model}\marg{color}\\
% Initialises all necessary parameters for color masking.
% The actual color mask expression is stored in |\colormask|.
% An empty \Meta{color} argument will switch masking off.
% The optional \Meta{core model} argument may be used to determine the underlying color model.
%    \begin{macrocode}
\def\maskcolors{\@testopt{\XC@maskcolors}{}}
\def\XC@maskcolors[#1]#2%
 {\XC@edef\colormask{#2}%
  \ifx\colormask\@empty
    \xglobal@\maskcolorsfalse \def\XC@mmod{}\def\XC@mclr{}%
  \else
    \xglobal@\maskcolorstrue \extractcolorspecs\colormask\XC@mmod\XC@mclr
    \@ifxempty{#1}{}%
     {\convertcolorspec\XC@mmod\XC@mclr{#1}\XC@mclr \XC@sdef\XC@mmod{#1}}%
    \XC@coremodel\XC@mmod\XC@mclr
  \fi
  \xglobalize@\colormask \xglobalize@\XC@mmod \xglobalize@\XC@mclr
  \xglobal@stop}
%    \end{macrocode}
%
%    \begin{macrocode}
\maskcolors{}
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsection{Color application}
%
% \subsubsection{Standard color commands}
%
%  \begin{macro}{\color}
%   \marg{color}\\
%   \oarg{liste-modèle}\marg{liste-spéc}\\
% Switches to the color given either by name/expression or by model/specification.
% This color will stay in effect until the end of the current \TeX\ group.
%    \begin{macrocode}
\DeclareRobustCommand\color
 {\@ifnextchar[\@undeclaredcolor\@declaredcolor}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\@undeclaredcolor}
%   \oarg{liste-modèle}\marg{liste-spéc}\\
% Display a color that is given by \Meta{model} name and numerical \Meta{spec}.
%    \begin{macrocode}
\def\@undeclaredcolor[#1]#2%
 {\begingroup
  \let\@@cls\@empty
  \XC@getmodclr12{#1}{#2}{}%
   {\ifblendcolors
      \ifx\colorblend\@empty\else
        \edef\@@mix{\expandafter\@gobble\colorblend}\@tempswafalse
        \XC@coremodel\@@mod\@@clr\@xcolor@{}{}\@@mod\@@clr
      \fi
    \fi
    \ifconvertcolorsU
      \edef\@@tmp{\XC@tgt@mod{\@@mod}}%
      \convertcolorspec\@@mod\@@clr\@@tmp\@@clr \let\@@mod\@@tmp
    \fi
    \ifmaskcolors
      \convertcolorspec\@@mod\@@clr\XC@mmod\@@clr
      \let\@@mod\XC@mmod
      \XC@inflate\@@mod\XC@mclr\@@clr\@@tmp
      \expandafter\XC@mul\@@tmp,\@@clr
    \fi
    \edef\@@tmp{\noexpand\XC@undeclaredcolor{\@@mod}{\@@clr}}%
    \expandafter\endgroup\@@tmp}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@undeclaredcolor#1#2%
 {\@ifundefinedmodel{#1}%
   {\c@lor@error{model `#1'}}%
   {\@nameuse{color@#1}\current@color{#2}%
    \edef\XC@current@color{\noexpand\xcolor@{}{\current@color}{#1}{#2}}%
    \XC@display}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@declaredcolor}
%   \marg{color}\\
% Display a color that is given by an arbitrary \Meta{color}.
%    \begin{macrocode}
\def\@declaredcolor#1%
 {\XC@edef\XC@@tmp{#1}\XC@@tstfalse
  \ifcase\XC@type\XC@@tmp\relax \XC@@tsttrue\or \relax\else
    \ifblendcolors\XC@@tsttrue\fi \ifmaskcolors\XC@@tsttrue\fi
    \ifconvertcolorsU\XC@@tsttrue\fi
  \fi
  \ifXC@@tst
    \expandafter\XC@declaredcolor\else
    \expandafter\XC@declaredc@lor\fi}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@declaredcolor
 {\XC@split\XC@@tmp
  \edef\@@tmp{\noexpand\@undeclaredcolor[\@@mod]{\@@clr}}%
  \expandafter\endgroup\@@tmp}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@declaredc@lor
 {\XC@let@Nc\XC@current@color{\string\color@\XC@@tmp}%
  \edef\current@color{\XC@current@color}%
  \XC@display}
%    \end{macrocode}
% \end{macro}
%
%  \begin{macro}{\textcolor}
%   \marg{color}\marg{text}\\
%   \oarg{liste-modèle}\marg{liste-spéc}\marg{text}\\
% are just alternative syntax for |\color|, in which the groups are added implicitly.
% Thus \emph{text} appears in the specified color, but then the color reverts to its previous value.
% The naming is by analogy with |\textrm| (as opposed to |\rm| and |\rmfamily|) although it is slightly a misnomer as the command also works in math-mode.
% Additionally, it calls |\leavevmode| to ensure the start of horizontal mode.
%    \begin{macrocode}
\def\textcolor#1#{\@textcolor{#1}}
\def\@textcolor#1#2#3{\protect\leavevmode{\color#1{#2}#3}}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\pagecolor}
%   \marg{color}\\
%   \oarg{liste-modèle}\marg{liste-spéc}\\
% Specifies the background color for the current, and all following, pages.
% It is a global declaration which does not respect \TeX\ groups.
%    \begin{macrocode}
\def\pagecolor
 {\begingroup
  \let\ignorespaces\endgroup \let\set@color\set@page@color
  \color}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\nopagecolor}
% Removes any currently specified page color returning to the default transparent background.
% It is not yet supported by all driver options and so generates a warning if there is no definition in the driver file.
%    \begin{macrocode}
\def\nopagecolor
 {\@ifundefined{no@page@color}%
   {\PackageInfo{xcolor}{\string\nopagecolor\space is not supported}}%
   {\no@page@color}}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsubsection{Colored boxes}
%
% \begin{macro}{\colorbox}
%   \marg{color}\marg{text}\\
%   \oarg{model}\marg{spec}\marg{text}\\
% Takes the same argument forms as |\textcolor|, but the color specifies the \emph{background} color of the box.
%    \begin{macrocode}
\def\colorbox#1#{\protect\color@box{#1}}
\def\color@box#1#2{\color@b@x\relax{\color#1{#2}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fcolorbox}
%   \marg{frame color}\marg{background color}\marg{text}\\
%   \oarg{model}\marg{frame spec}\marg{background spec}\marg{text}\\
%   \oarg{frame model}\marg{frame spec}\oarg{background model}\marg{background spec}\marg{text}\\
%   \marg{frame color}\oarg{background model}\marg{background spec}\marg{text}\\
% Puts a frame of the first color around a box with a background specified by the second color.
% If only the first optional argument is given, it specifies the color model for both colors.
%    \begin{macrocode}
\def\fcolorbox#1#{\color@fbox{#1}}
\def\color@fbox#1#2#3#{\protect\color@fb@x{#1}{#2}{#3}}
\def\color@fb@x#1#2#3#4%
 {\color@b@x{\fboxsep\z@\color#1{#2}\XC@fbox}%
   {\@ifxempty{#3}{\color#1}{\color#3}{#4}}}
%    \end{macrocode}
% \end{macro}
%
%  \begin{macro}{\color@b@x}
% Internal macro for |\colorbox| and |\fcolorbox|.
%    \begin{macrocode}
\long\def\color@b@x#1#2#3%
 {\leavevmode
  \setbox\z@\hbox{\kern\fboxsep{\set@color#3}\kern\fboxsep}%
  \dimen@\ht\z@\advance\dimen@\fboxsep\ht\z@\dimen@
  \dimen@\dp\z@\advance\dimen@\fboxsep\dp\z@\dimen@
  {#1{#2\color@block{\wd\z@}{\ht\z@}{\dp\z@}\box\z@}}}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\XC@frameb@x}
% Common part of |\framebox| and |\fbox|.
% |#1| is a negative kern in the |\framebox| case so that the vertical rules do not add to the width of the box.
% Optimised by \People{Donald}{Arseneau}.
%    \begin{macrocode}
\def\XC@frameb@x#1%
 {\hbox
   {\@tempdima\fboxrule \advance\@tempdima\fboxsep
    \advance\@tempdima\dp\@tempboxa
    \setbox\@tempboxa\hbox
     {\lower\@tempdima\hbox
       {\vbox
         {\kern\fboxrule
          \hbox{\kern\fboxrule#1%
                \vbox{\kern\fboxsep\box\@tempboxa\kern\fboxsep}%
                #1\kern\fboxrule}%
          \kern\fboxrule}}}%
    \@tempdima\wd\@tempboxa
    \edef\@tempa{{\the\@tempdima}{\the\ht\@tempboxa}{\the\dp\@tempboxa}}%
    \box\@tempboxa\kern-\@tempdima\expandafter\boxframe\@tempa}}
%    \end{macrocode}
%  \end{macro}
%
% \begin{macro}{\XC@fbox}
% \begin{macro}{\@frameb@x}
% If no \Option{kernelfbox} option was specified, switch to the new method in general, else only for |\fcolorbox|.
%    \begin{macrocode}
\ifXC@@fbox
  \let\@frameb@x\XC@frameb@x \let\XC@fbox\fbox
\else
  \def\XC@fbox{\let\@frameb@x\XC@frameb@x\fbox}
\fi
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
%
% \subsubsection{Driver-specific and generic drawing}
%
% \begin{macro}{\color@block}
%   \marg{largeur}\marg{hauteur}\marg{profondeur}\\
% Should take up no space for \TeX, but produce a block in the current color of the specified size.
% It is mainly used for producing box backgrounds.
%  \begin{macro}{\boxframe}
%   \marg{largeur}\marg{hauteur}\marg{profondeur}\\
% Draw a frame with a linewidth of |\fboxrule|.
% Return a |\hbox| with outer dimensions \meta{largeur}, \meta{hauteur}, \meta{profondeur}.

%  \begin{macro}{\XC@boxframe}
%   \marg{largeur}\marg{hauteur}\marg{profondeur}\marg{frame construction}\\
% Wrapper for |\boxframe| commands that return zero-dimension frames.
%    \begin{macrocode}
\ifnum\XC@@xcd@>\m@ne
\def\XC@boxframe#1#2#3#4%
 {\hbox{\sbox\z@{\ifdim\fboxrule>\z@ #4\fi}%
    \wd\z@#1\relax\ht\z@#2\relax\dp\z@#3\relax\box\z@}}
\fi
%    \end{macrocode}
% \end{macro}
%
% \textbf{\Option{dvips}-optimised code}
%    \begin{macrocode}
\ifcase\XC@@xcd@
%    \end{macrocode}
%
%    \begin{macrocode}
\providecommand*\color@block[3]%
 {{\set@color\hbox
    {\dimen@#3\edef\@tempa{ \number\dimen@\space}%
     \dimen@#2\edef\@tempa{ \number\dimen@\@tempa}%
     \dimen@#1\relax
     \XC@special{\number\dimen@\@tempa XCcolorblock}}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\providecommand*\boxframe[3]%
 {\XC@boxframe{#1}{#2}{#3}%
   {\dimen@#3\edef\@tempa{ \number\dimen@\space}%
    \dimen@#2\edef\@tempa{ \number\dimen@\@tempa}%
    \dimen@#1\relax
    \XC@special{\number\fboxrule\space\number\dimen@\@tempa XCboxframe}}}
%    \end{macrocode}
%
% \textbf{\Option{pdftex}-optimised code }
% There seems to be no improvement by adding a specific |\color@block| command, since the PDF format doesn't offer higher accuracy than \TeX.
% For |\boxframe| we want to achieve this PDF pseudo-code (besides initial scaling):\\[1ex]
% \centerline{\ttfamily $l$ w [] $0$ d $2$ J $0$ j $4$ M
% $1$ $0$ $0$ $1$ $\frac12\,l$ $\frac12\,l$ cm
% $0$ $-d$ $(w-l)$ $(h+d-l)$ re s}
%    \begin{macrocode}
\or
%    \end{macrocode}
%
%    \begin{macrocode}
\providecommand*\boxframe[3]%
 {\XC@boxframe{#1}{#2}{#3}%
   {\dimen@#3\edef\@tempa{ 0 -\strip@pt\dimen@\space}%
    \edef\@tempb{\advance\dimen@\the\dimen@}%
    \dimen@#2\advance\dimen@-\fboxrule\@tempb
    \edef\@tempb{ \strip@pt\dimen@\space re s}%
    \dimen@#1\advance\dimen@-\fboxrule
    \edef\@tempb{ cm\@tempa\strip@pt\dimen@\@tempb}%
    \dimen@.5\fboxrule\edef\@tempa{ \strip@pt\dimen@}%
    \XC@special
     {0.996264 0 0 0.996264 0 0 cm
      \strip@pt\fboxrule\space w [] 0 d 2 J 0 j 4 M
      1 0 0 1\@tempa\@tempa\@tempb}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
% \textbf{Generic code }
% The definition here works by selecting a color, and then drawing a \TeX\ rule (unless |\ifcolors@false|).
%    \begin{macrocode}
\providecommand*\color@block[3]%
 {{\set@color\rlap{\ifcolors@\vrule\@width#1\@height#2\@depth#3\fi}}}
%    \end{macrocode}
%
% The following definition was optimised by \People{Donald}{Arseneau}.
%    \begin{macrocode}
\providecommand*\boxframe[3]%
 {\hbox
   {\dimen@#2\advance\dimen@#3\relax
    \lower#3\vbox
     {\hrule\@height\fboxrule
      \@tempdima-0.5\fboxrule \ifodd\fboxrule\advance\@tempdima\m@ne sp\fi
      \kern\@tempdima
      \hbox
       {\advance\dimen@-\fboxrule
        \vrule\@width\fboxrule\@height\dimen@\@depth\z@
        \@tempdima#1\advance\@tempdima-\tw@\fboxrule \kern\@tempdima
        \vrule\@width\fboxrule\@height\dimen@\@depth\z@}%
      \kern-0.5\fboxrule
      \hrule\@height\fboxrule}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Color argument processing}
%
% \begin{macro}{\@xcolor@}
%   \marg{type-spec}\marg{driver-spec}\marg{model}\marg{spec}\\
% This is the `work-horse' that does all necessary conversions and calculations if a color (expression) has to be displayed.
% \Meta{type-spec}  and \Meta{driver-spec} are ignored.
% |\@@mix| may contain a mix expression without leading `!'.
%    \begin{macrocode}
\def\@xcolor@#1#2#3#4%
 {\XC@sdef\@@mod{#3}\edef\@@clr{#4}%
  \ifx\@@mix\@empty\else\expandafter\@xcolor@@\@@mix!!!!\@nil\fi
  \if@tempswa
    \XC@let@Nc\@@tmp{XC@cnv@\@@mod @compl}%
    \ifx\@@tmp\relax \expandafter\XC@calc@\@@clr,,,,:C\else
                     \expandafter\@@tmp\@@clr,\fi
    \let\@@clr\@@tmp
  \fi}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\@xcolor@@#1!#2!#3!#4!#5\@nil
 {\dimen@\@ifxempty{#1}{100}{#1}\p@
  \edef\@@mix{\@ifxempty{#2}{white}{#2}}%
  \ifdim\dimen@=100\p@
    \expandafter\XC@postfix\@@mix]\relax
  \else\ifdim\dimen@=\z@
    \extractcolorspecs\@@mix\@@mod\@@clr
  \else
    \XC@let@Nc\@@tmp{XC@clr@\@@mod @\@@mix}%
    \ifx\@@tmp\relax
      \extractcolorspec\@@mix\@@tmp
      \ifx\@@mod\XC@mod@gray
        \edef\@@mod{\expandafter\@firstoftwo\@@tmp}%
        \edef\@@tmp{\expandafter\@secondoftwo\@@tmp}%
        \convertcolorspec\XC@mod@gray\@@clr\@@mod\@@clr
      \else
        \expandafter\convertcolorspec\@@tmp\@@mod\@@tmp
      \fi
    \else
      \ifx\@@mod\XC@mod@hsb\expandafter\XC@extract@hue\@@clr:\@@hue\fi
    \fi
    \XC@inflate\@@mod\@@clr\@@tmp\@@tmp
    \expandafter\XC@mix\@@tmp,\@@clr
  \fi\fi
  \@ifxempty{#3}%
   {\@ifxempty{#4}{}{\@xcolor@@!#4!#5\@nil}}%
   {\@xcolor@@#3!#4!#5\@nil}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split}
%   \marg{ext expr}\\
% Split \Meta{ext expr} into all of its components, do the necessary calculations, and save the model of the resulting color in |\@@mod| and the parameters in |\@@clr|.
% Note: |\XC@split| opens a group which has to be closed afterwards by |\endgroup|.
%    \begin{macrocode}
\def\XC@split#1%
 {\begingroup\XC@edef\@@tmp{#1}\expandafter\XC@split@i\@@tmp>>\@nnil}
%    \end{macrocode}
%
% \begin{macro}{\XC@split@i}
% Separate first part of expression chain and apply function(s) afterwards as requested.
%    \begin{macrocode}
\def\XC@split@i#1>%
 {\def\@@tmp{#1}\XC@split@ii#1:\@nil \XC@func}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@ii}
% Check whether it is an \emph{extended} or \emph{standard} color expression.
%    \begin{macrocode}
\def\XC@split@ii#1:#2\@nil
 {\@ifxempty{#2}{\XC@split@vi}{\XC@split@iii#1,,:#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@iii}
% Initialisation for extended color expressions.
% The magic \Meta{div} is either given as second argument, or calculated as the sum of all weights.
%    \begin{macrocode}
\def\XC@split@iii#1,#2,#3:#4:%
 {\edef\XC@@mod{#1}\let\@tempa\@empty
  \ifx,#2,\XC@@tsttrue\@tempdima\z@\else\XC@@tstfalse\@tempdima#2\p@\fi
  \XC@split@iv#4;,;}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@iv}
%   \marg{expr}\marg{dec}\\
% Step through the list of \Meta{expr},\Meta{dec} pairs.
% Add \Meta{dec} to the sum of weights (in order to calculate the ultimate \Meta{div}) and append pair information to |\@tempa| command.
% At the end of the list, execute |\@tempa| and map resulting parameter vector into unit cube.
% Finally, |\@@mod| and |\@@clr| contain the desired information about color model and parameters.
%    \begin{macrocode}
\def\XC@split@iv#1,#2;%
 {\@ifxempty{#1}%
   {\let\XC@@clr\@empty \@tempa \expandafter\XC@calc@\XC@@clr,,,,:U%
    \let\@@mod\XC@@mod \let\@@clr\@@tmp}
   {\XC@append\@tempa{\XC@split@v{#1}{#2}}%
    \ifXC@@tst\advance\@tempdima#2\p@\fi
    \XC@split@iv}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@v}
%   \marg{expr}\marg{dec}\\
% Extract color specification from \Meta{expr}, convert to target model, multiply the resulting vector by the quotient of \Meta{dec} and \Meta{div}, add that vector to the overall parameter vector.
%    \begin{macrocode}
\def\XC@split@v#1#2%
 {\def\@@tmp{#1}\XC@split@vi
  \ifx\@@mod\XC@@mod\else
    \convertcolorspec\@@mod\@@clr\XC@@mod\@@clr
  \fi
  \dimen@#2\p@ \rdivide\dimen@\@tempdima
  \edef\@@scl{\strip@pt\dimen@}%
  \expandafter\XC@calc@\@@clr,,,,:S%
  \ifx\XC@@clr\@empty\let\XC@@clr\@@tmp\else
    \XC@inflate\XC@@mod\XC@@clr\@@tmp\@@tmp
    \expandafter\XC@add\@@tmp,\XC@@clr
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@vi}
% Start splitting process for standard color expression.
%    \begin{macrocode}
\def\XC@split@vi{\count@\z@ \expandafter\XC@split@vii\@@tmp!\@nil}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@vii}
% Count number of `-' signs at the beginning of the string.
%    \begin{macrocode}
\def\XC@split@vii#1%
 {\ifx#1-\advance\count@\@ne\expandafter\XC@split@vii
  \else\expandafter\XC@split@viii\expandafter#1\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@split@viii}
% Extract \Meta{name} and \Meta{mix expr} part of color expression.
% Delegate control to |\@xcolor@|.
%    \begin{macrocode}
\def\XC@split@viii#1!#2\@nil
 {\edef\@@nam{#1}\edef\@@mix{#2}%
  \ifodd\count@\@tempswatrue\else\@tempswafalse\fi
  \@ifundefinedcolor\@@nam
   {\c@lor@error{`\@@nam'}\def\@@nam{black}}{}%
  \let\xcolor@\@xcolor@\@nameuse{\string\color@\@@nam}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\XC@postfix}
% Examine the postfix of a color expression and derive the actions to be taken for color series.
%    \begin{macrocode}
\def\XC@postfix#1#2]#3\relax
 {\begingroup
  \if[#1\@tempcnta#2\relax\XC@stepabs\@@nam
  \else\@tempcnta\z@
    \@tfor\@@tok:=#1#2\do
     {\if+\@@tok\advance\@tempcnta\@ne
      \else\if-\@@tok\advance\@tempcnta\m@ne
      \else\@tempcnta\z@\expandafter\@break@tfor\fi\fi}%
    \ifnum\@tempcnta=\z@\relax\else\XC@step\@@nam\fi
    \let\@@tmp\@empty
  \fi\expandafter\endgroup\@@tmp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@func}
%   \marg{function}|,{|\Meta[1]{arg}|,...,{|\Meta[n]{arg}|}>...\@nnil>|\\
% General macro to handle color functions.
% The number of arguments depends on the function.
% Multiple consecutive functions may be applied.
% Color model and specifications are input and output via |\@@mod| and |\@@clr|.
%    \begin{macrocode}
\def\XC@func#1>{\@ifxempty{#1}{\remove@to@nnil}{\XC@fun@#1,>\XC@func}}
\def\XC@fun@#1,#2>{\@nameuse{XC@func@#1}#2,,>}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@func@wheel}
% \begin{macro}{\XC@func@twheel}
%   \marg{angle}|,|\marg{full circle}|,>|\\
% Calculate color wheel position according to \Model{Hsb} or \Model{tHsb} model: \emph{hue} is rotated by \meta{angle} relative to \meta{full circle}.
% The latter value is taken from |\rangeHsb| if left empty.
% Finally, |\@@mod| is changed to \Model{hsb}.
%    \begin{macrocode}
\def\XC@func@wheel#1,#2,#3>{\XC@func@wh@el{#1}{#2}0}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@func@twheel#1,#2,#3>{\XC@func@wh@el{#1}{#2}1}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@func@wh@el#1#2#3%
 {\convertcolorspec\@@mod\@@clr
   {\ifcase#3 \XC@mod@Hsb\or\XC@mod@tHsb\fi}\@@clr
  \expandafter\XC@extract@hue\@@clr:\@@hue \dimen@#1\p@
  \@ifxempty{#2}{}%
   {\rdivide\dimen@{#2}\lshift\dimen@
    \dimen@\rangeHsb\dimen@\rshift\dimen@}%
  \advance\dimen@\@@hue\p@ \rdivide\dimen@\rangeHsb
  \edef\@@hue{\strip@pt\dimen@}\XC@calcU\@@hue\@@hue
  \ifcase#3
    \expandafter\XC@replace@hue\@@clr:\@@hue,\@@clr
  \or
    \XC@c@lcS\rangeHsb{}\@@hue\@@hue
    \expandafter\XC@replace@hue\@@clr:\@@hue,\@@clr
    \convertcolorspec\XC@mod@tHsb\@@clr\XC@mod@hsb\@@clr
  \fi
  \let\@@mod\XC@mod@hsb}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\XC@display}
% Write information to log file and display the current color.
%    \begin{macrocode}
\def\XC@display
 {\XC@bcolor\XC@let@cN{\string\color@.}\XC@current@color
  \ifnum\XC@type{.}=1
    \PackageWarning{xcolor}{Incompatible color definition}\else
  \ifnum\XC@tracing>2
    \begingroup \let\xcolor@\@empty \def\@nil{\string\@nil}%
    \PackageInfo{xcolor}{Setting color `\XC@current@color'}%
    \endgroup
  \fi\fi
  \XC@mcolor\set@color\XC@ecolor\ignorespaces}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@bcolor}
% \begin{macro}{\XC@mcolor}
% \begin{macro}{\XC@ecolor}
% Hooks that may be used to execute additional code within |\XC@display| immediately before/after a color is being displayed.
% Note that |\XC@bcolor| can use the current color information given by |\current@color| and |\XC@current@color| if further manipulation of the color is necessary.
% These hooks are intended for class/package writers and not used by \XC{} itself.
% In order to prevent unwanted side effects, please make sure that all internal \XC{} variables are restored properly at the end of |\XC@display|.
%    \begin{macrocode}
\let\XC@bcolor\relax
\let\XC@mcolor\relax
\let\XC@ecolor\relax
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Border colors for hyperlinks}
%
% \begin{macro}{\XC@bordercolor}
%   \marg{type}\marg{color}\\
% Basic macro to transform \Meta{color} into the format required by \Package{hyperref}.
% Here, \Meta{type} corresponds to the key `x\Meta{type}bordercolor'.
%    \begin{macrocode}
\def\XC@bordercolor#1#2%
 {\extractcolorspec{#2}\XC@@tmp
  \expandafter\convertcolorspec\XC@@tmp\XC@mod@rgb\XC@@tmp
  \expandafter\edef\csname @#1bordercolor\endcsname
   {\expandafter\XC@strip@comma\XC@@tmp,,\@nnil}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@pdfborder}
%   \Meta[1]{number}| |\Meta[2]{number}| |\Meta[3]{number}|\relax|\\
% Basic macro to transform a pdfborder expression into a suitable format for \Program{dvips} with a resolution of 8000~dpi.
%    \begin{macrocode}
\def\XC@pdfborder#1 #2 #3\relax
 {\def\@@scl{80}\XC@calc@#1,#2,#3,,:S%
  \edef\@pdfborder{\expandafter\XC@strip@comma\@@tmp,,\@nnil}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Colored rows in tables}
%
% The following definitions make only sense if the \Package{colortbl} package has been loaded by the \Option{table} option.
%    \begin{macrocode}
\@ifXCopt{table}{%
%    \end{macrocode}
%
% \begin{macro}{\rowcolors}
% \begin{macro}{\rowcolors*}
%   \oarg{commands}\marg{row}\marg{odd-row color}\marg{even-row color}\\
% Defines alternating colors for the next tabular environment.
% Starting with row \Meta{row}, odd and even rows get their respective colors.
% The color arguments may also be left empty (= no color).
% Optional commands may be |\hline| or |\noalign|\marg{stuff}.
%    \begin{macrocode}
 \def\rowcolors
  {\@ifstar{\@rowcmdfalse\rowc@lors}{\@rowcmdtrue\rowc@lors}}
%    \end{macrocode}
%
%    \begin{macrocode}
 \def\rowc@lors{\@testopt{\rowc@l@rs}{}}
%    \end{macrocode}
%
%    \begin{macrocode}
 \def\rowc@l@rs[#1]#2#3#4%
  {\global\rownum=\z@
   \global\@rowcolorstrue
   \@ifxempty{#3}%
     {\def\@oddrowcolor{\@norowcolor}}%
     {\def\@oddrowcolor{\gdef\CT@row@color{\CT@color{#3}}}}%
   \@ifxempty{#4}%
     {\def\@evenrowcolor{\@norowcolor}}%
     {\def\@evenrowcolor{\gdef\CT@row@color{\CT@color{#4}}}}%
   \if@rowcmd
     \def\@rowcolors
      {#1\if@rowcolors
         \noalign{\relax\ifnum\rownum<#2\@norowcolor\else
                  \ifodd\rownum\@oddrowcolor\else\@evenrowcolor\fi\fi}%
       \fi}%
   \else
     \def\@rowcolors
      {\if@rowcolors
         \ifnum\rownum<#2\noalign{\@norowcolor}\else
         #1\noalign{\ifodd\rownum\@oddrowcolor\else\@evenrowcolor\fi}\fi
       \fi}%
   \fi
   \CT@everycr{\@rowc@lors\the\everycr}%
   \ignorespaces}
%    \end{macrocode}
%
%    \begin{macrocode}
 \def\@rowc@lors{\noalign{\global\advance\rownum\@ne}\@rowcolors}
 \let\@rowcolors\@empty
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\showrowcolors}
% \begin{macro}{\hiderowcolors}
% Switch coloring mode on/off.
%    \begin{macrocode}
 \def\showrowcolors{\noalign{\global\@rowcolorstrue}\@rowcolors}
 \def\hiderowcolors{\noalign{\global\@rowcolorsfalse\@norowcolor}}
 \def\@norowcolor{\global\let\CT@row@color\relax}
 \@norowcolor
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\if@rowcolors}
% \begin{macro}{\if@rowcmd}
%    \begin{macrocode}
 \newif\if@rowcolors
 \newif\if@rowcmd
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\rownum}
% Reserve a counter register.
%    \begin{macrocode}
 \@ifundefined{rownum}{\newcount\rownum}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\CT@extract}
% This is a fix for active `!' character to enable color expressions; it is apparently only necessary for |\columncolor| commands within |\multicolumn|.
%    \begin{macrocode}
 \def\CT@extract#1\columncolor#2#3\@nil
  {\if!#2%
     \let\CT@column@color\@empty
   \else
     \if[#2%
       \expandafter\CT@extractb
     \else
       \XC@edef\XC@@tmp{#2}%
       \edef\CT@column@color{\noexpand\CT@color{\XC@@tmp}}%
       \expandafter\CT@extractd
     \fi
     {#1}#3\@nil
   \fi}
%    \end{macrocode}
% \end{macro}
%
% End of conditional code for colored tables.
%    \begin{macrocode}
}{}
%    \end{macrocode}
%
%
% \subsubsection{Color information}
%
% \begin{macro}{\extractcolorspec}
%   \marg{color}\marg{cmd}\\
% Extracts the color specification of \Meta{color} and puts it into \Meta{cmd}; equivalent to
% |\def|\Meta{cmd}|{|\marg{model}\marg{spec}|}|.
%    \begin{macrocode}
\def\extractcolorspec#1#2%
 {\XC@split{#1}\edef\@@tmp{{\@@mod}{\@@clr}}\aftergroupdef#2\@@tmp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\extractcolorspecs}
%   \marg{color}\marg{model-cmd}\marg{color-cmd}\\
% Extracts the color specification of \Meta{color} and puts it into \Meta{model-cmd} and \Meta{color-cmd}, respectively.
%    \begin{macrocode}
\def\extractcolorspecs#1#2#3%
 {\extractcolorspec{#1}#3%
  \edef#2{\expandafter\@firstoftwo#3}%
  \edef#3{\expandafter\@secondoftwo#3}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@extract@hue}
% Extract first entry of comma-separated value list.
%    \begin{macrocode}
\def\XC@extract@hue#1,#2:#3{\edef#3{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@extract@hue}
% Change first entry of comma-separated value list.
%    \begin{macrocode}
\def\XC@replace@hue#1,#2:#3,#4{\edef#4{#3,#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@ifundefinedcolor}
%   \marg{name}\marg{undefined}\marg{defined}\\
% Checks whether \Meta{name} is a defined color name and executes the respective code.
%    \begin{macrocode}
\def\@ifundefinedcolor#1{\@ifundefined{\string\color@#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@ifundefinedmodel}
%   \marg{model}\marg{undefined}\marg{defined}\\
% Checks whether \Meta{model} is a defined color model and executes the respective code.
%    \begin{macrocode}
\def\@ifundefinedmodel#1{\@ifundefined{color@#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@type}
%   \marg{name}\\
% Determines the \emph{type} of color \Meta{name}, expressed as a natural number (here, $t_1,t_2,\dots$ denote the tokens of |\\color@|\Meta{name}):
% \begin{center}
% \begin{tabular}{cll}
% \em type& \em description& \em conditions\\
% 0 & undefined\\
% 1 & unidentified& $t_1\neq|\xcolor@|$\\
% 2 & named & $t_1=|\xcolor@|\quad t_2\neq\emptyset$\\
% 3 & declared & $t_1=|\xcolor@|\quad t_2=\emptyset\quad t_3\neq\emptyset$\\
% 4 & undeclared & $t_1=|\xcolor@|\quad t_2=\emptyset\quad t_3=\emptyset$\\
% \end{tabular}
% \end{center}
%    \begin{macrocode}
\def\XC@type#1%
 {\expandafter\expandafter\expandafter\XC@typ@
  \csname\string\color@#1\endcsname\@empty\@empty\@empty\XC@@}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@typ@#1#2#3#4\XC@@
 {\ifx#1\relax 0\else
    \ifx#1\xcolor@
      \ifx$#2$%
        \ifx$#3$4\else3\fi\@gobbletwo
      \else2\fi\@gobbletwo
    \else1\fi
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@info}
%   \marg{color}\marg{cmd}\\
% Determines the \emph{type} of color \Meta{color}, expressed as a natural number; the result is stored in \Meta{cmd}.
% \begin{center}
% \begin{tabular}{cll}
% \em type& \em description& \em examples\\
% 0 & implicit name& `|.|'\\
% 1 & explicit name& `|red|', `|green|'\\
% 2 & standard color expression& `|-red|', `|green!50|'\\
% 3 & extended color expression& `|rgb:-red,1;green!50,2|'\\
% 4 & color function expression& `|rgb:-red,1;green!50,2>wheel,30|'\\
% \end{tabular}
% \end{center}
%    \begin{macrocode}
\def\XC@info#1#2%
 {\XC@edef#2{#1}%
  \if.#2\def#2{0}\else\expandafter\in@\expandafter>\expandafter{#2}%
  \ifin@\def#2{4}\else\expandafter\in@\expandafter:\expandafter{#2}%
  \ifin@\def#2{3}\else\expandafter\in@\expandafter!\expandafter{#2}%
  \ifin@\def#2{2}\else\edef#2{\noexpand\in@{/-}{/#2}}#2%
  \edef#2{\ifin@2\else1\fi}\fi\fi\fi\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tracingcolors}
% Put the integer following |\tracingcolors| into the macro |\XC@tracing|.
%    \begin{macrocode}
\def\tracingcolors{\begingroup\afterassignment\XC@tracingcolors\count@}
\def\XC@tracingcolors{\aftergroupdef\XC@tracing{\the\count@}}
%    \end{macrocode}
%
%    \begin{macrocode}
\tracingcolors=0
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@logdef}
%   \marg{name}\\
% Issue a log file information if color \Meta{name} is being (re)defined.
%    \begin{macrocode}
\def\XC@logdef#1%
 {\ifnum\XC@tracing>1
    \@ifundefinedcolor{#1}%
     {\ifnum\XC@tracing>2
        \PackageInfo{xcolor}{Defining color `#1'}%
      \fi}%
     {\PackageInfo{xcolor}{Redefining color `#1'}}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Color testing}
%
% \begin{environment}{testcolors}
%   \oarg{num models}\\
% This is a simple tabular environment in order to test (display) colors in different models, showing both the visual result and the model-specific parameters.
% The optional \Meta{num models} argument is a comma-separated list of \emph{numerical} color models.
%    \begin{macrocode}
\newenvironment*{testcolors}[1][rgb,cmyk,hsb,HTML]%
 {\let\@@nam\@empty\count@\z@
  \@for\@@tmp:=#1\do
    {\advance\count@\@ne
     \XC@sdef\@@tmp{\@@tmp}\edef\@@nam{\@@nam{\@@tmp}}}%
  \edef\@@num{\the\count@}%
%    \end{macrocode}
%
% Check whether the actual font belongs to a set of OT1-encoded monospaced fonts in order to display |>| instead of |\textgreater|.
% \begin{macro}{\XC@@gt}
%    \begin{macrocode}
  \def\XC@@gt{\textgreater}\def\@@tmp{OT1}%
  \ifx\f@encoding\@@tmp
    \@expandtwoargs\in@{,\f@family,}{,cmtt,pcr,}%
    \ifin@\def\XC@@gt{>}\fi
  \fi
%    \end{macrocode}
%  \end{macro}
%
% Disable prologue and tracing commands for temporary color definitions.
%    \begin{macrocode}
  \def\XC@@xcp@{-1}\ifnum\XC@tracing>1 \def\XC@tracing{1}\fi
%    \end{macrocode}
%
% \begin{macro}{\testcolor}
%   \marg{color}\\
%   \oarg{liste-modèle}\marg{liste-spéc}\\
% Each |\testcolor| command generates a table row.
% If the column-model matches the model of the color in question, its parameters are underlined.
%    \begin{macrocode}
  \def\testcolor{\@testopt{\@testcolor}{}}%
  \def\@testcolor[##1]##2%
   {\XC@mdef\@@mod{##1}\XC@edef\@@clr{##2}%
    \ifx\@@mod\@empty
      \let\@@arg\@@clr\XC@replace\@@arg>\XC@@gt\else
      \edef\@@arg{[\@@mod]{\@@clr}}\XC@definecolor[]{*}\@@mod\@@clr
      \def\@@clr{*}\fi
    \XC@append\@@arg{&}\extractcolorspecs\@@clr\@@mod\@@clr
    \@testc@lor}%
%    \end{macrocode}
%  \end{macro}
%
% Common loop macro for table head and |\testcolor| rows.
% Note that this command is only available within the |testcolors| environment.
%    \begin{macrocode}
  \def\@testc@lor
   {\count@\z@
    \expandafter\@tfor\expandafter\@@tmp\expandafter:\expandafter=\@@nam\do
     {\ifx\@@clr\@empty
        \edef\@@cmd{\noexpand\textbf{\@@tmp}}%
      \else
        \convertcolorspec\@@mod\@@clr\@@tmp\@@cmd
        \edef\@@cmd
         {\noexpand\@testc@l@r{\@@tmp}{\@@cmd}%
          \ifx\@@mod\@@tmp\noexpand\underline\fi
          {\expandafter\XC@strip@comma\@@cmd,,\@nnil}}%
      \fi
      \expandafter\XC@append\expandafter\@@arg\expandafter{\@@cmd}%
      \advance\count@\@ne
      \ifnum\count@=\@@num\XC@append\@@arg{\\}\else\XC@append\@@arg{&}\fi}%
    \@@arg}%
%    \end{macrocode}
%
% Display color sample box:
%    \begin{macrocode}
  \def\@testc@l@r##1##2%
   {\fboxsep\z@\fbox{\colorbox[##1]{##2}{\phantom{XX}}} }%
%    \end{macrocode}
%
% Now start the table:
%    \begin{macrocode}
  \tabular{@{}l*{\@@num}{l}@{}}%
  \def\@@arg{\textbf{color}& }\let\@@clr\@empty\@testc@lor}%
%    \end{macrocode}
%
% End of environment:
%    \begin{macrocode}
 {\endtabular\ignorespacesafterend}
%    \end{macrocode}
%  \end{environment}
%
%
% \subsubsection{Extra groups}
% Turning on extra groups in the standard \LaTeX\ commands, so that color commands are scoped corectly.
%
% Like |\normalcolor|, the following five commands are defined in the kernel, with empty definitions (|\relax|).
% This means that they can be used to make macros in packages `color safe'.
% The commands will not have any effect unless a user also uses a color package, when the `active definitions' here will take effect and keep color commands correctly scoped.
%
% \begin{macro}{\color@setgroup}
% This is to be used in contexts (e.g., `lrbox') where text is to be saved and used after some other, unknown, text that may contain color commands.
% A matching |\color@endgroup| should be used at the end of the text.
%    \begin{macrocode}
\def\color@setgroup{\begingroup\set@color}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\color@begingroup}
% This is to be used at the start of contexts that may contain color commands, but where it is not necessary to save the current color.
% Examples of this are in the box commands of \File{ltboxes.dtx} where user-supplied text is saved internally in a box between |\color@begingroup|, |\color@endgroup|, but the box is used before any other color commands could intervene.
% A matching |\color@endgroup| should be used at the end of the text.
%    \begin{macrocode}
\let\color@begingroup\begingroup
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\color@endgroup}
% To be used to close the `group' started by one of the above two commands.
% The |\endgraf| in its definition is required in the case of groups of text in vertical `par' mode, but doesn't do any harm in horizontal `LR' contexts.
%    \begin{macrocode}
\def\color@endgroup{\endgraf\endgroup}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\color@hbox}
% To be used to open a `colored hbox'
%    \begin{macrocode}
\def\color@hbox{\hbox\bgroup\color@begingroup}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\color@vbox}
% To be used to open a `colored hbox'
%    \begin{macrocode}
\def\color@vbox{\vbox\bgroup\color@begingroup}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\color@endbox}
% To be used to close a `colored (h/v)box'
%    \begin{macrocode}
\def\color@endbox{\color@endgroup\egroup}
%    \end{macrocode}
%  \end{macro}
%
%
%
% \subsection{Color calculation}
%
% \subsubsection{Color conversion}
%
% \begin{macro}{\convertcolorspec}
%   \marg{source model}\marg{spec}\marg{target model}\marg{cmd}\\
% General color conversion command.
%    \begin{macrocode}
\def\convertcolorspec#1#2#3#4%
 {\begingroup
  \XC@sdef\sm{#1}\XC@sdef\tm{#3}\edef\@@tmp{#2}%
  \ifx\sm\XC@mod@named\extractcolorspecs\@@tmp\sm\@@tmp\fi
  \ifx\sm\tm\else\csname XC@cnv@\sm\expandafter\endcsname\@@tmp,\fi
  \aftergroupdef#4\@@tmp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@coremodel}
%   \marg{model-cmd}\marg{color-cmd}\\
% Convert color, given by \marg{model-cmd} and \marg{color-cmd}, into parametrisation in one of the \emph{core} models.
% The result is again saved in \marg{model-cmd} and \marg{color-cmd}.
%    \begin{macrocode}
\def\XC@coremodel#1#2%
 {\XC@ifxcase#1%
   {\XC@mod@RGB {\convertcolorspec#1#2\XC@mod@rgb#2\let#1\XC@mod@rgb}%
    \XC@mod@HTML{\convertcolorspec#1#2\XC@mod@rgb#2\let#1\XC@mod@rgb}%
    \XC@mod@Hsb {\convertcolorspec#1#2\XC@mod@hsb#2\let#1\XC@mod@hsb}%
    \XC@mod@tHsb{\convertcolorspec#1#2\XC@mod@hsb#2\let#1\XC@mod@hsb}%
    \XC@mod@HSB {\convertcolorspec#1#2\XC@mod@hsb#2\let#1\XC@mod@hsb}%
    \XC@mod@Gray{\convertcolorspec#1#2\XC@mod@gray#2\let#1\XC@mod@gray}%
    \XC@mod@wave{\convertcolorspec#1#2\XC@mod@hsb#2\let#1\XC@mod@hsb}%
    \XC@mod@named{}%
    \XC@mod@ps{}}%
   {\expandafter\XC@calc@#2,,,,:N\let#2\@@tmp}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@rgb}
%   \Meta{red}|,|\Meta{green}|,|\Meta{blue}|,|
%    \begin{macrocode}
\def\XC@cnv@rgb#1,#2,#3,%
 {\XC@ifxcase\tm
   {\XC@mod@cmy {\XC@calc@#1,#2,#3,,:C}%
    \XC@mod@cmyk
     {\XC@calc@#1,#2,#3,,:C\expandafter\XC@cnv@cmy@cmyk\@@tmp,}%
    \XC@mod@RGB {\edef\@@scl{\rangeRGB}\XC@calc@#1,#2,#3,,:M}%
    \XC@mod@HTML{\edef\@@scl{\@cclv}\XC@calc@#1,#2,#3,,:M%
      \expandafter\XC@calc@\@@tmp,,:H%
      \expandafter\XC@cnv@rgb@HTML\@@tmp,}%
    \XC@mod@gray{\XC@cnv@rgb@gray#1,#2,#3,}%
    \XC@mod@Gray{\XC@cnv@rgb@gray#1,#2,#3,\XC@cnv@gray\@@tmp,}}%
   {\XC@cnv@rgb@hsb#1,#2,#3,\XC@cnv@hsb@}}
%    \end{macrocode}
%
% \begin{macro}{\XC@cnv@rgb@}
%    \begin{macrocode}
\def\XC@cnv@rgb@
 {\ifx\tm\XC@mod@rgb\else\expandafter\XC@cnv@rgb\@@tmp,\fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\XC@cnv@rgb@hsb}
%   \Meta{red}|,|\Meta{green}|,|\Meta{blue}|,|
%    \begin{macrocode}
\def\XC@cnv@rgb@hsb#1,#2,#3,%
 {\count@\z@
  \ifdim#2\p@>#1\p@ \else\advance\count@4 \fi
  \ifdim#3\p@>#2\p@ \else\advance\count@2 \fi
  \ifdim#1\p@>#3\p@ \else\advance\count@1 \fi
  \ifcase\count@\or
  \XC@c@v@rgb@hsb{#3}{#2}{#1}3{}\or
  \XC@c@v@rgb@hsb{#2}{#1}{#3}1{}\or
  \XC@c@v@rgb@hsb{#2}{#3}{#1}3-\or
  \XC@c@v@rgb@hsb{#1}{#3}{#2}5{}\or
  \XC@c@v@rgb@hsb{#3}{#1}{#2}5-\or
  \XC@c@v@rgb@hsb{#1}{#2}{#3}1-\or
  \def\@tempa{0}\def\@tempb{0}\XC@calcN{#3}\@tempc
  \fi
  \edef\@@tmp{\@tempa,\@tempb,\@tempc}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@c@v@rgb@hsb}
%   \marg{max}\marg{med}\marg{min}\marg{const}\marg{sign}
%    \begin{macrocode}
\def\XC@c@v@rgb@hsb#1#2#3#4#5%
 {\XC@calcN{#1}\@tempc \llshiftset\dimen@{#1}%
  \llshiftset\@tempdimb{-#3}\advance\@tempdimb\dimen@
  \llshiftset\@tempdima{-#5#2}\advance\@tempdima#5\dimen@
  \advance\@tempdima#4\@tempdimb \rdivide\@tempdima{6\@tempdimb}%
  \edef\@tempa{\ifdim\@tempdima>\p@1\else\strip@pt\@tempdima\fi}%
  \rdivide\@tempdimb\dimen@
  \edef\@tempb{\strip@pt\@tempdimb}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@rgb@gray}
%   \Meta{red}|,|\Meta{green}|,|\Meta{blue}|,|
%    \begin{macrocode}
\def\XC@cnv@rgb@gray#1,#2,#3,%
 {\llshiftset\dimen@{#1}\@tempdima30\dimen@
  \llshiftset\dimen@{#2}\advance\@tempdima59\dimen@
  \llshiftset\dimen@{#3}\advance\@tempdima11\dimen@
  \rrshift\@tempdima \rdivide\@tempdima{100}%
  \edef\@@tmp{\strip@pt\@tempdima}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@rgb@HTML}
%   \Meta{red}|,|\Meta{green}|,|\Meta{blue}|,|
%    \begin{macrocode}
\def\XC@cnv@rgb@HTML#1,#2,#3,%
 {\edef\@@tmp{#1#2#3}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@cmy}
%   \Meta{cyan}|,|\Meta{magenta}|,|\Meta{yellow}|,|
%    \begin{macrocode}
\def\XC@cnv@cmy#1,#2,#3,%
 {\XC@ifxcase\tm
   {\XC@mod@cmyk{\XC@cnv@cmy@cmyk#1,#2,#3,}%
    \XC@mod@gray{\XC@cnv@rgb@gray#1,#2,#3,\XC@calcC\@@tmp\@@tmp}%
    \XC@mod@Gray{\XC@cnv@rgb@gray#1,#2,#3,\XC@calcC\@@tmp\@@tmp
      \XC@cnv@gray\@@tmp,}}%
   {\XC@calc@#1,#2,#3,,:C\XC@cnv@rgb@}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@cmy@cmyk}
%   \Meta{cyan}|,|\Meta{magenta}|,|\Meta{yellow}|,|\\
% This transformation includes linear \emph{undercolor-removal} and \emph{black-generation}, as specified by the 4-dimensional parameter vector |\adjustUCRBG|.
%    \begin{macrocode}
\def\XC@cnv@cmy@cmyk#1,#2,#3,%
 {\edef\@@scl
   {\ifdim#1\p@<#2\p@
    \ifdim#1\p@<#3\p@ #1\else #3\fi \else
    \ifdim#2\p@<#3\p@ #2\else #3\fi \fi}%
  \expandafter\XC@calc@\adjustUCRBG,:S%
  \expandafter\XC@c@v@cmy@cmyk\@@tmp,#1,#2,#3,}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@c@v@cmy@cmyk#1,#2,#3,#4,#5,#6,#7,%
 {\XC@add#5,#6,#7,,-#1,-#2,-#3,,\@@tmp \edef\@@tmp{\@@tmp,#4}%
  \expandafter\XC@calc@\@@tmp,:N}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@cmyk}
%   \Meta{cyan}|,|\Meta{magenta}|,|\Meta{yellow}|,|\Meta{black}|,|
%    \begin{macrocode}
\def\XC@cnv@cmyk#1,#2,#3,#4,%
 {\XC@ifxcase\tm
   {\XC@mod@gray{\XC@cnv@rgb@gray#1,#2,#3,\edef\@@arg{#4}%
      \XC@calcT\@@tmp\@@tmp \XC@calcC\@@tmp\@@tmp}%
    \XC@mod@Gray{\XC@cnv@rgb@gray#1,#2,#3,\edef\@@arg{#4}%
      \XC@calcT\@@tmp\@@tmp \XC@calcC\@@tmp\@@tmp \XC@cnv@gray\@@tmp,}}%
   {\XC@cnv@cmyk@cmy#1,#2,#3,#4,%
    \ifx\tm\XC@mod@cmy\else\expandafter\XC@cnv@cmy\@@tmp,\fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@cmyk@cmy}
%   \Meta{cyan}|,|\Meta{magenta}|,|\Meta{yellow}|,|\Meta{black}|,|
%    \begin{macrocode}
\def\XC@cnv@cmyk@cmy#1,#2,#3,#4,%
 {\edef\@@arg{#4}\XC@calc@#1,#2,#3,,:T}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@hsb}
%   \Meta{hue}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@hsb#1,#2,#3,%
 {\XC@ifxcase\tm
   {\XC@mod@Hsb {\XC@cnv@hsb@Hsb#1,#2,#3,}%
    \XC@mod@tHsb{\XC@cnv@hsb@Hsb#1,#2,#3,\expandafter\XC@cnv@Hsb\@@tmp,}%
    \XC@mod@HSB {\edef\@@scl{\rangeHSB}\XC@calc@#1,#2,#3,,:M}}%
   {\XC@cnv@hsb@rgb#1,#2,#3,\XC@cnv@rgb@}}
%    \end{macrocode}
%
% \begin{macro}{\XC@cnv@hsb@}
%    \begin{macrocode}
\def\XC@cnv@hsb@
 {\ifx\tm\XC@mod@hsb\else\expandafter\XC@cnv@hsb\@@tmp,\fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\XC@cnv@hsb@rgb}
%   \Meta{hue}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@hsb@rgb#1,#2,#3,%
 {\llshiftset\dimen@{#1}\dimen@6\dimen@ \rrshift\dimen@
  \afterassignment\dimen@\count@=\the\dimen@
  \edef\@@tmp{\strip@pt\dimen@}%
  \ifodd\count@\else\XC@calcC\@@tmp\@@tmp\fi
  \edef\@@tmp
   {\ifcase\count@ 0,\@@tmp,1\or \@@tmp,0,1\or 1,0,\@@tmp\or
    1,\@@tmp,0\or \@@tmp,1,0\or 0,1,\@@tmp\or 0,\@@tmp,1\fi}%
  \edef\@@scl{#2}\expandafter\XC@calc@\@@tmp,,:S%
  \expandafter\XC@calc@\@@tmp,,:C%
  \edef\@@scl{#3}\expandafter\XC@calc@\@@tmp,,:S%
  \expandafter\XC@calc@\@@tmp,,:N}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@hsb@Hsb}
%   \Meta{hue}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@hsb@Hsb#1,#2,#3,%
 {\XC@c@lcS\rangeHsb{,#2,#3}{#1}\@@tmp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@gray}
%   \Meta{gray}|,|
%    \begin{macrocode}
\def\XC@cnv@gray#1,%
 {\XC@ifxcase\tm
   {\XC@mod@rgb {\XC@calcN{#1}\@@tmp \edef\@@tmp{\@@tmp,\@@tmp,\@@tmp}}%
    \XC@mod@cmy {\XC@calcC{#1}\@@tmp \edef\@@tmp{\@@tmp,\@@tmp,\@@tmp}}%
    \XC@mod@cmyk{\XC@calcC{#1}\@@tmp \edef\@@tmp{0,0,0,\@@tmp}}%
    \XC@mod@RGB {\edef\@@scl{\rangeRGB}\XC@calcM{#1}\@@tmp
      \edef\@@tmp{\@@tmp,\@@tmp,\@@tmp}}%
    \XC@mod@HTML{\edef\@@scl{\@cclv}\XC@calcM{#1}\@@tmp
      \XC@calcH\@@tmp\@@tmp \edef\@@tmp{\@@tmp\@@tmp\@@tmp}}%
    \XC@mod@HSB {\edef\@@scl{\rangeHSB}\XC@calcM{#1}\@@tmp
      \edef\@@tmp{0,0,\@@tmp}}%
    \XC@mod@Gray{\edef\@@scl{\rangeGray}\XC@calcM{#1}\@@tmp}}%
   {\XC@calcN{#1}\@@tmp \edef\@@tmp{0,0,\@@tmp}}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@RGB}
%   \Meta{Red}|,|\Meta{Green}|,|\Meta{Blue}|,|
%    \begin{macrocode}
\def\XC@cnv@RGB#1,#2,#3,%
 {\edef\@@scl{\rangeRGB}\XC@calc@#1,#2,#3,,:D\XC@cnv@rgb@}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@HTML}
%   \Meta{RRGGBB}|,|
%    \begin{macrocode}
\def\XC@cnv@HTML#1,%
 {\edef\@@tmp{\expandafter\@hex@Hex#1\relax}\expandafter\XC@cnv@HTML@\@@tmp
  \edef\@@scl{\@cclv}\expandafter\XC@calc@\@@tmp,,:D\XC@cnv@rgb@}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@cnv@HTML@#1#2#3#4#5#6%
 {\edef\@@tmp{\number"#1#2,\number"#3#4,\number"#5#6}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@Hsb}
%   \Meta{hue\Circ}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@Hsb#1,#2,#3,%
 {\ifx\tm\XC@mod@tHsb\XC@cnv@@Hsb#1,#2,#3,\XC@cnv@Hsb@
  \else\XC@cnv@Hsb@hsb#1,#2,#3,\XC@cnv@hsb@\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@Hsb@hsb}
%   \Meta{hue\Circ}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@Hsb@hsb#1,#2,#3,%
 {\XC@c@lcD\rangeHsb{,#2,#3}{#1}\@@tmp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@@Hsb}
%   \Meta{hue\Circ}|,|\Meta{saturation}|,|\Meta{brightness}|,|\marg{cmd}
%    \begin{macrocode}
\def\XC@cnv@@Hsb#1,#2,#3,#4%
 {\dimen@\rangeHsb\p@ \advance\dimen@\p@ \edef\@@tmp{\strip@pt\dimen@}%
  \edef\@@tmp{0,0;\rangetHsb;\rangeHsb,\rangeHsb;\@@tmp,\@@tmp;}%
  \dimen@#1\p@ \expandafter#4\@@tmp\@nnil
  \edef\@@tmp{\strip@pt\dimen@,#2,#3}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@Hsb@}
%   \Meta{x}|,|\Meta{y}|;|\Meta{x'}|,|\Meta{y'}|;|
%    \begin{macrocode}
\def\XC@cnv@Hsb@#1,#2;#3,#4;%
 {\ifdim\dimen@<#4\p@
    \@tempdima#3\p@ \advance\@tempdima-#1\p@
    \@tempdimb#4\p@ \advance\@tempdimb-#2\p@
    \rdivide\@tempdima\@tempdimb
    \advance\dimen@-#2\p@ \rmultiply\dimen@{\strip@pt\@tempdima}%
    \advance\dimen@#1\p@ \expandafter\remove@to@nnil
  \else
    \def\@@tmp{\XC@cnv@Hsb@#3,#4;}\expandafter\@@tmp
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@tHsb}
%   \Meta{hue\Circ}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@tHsb#1,#2,#3,%
 {\XC@cnv@@Hsb#1,#2,#3,\XC@cnv@tHsb@
  \ifx\tm\XC@mod@Hsb\else\expandafter\XC@cnv@Hsb\@@tmp,\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@tHsb@}
%   \Meta{x}|,|\Meta{y}|;|\Meta{x'}|,|\Meta{y'}|;|
%    \begin{macrocode}
\def\XC@cnv@tHsb@#1,#2;#3,#4;%
 {\ifdim\dimen@<#3\p@
    \@tempdima#4\p@ \advance\@tempdima-#2\p@
    \@tempdimb#3\p@ \advance\@tempdimb-#1\p@
    \rdivide\@tempdima\@tempdimb
    \advance\dimen@-#1\p@ \rmultiply\dimen@{\strip@pt\@tempdima}%
    \advance\dimen@#2\p@ \expandafter\remove@to@nnil
  \else
    \def\@@tmp{\XC@cnv@tHsb@#3,#4;}\expandafter\@@tmp
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@HSB}
%   \Meta{Hue}|,|\Meta{Saturation}|,|\Meta{Brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@HSB#1,#2,#3,%
 {\edef\@@scl{\rangeHSB}\XC@calc@#1,#2,#3,,:D\XC@cnv@hsb@}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@Gray}
%   \Meta{Gray}|,|
%    \begin{macrocode}
\def\XC@cnv@Gray#1,%
 {\XC@c@lcD\rangeGray{}{#1}\@@tmp \XC@cnv@gray\@@tmp,}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\XC@cnv@wave}
%   \Meta{lambda}|,|
%    \begin{macrocode}
\def\XC@cnv@wave#1,%
 {\XC@cnv@wave@hsb#1,\XC@cnv@hsb@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@wave@hsb}
%   \Meta{lambda}|,|
%    \begin{macrocode}
\def\XC@cnv@wave@hsb#1,%
 {\@tempdima#1\p@
%    \end{macrocode}
%
% Calculate hue:
%    \begin{macrocode}
  \ifdim\@tempdima<440\p@
    \XC@c@v@wave@hsb{-.0166667}{7.33333}4{}\else
  \ifdim\@tempdima<490\p@
    \XC@c@v@wave@hsb{.02}{-8.8}4-\else
  \ifdim\@tempdima<510\p@
    \XC@c@v@wave@hsb{-.05}{25.5}2{}\else
  \ifdim\@tempdima<580\p@
    \XC@c@v@wave@hsb{.0142857}{-7.28571}2-\else
  \ifdim\@tempdima<645\p@
    \XC@c@v@wave@hsb{-.0153846}{9.92308}0{}\else
  \dimen@\z@ \fi\fi\fi\fi\fi
  \divide\dimen@6\relax
  \edef\@@tmp{\strip@pt\dimen@,1,}%
%    \end{macrocode}
%
% Calculate brightness:
%    \begin{macrocode}
  \ifdim\@tempdima<420\p@
    \XC@c@v@wave@hsb{.0175}{-6.35}0{}\else
  \ifdim\@tempdima>700\p@
    \XC@c@v@wave@hsb{-.00875}{7.125}0{}\else
  \dimen@\p@ \fi\fi
  \edef\@@tmp{\@@tmp\strip@pt\dimen@}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@c@v@wave@hsb}
%   \marg{factor}\marg{const}\marg{offset}\marg{sign}\\
% Calculates $\Meta{offset} + \Meta{sign}\cdot\varrho\bigl(\Meta{const} + \Meta{factor}\cdot\lambda\bigr)$, where $\varrho$ is the reduction function.
% The result is stored in |\dimen@|.
%    \begin{macrocode}
\def\XC@c@v@wave@hsb#1#2#3#4%
 {\dimen@#1\@tempdima \advance\dimen@#2\p@
  \XC@calcR{\strip@pt\dimen@}\@tempa
  \dimen@#4\@tempa\p@ \advance\dimen@#3\p@}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Color complement}
%
% \begin{macro}{\XC@cnv@cmyk@compl}
%   \Meta{cyan}|,|\Meta{magenta}|,|\Meta{yellow}|,|\Meta{black}|,|
%    \begin{macrocode}
\def\XC@cnv@cmyk@compl#1,#2,#3,#4,%
 {\XC@cnv@cmyk@cmy#1,#2,#3,#4,%
  \expandafter\XC@calc@\@@tmp,,:C\expandafter\XC@cnv@cmy@cmyk\@@tmp,}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@cnv@hsb@compl}
%   \Meta{hue}|,|\Meta{saturation}|,|\Meta{brightness}|,|
%    \begin{macrocode}
\def\XC@cnv@hsb@compl#1,#2,#3,%
 {\lshiftset\dimen@{#1}\advance\dimen@\ifdim\dimen@<5\p@-\fi-5\p@
  \rshift\dimen@ \edef\@@tmp{\strip@pt\dimen@}%
  \lshiftset\dimen@{#3}\@tempdima#2\dimen@
  \@tempdimb\@tempdima \advance\@tempdimb10\p@ \advance\@tempdimb-\dimen@
  \ifdim\@tempdimb=\z@
    \edef\@@tmp{\@@tmp,0,0}%
  \else
    \rdivide\@tempdima\@tempdimb \rshift\@tempdimb
    \edef\@@tmp{\@@tmp,\strip@pt\@tempdima,\strip@pt\@tempdimb}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsection{Color initialisation}
%
% \subsubsection{Support for missing color models}
%
% These macros provide generic support for missing color models in specific drivers.
% For example, \File{pdftex.def} does not support the \Model{hsb} model.
% It is assumed that at least one of the models \Model{rgb}, \Model{RGB}, \Model{HTML}, \Model{hsb}, \Model{Hsb}, \Model{HSB}, \Model{cmy}, \Model{cmyk}, \Model{gray}, \Model{Gray} exists.
%
% \begin{macro}{\substitutecolormodel}
%   \marg{source model}\marg{target liste-modèle}\\
% Substitute \Meta{source model} by the first actually present model from \Meta{target liste-modèle}:
% each reference to the driver-specific command |\color@|\Meta{source model} is replaced by a color model conversion, followed by the driver-specific command |\color@|\Meta{target model}.
%    \begin{macrocode}
\def\substitutecolormodel#1#2%
 {\XC@sdef\XC@@tmp{\expandafter\XC@substitutecolormodel#2/ignore/\@nnil}%
  \ifx\XC@@tmp\XC@mod@ignore
    \XC@let@cN{color@#1}\color@ignore
  \else
    \expandafter\edef\csname color@#1\endcsname##1##2%
     {\noexpand\convertcolorspec
      \expandafter\noexpand\csname XC@mod@#1\endcsname{##2}%
      \expandafter\noexpand\csname XC@mod@\XC@@tmp\endcsname
      \noexpand\XC@@tmp\noexpand\expandafter
      \expandafter\noexpand\csname color@\XC@@tmp\endcsname
      \noexpand\expandafter##1\noexpand\expandafter{\noexpand\XC@@tmp}}%
  \fi
  \expandafter\xglobalize@\csname color@#1\endcsname \xglobal@stop
  \PackageInfo{xcolor}{Model `#1' substituted by `\XC@@tmp'}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\XC@substitutecolormodel#1/%
 {\@ifundefinedmodel{#1}{\XC@substitutecolormodel}{#1\remove@to@nnil}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@ignore}
%   \marg{cmd}\marg{spec}\\
% Empty color model: no driver-specific representation at all.
%    \begin{macrocode}
\def\color@ignore#1#2{\def#1{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@rgb}
%   \marg{cmd}\marg{spec}\\
% Takes the color specification \Meta{spec}, turns it into a driver-specific representation and puts the result into the macro \Meta{cmd}.
% For example, if \File{dvips.def} is loaded, then |\color@rgb\foo{1,0,0}| will be equivalent to |\def\foo{rgb 1 0 0}|.
% In the case of \File{pdftex.def}, it will act like |\def\foo{1 0 0 rg 1 0 0 RG}| instead.
%    \begin{macrocode}
\@ifundefinedmodel{rgb}%
 {\substitutecolormodel{rgb}{RGB/HTML/hsb/Hsb/HSB/cmy/cmyk/gray/Gray}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@cmyk}
%   \marg{cmd}\marg{spec}
%    \begin{macrocode}
\@ifundefinedmodel{cmyk}{\substitutecolormodel{cmyk}{cmy/rgb}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@cmy}
%   \marg{cmd}\marg{spec}
%    \begin{macrocode}
\@ifundefinedmodel{cmy}%
 {\PackageInfo{xcolor}{Model `cmy' substituted by `cmy0'}
  \def\color@cmy#1#2{\color@cmyk#1{#2,0}}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@hsb}
%   \marg{cmd}\marg{spec}\\
% Since the \Option{dvipdfm} and \Option{textures} drivers only pretend to support \Model{hsb}, we have to check for these drivers.
%    \begin{macrocode}
\@ifundefinedmodel{hsb}{\@tempswatrue}%
 {\XC@ifcase\XC@@drv{{dvipdfm,textures}\@tempswatrue}\@tempswafalse}
\if@tempswa
  \substitutecolormodel{hsb}{Hsb/HSB/rgb}
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@RGB}
%   \marg{cmd}\marg{spec}\\
% If the model is supported and |\rangeRGB| equals 255, we stick to the algorithm provided by the driver.
%    \begin{macrocode}
\@ifundefinedmodel{RGB}%
 {\substitutecolormodel{RGB}{HTML/rgb}}
 {\PackageInfo{xcolor}{Model `RGB' extended}
  \let\XC@color@RGB\color@RGB
  \def\color@RGB#1#2%
   {\relax\ifnum\rangeRGB=255
      \XC@color@RGB#1{#2}%
    \else
      \convertcolorspec\XC@mod@RGB{#2}\XC@mod@rgb\XC@@tmp
      \expandafter\color@rgb\expandafter#1\expandafter{\XC@@tmp}%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\color@gray}
% \begin{macro}{\color@HTML}
% \begin{macro}{\color@Hsb}
% \begin{macro}{\color@tHsb}
% \begin{macro}{\color@HSB}
% \begin{macro}{\color@Gray}
% \begin{macro}{\color@wave}
%   \marg{cmd}\marg{spec}
%    \begin{macrocode}
\@ifundefinedmodel{gray}{\substitutecolormodel{gray}{Gray/rgb}}{}
\@ifundefinedmodel{HTML}{\substitutecolormodel{HTML}{rgb}}{}
\@ifundefinedmodel{Hsb}{\substitutecolormodel{Hsb}{hsb}}{}
\@ifundefinedmodel{tHsb}{\substitutecolormodel{tHsb}{hsb}}{}
\@ifundefinedmodel{HSB}{\substitutecolormodel{HSB}{hsb}}{}
\@ifundefinedmodel{Gray}{\substitutecolormodel{Gray}{gray}}{}
\@ifundefinedmodel{wave}{\substitutecolormodel{wave}{hsb}}{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{\Index{PostScript}-related stuff}
%
% \begin{macro}{\XC@getcolor}
%   \marg{color}\marg{cmd}\\
%   \marg{color command}\marg{cmd}\\
%   |{|\oarg{model}\marg{spec}|}|\marg{cmd}\\
% Transformation of a color, given by the first argument, especially needed for \Package{pstricks}.
% The result will always be an internal color representation (as described in section \vref{sec.definition}) and is stored in \Meta{cmd}.
% There are different ways of specifying the color:
% \begin{itemize}
% \item \Meta{color} is a color name, expression, etc., e.g., |\XC@getcolor{green!50}\foo|;
% \item \Meta{color command} is a macro whose \emph{first level} expansion is an internal color representation, e.g., |\XC@getcolor\pslinecolor\foo|;
% \item \Meta{model} and \Meta{spec} provide, as usual, explicit parameter specifications.
% \end{itemize}
%    \begin{macrocode}
\def\XC@getcolor#1#2%
 {\begingroup\toks@{#1}\XC@getc@lor#1\XC@@\aftergroupdef#2{\@@tmp}}
%    \end{macrocode}
%
% Check whether the argument consists of one or more tokens.
% In the first case, expand by one level and go to next check.
% In the second case, assume it's a \Meta{color} and simulate its display, but without performing the real |\set@color| command (which would insert |\special|s, possibly causing trouble with blank spaces).
% This simulation ensures that we get exactly the same color --- including all blending, masking --- as if we had executed an explicit |\color| command at that point.
%    \begin{macrocode}
\def\XC@getc@lor#1#2\XC@@
 {\@ifxempty{#2}%
   {\expandafter\XC@getc@l@r#1\XC@@}%
   {\let\set@color\relax
    \ifx#1[%
      \expandafter\@undeclaredcolor\the\toks@\else
      \expandafter\@declaredcolor\expandafter{\the\toks@}\fi
    \let\@@tmp\XC@current@color}}
%    \end{macrocode}
%
% Check whether the first token is |\xcolor@|.
% In that case, |#1#2| is assumed to be a complete internal color representation.
% Otherwise, perform a simulation as described before.
%    \begin{macrocode}
\def\XC@getc@l@r#1#2\XC@@
 {\ifx#1\xcolor@
    \def\@@tmp{\xcolor@#2}%
  \else
    \let\set@color\relax
    \expandafter\@declaredcolor\expandafter{\the\toks@}%
    \let\@@tmp\XC@current@color
  \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\XC@usecolor}
%   \marg{name}\\
%   \marg{color command}\\
% Transformation of a color into \Index{PostScript} code.
% The argument may be either a command whose \emph{first-level} expansion is an internal color representation (e.g., the outcome of an |\XC@getcolor| command: |\XC@usecolor\pslinecolor|), or a \Meta{name} (e.g., |\XC@usecolor{green}|).
% Note that non-trivial color expressions like |green!50| are forbidden and that |\XC@usecolor| is fully expandable, for example, |\edef\foo{\XC@usecolor{green}}| is valid.
%    \begin{macrocode}
\def\XC@usecolor#1{\expandafter\XC@usec@lor#1\XC@@}
\def\XC@usec@lor#1#2\XC@@
 {\ifx#1\xcolor@
    \expandafter\expandafter\expandafter\c@lor@to@ps#1#2\@@
  \else
    \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter
    \expandafter\c@lor@to@ps\csname\string\color@#1#2\endcsname\@@
  \fi
  \space}
%    \end{macrocode}
%
% For compatibility reasons, we need the following command temporarily; however, |\XC@c@lor@to@ps| will disappear!
%    \begin{macrocode}
\let\XC@c@lor@to@ps\XC@usecolor
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\let\pst@getcolor\XC@getcolor
\let\pst@usecolor\XC@usecolor
%    \end{macrocode}
%
%
% \subsubsection{Whatsit \ldots}
%
% \begin{macro}{\c@lor@special}
% Some drivers do not support all the features of this package.
% They should always put a \Meta{whatsit} in the current list though.
% The following macro has most of the features of |\special|, but does not put anything into the \File{.dvi} file.
% It does write to the |log| file or the terminal (depending on the value of |#1|).
%    \begin{macrocode}
\def\c@lor@special#1#2{\edef\@tempa{\write#1{#2}}\@tempa}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsubsection{Default color}
%
% \begin{macro}{\normalcolor}
% |\normalcolor| is defined (to |\relax|) in the \LaTeX\ kernel, so it is safe to use this in macros that may possibly be used in conjunction with color.
% It will have no effect until the \XCP{} is also loaded.
%    \begin{macrocode}
\def\normalcolor{\let\current@color\default@color\set@color}
%    \end{macrocode}
% \end{macro}
%
%  \begin{macro}{\default@color}
% Internal macro to store the `default' color used by |\normalcolor|.
%    \begin{macrocode}
\AtBeginDocument{\let\default@color\current@color}
%    \end{macrocode}
% \end{macro}
% |\current@color| (which is the expansion of |\XC@current@color|) contains an internal representation of the color at this point in the document.
% This can only be an approximation to the truth as the `macro layer' of \TeX\ does not know where the output routine is going to re-insert floats.
% This is why drivers must maintain their own stack of colors in order to fully support these commands.
%
%
% \subsubsection{Driver-specific definitions for named colors}
%
% \begin{macro}{\c@lor@@named}
% \begin{macro}{\define@color@named}
% We have to modify a few driver-specific commands in order to avoid generation of superfluous macros.
%    \begin{macrocode}
\XC@ifcase\XC@@drv
 {{dvipdf,dvipdfm,dvipdfmx,dvips,pctex32}%
  {\def\c@lor@@named#1,#2,#3\@@#4%
    {\edef#4{\expandafter\expandafter\expandafter\@thirdoffive
             \csname\string\color@#1\endcsname}}
   \def\define@color@named#1#2%
    {\@namedef{\string\color@#1}{{}{}{ \colornameprefix#1}{}{}}}}%
%    \end{macrocode}
%
%    \begin{macrocode}
  {dvipsone,luatex,pctexps,pdftex,tcidvi,truetex,vtex,xetex}%
  {\def\c@lor@@named#1,#2,#3\@@#4%
    {\edef#4{\expandafter\expandafter\expandafter\@thirdoffive
             \csname\string\color@#1\endcsname}}
   \def\define@color@named#1#2%
    {\let\@@cls\@empty\@namedef{\string\color@#1}{{}{}{#2}{}{}}}}%
%    \end{macrocode}
%
%    \begin{macrocode}
  {textures}%
  {\def\c@lor@@named#1,#2,#3\@@#4%
    {\edef\@tempa{\color@P@custom{#1}{\if!#2!1\else#2\fi}}%
     \expandafter\def\expandafter#4\@tempa}
   \def\define@color@named#1#2%
    {\edef\@tempa{{#1}{#2}}\expandafter\AddCustomColor\@tempa}
   \def\c@lor@ps@#1 #2\@@
    {\expandafter\expandafter\expandafter\expandafter\expandafter
     \expandafter\expandafter\c@lor@to@ps@
     \csname\string\color@#1\expandafter\endcsname\space
     #2. \@@{#1}}}%
%    \end{macrocode}
%
%    \begin{macrocode}
 }{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Basic color definitions}
%
% \Model{rgb}-minded colors.\footnote{Generic definitions:
% \Color{}{brown} = \Color{}{violet}|!|50|!|\Color{}{yellow},
% \Color{}{lime} = \Color{}{green}|!|25|!|\Color{}{yellow},
% \Color{}{orange} = \Color{}{red}|!|50|!|\Color{}{yellow},
% \Color{}{pink} = \Color{}{red}|!|25,
% \Color{}{purple} = \Color{}{violet}|!|50|!|\Color{}{red},
% \Color{}{teal} = \Color{}{green}|!|50|!|\Color{}{blue},
% \Color{}{violet} = \Color{}{blue}|!|50|!|\Color{}{red}.}
%    \begin{macrocode}
\definecolorset{rgb/hsb/cmyk/gray}{}{}%
 {red,1,0,0/0,1,1/0,1,1,0/.3;%
  green,0,1,0/.33333,1,1/1,0,1,0/.59;%
  blue,0,0,1/.66667,1,1/1,1,0,0/.11;%
  brown,.75,.5,.25/.083333,.66667,.75/0,.25,.5,.25/.5475;%
  lime,.75,1,0/.20833,1,1/.25,0,1,0/.815;%
  orange,1,.5,0/.083333,1,1/0,.5,1,0/.595;%
  pink,1,.75,.75/0,.25,1/0,.25,.25,0/.825;%
  purple,.75,0,.25/.94444,1,.75/0,.75,.5,.25/.2525;%
  teal,0,.5,.5/.5,1,.5/.5,0,0,.5/.35;%
  violet,.5,0,.5/.83333,1,.5/0,.5,0,.5/.205}%
%    \end{macrocode}
%
% \Model{cmyk}-minded colors.\footnote{Generic definitions:
% \Color{}{olive} = \Color{}{red}|!|50|!|\Color{}{green}.}
%    \begin{macrocode}
\definecolorset{cmyk/rgb/hsb/gray}{}{}%
 {cyan,1,0,0,0/0,1,1/.5,1,1/.7;%
  magenta,0,1,0,0/1,0,1/.83333,1,1/.41;%
  yellow,0,0,1,0/1,1,0/.16667,1,1/.89;%
  olive,0,0,1,.5/.5,.5,0/.16667,1,.5/.39}
%    \end{macrocode}
%
% \Model{gray}-minded colors.
%    \begin{macrocode}
\definecolorset{gray/rgb/hsb/cmyk}{}{}%
 {black,0/0,0,0/0,0,0/0,0,0,1;%
  darkgray,.25/.25,.25,.25/0,0,.25/0,0,0,.75;%
  gray,.5/.5,.5,.5/0,0,.5/0,0,0,.5;%
  lightgray,.75/.75,.75,.75/0,0,.75/0,0,0,.25;%
  white,1/1,1,1/0,0,1/0,0,0,0}
%    \end{macrocode}
%
% Load predefined sets of colors (e.g., \File{dvipsnam.def}).
%    \begin{macrocode}
\XC@@names
%    \end{macrocode}
%
%
% \subsubsection{Finale}
%
% Clear color stack and restore catcodes.
%    \begin{macrocode}
\AtBeginDocument{\let\XC@@stack\@empty}
\let\colornameprefix\XC@@nameprefix
\XC@catcodes
%    \end{macrocode}
%
%    \begin{macrocode}
\csname xcolorcmd\endcsname
\color{black}
%</package>
%    \end{macrocode}
%
%
% \iffalse
%-------------------------------------------------------------------------------
% \fi
%
% \subsection{Auxiliary definitions}
%
% \subsubsection{\Index{PostScript} prologue file \File{xcolor.pro}}
%
%    \begin{macrocode}
%<*dvips>
userdict begin
/setcmycolor{0 setcmykcolor}def
/XCbd{bind def}bind def
/XCed{exch def}XCbd
%    \end{macrocode}
%
% \Index{PostScript} version of |\providecommand|.
%    \begin{macrocode}
/XCdef{exch dup TeXDict exch known{pop pop}{XCed}ifelse}XCbd
%    \end{macrocode}
%
% \Index{PostScript} version of |\providecolor|.
%    \begin{macrocode}
/XCsetcolor{cvx counttomark array astore cvx exch pop XCdef}XCbd
%    \end{macrocode}
%
% Now define model-dependent color definition commands.
%    \begin{macrocode}
/XCcmy{mark exch exec/setcmycolor XCsetcolor}XCbd
/XCcmyk{mark exch exec/setcmykcolor XCsetcolor}XCbd
/XCgray{mark exch exec/setgray XCsetcolor}XCbd
/XChsb{mark exch exec/sethsbcolor XCsetcolor}XCbd
/XCrgb{mark exch exec/setrgbcolor XCsetcolor}XCbd
%    \end{macrocode}
%
% This is a fix for \File{special.pro}'s behaviour to perform a |0 setgray| during |normalscale|.
%    \begin{macrocode}
/XCfixnormalscale{/normalscale{Resolution 72 div VResolution 72 div neg
  scale magscale{DVImag dup scale}if}def}def
%    \end{macrocode}
%
% Grouping operators.
% We have to call |XCfixnormalscale| since |normalscale| is invoked by |@beginspecial| as defined by \File{special.pro}.
%    \begin{macrocode}
/XC!b{save XCfixnormalscale}XCbd
/XC!e{restore}XCbd
%    \end{macrocode}
%
% Scale `sp' coordinates back to `bp' units.
%    \begin{macrocode}
/XCsp2bp{1 65781.76 div dup scale}XCbd
%    \end{macrocode}
%
% \begin{macro}{XCsetline}
%   \meta{linewidth} |XCsetline|\\
% Common line definition.
%    \begin{macrocode}
/XCsetline
 {setlinewidth [] 0 setdash 2 setlinecap 0 setlinejoin 4 setmiterlimit}XCbd
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{XCboxframe}
%   \meta{linewidth} \meta{largeur} \meta{hauteur} \meta{profondeur} |XCboxframe|\\
% Draw a frame in `sp' coordinates using LanguageLevel~2.
%    \begin{macrocode}
/XCboxframe{/d XCed/h XCed/w XCed/l XCed w 0 gt{h d neg gt{l 0 gt
 {XCsp2bp l XCsetline
  l 2 div dup translate
  0 d neg w l sub h l sub d add rectstroke}if}if}if}XCbd
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{XCcolorblock}
%   \meta{largeur} \meta{hauteur} \meta{profondeur} |XCcolorblock|\\
% Draw a colored box in `sp' coordinates using LanguageLevel~2.
%    \begin{macrocode}
/XCcolorblock{/d XCed/h XCed/w XCed w 0 gt{h d neg gt
 {XCsp2bp 0 XCsetline
  0 d neg w h d add rectfill}if}if}XCbd
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
end
%</dvips>
%    \end{macrocode}
%
%
% \clearpage
% \Finale
% \endinput
%
%
% \iffalse
%-------------------------------------------------------------------------------
%<*svgnames|x11names|hksknames|hksnnames|hksznames|pmsnames|ralnames>
\def\colornameprefix{XC@}
%</svgnames|x11names|hksknames|hksnnames|hksznames|pmsnames|ralnames>
%
%<*svgnames>
\preparecolorset{rgb}{}{}{%
AliceBlue,.94,.972,1;%
AntiqueWhite,.98,.92,.844;%
Aqua,0,1,1;%
Aquamarine,.498,1,.83;%
Azure,.94,1,1;%
Beige,.96,.96,.864;%
Bisque,1,.894,.77;%
Black,0,0,0;%
BlanchedAlmond,1,.92,.804;%
Blue,0,0,1;%
BlueViolet,.54,.17,.888;%
Brown,.648,.165,.165;%
BurlyWood,.87,.72,.53;%
CadetBlue,.372,.62,.628;%
Chartreuse,.498,1,0;%
Chocolate,.824,.41,.116;%
Coral,1,.498,.312;%
CornflowerBlue,.392,.585,.93;%
Cornsilk,1,.972,.864;%
Crimson,.864,.08,.235;%
Cyan,0,1,1;%
DarkBlue,0,0,.545;%
DarkCyan,0,.545,.545;%
DarkGoldenrod,.72,.525,.044;%
DarkGray,.664,.664,.664;%
DarkGreen,0,.392,0;%
DarkGrey,.664,.664,.664;%
DarkKhaki,.74,.716,.42;%
DarkMagenta,.545,0,.545;%
DarkOliveGreen,.332,.42,.185;%
DarkOrange,1,.55,0;%
DarkOrchid,.6,.196,.8;%
DarkRed,.545,0,0;%
DarkSalmon,.912,.59,.48;%
DarkSeaGreen,.56,.736,.56;%
DarkSlateBlue,.284,.24,.545;%
DarkSlateGray,.185,.31,.31;%
DarkSlateGrey,.185,.31,.31;%
DarkTurquoise,0,.808,.82;%
DarkViolet,.58,0,.828;%
DeepPink,1,.08,.576;%
DeepSkyBlue,0,.75,1;%
DimGray,.41,.41,.41;%
DimGrey,.41,.41,.41;%
DodgerBlue,.116,.565,1;%
FireBrick,.698,.132,.132;%
FloralWhite,1,.98,.94;%
ForestGreen,.132,.545,.132;%
Fuchsia,1,0,1;%
Gainsboro,.864,.864,.864;%
GhostWhite,.972,.972,1;%
Gold,1,.844,0;%
Goldenrod,.855,.648,.125;%
Gray,.5,.5,.5;%
Green,0,.5,0;%
GreenYellow,.68,1,.185;%
Grey,.5,.5,.5;%
Honeydew,.94,1,.94;%
HotPink,1,.41,.705;%
IndianRed,.804,.36,.36;%
Indigo,.294,0,.51;%
Ivory,1,1,.94;%
Khaki,.94,.9,.55;%
Lavender,.9,.9,.98;%
LavenderBlush,1,.94,.96;%
LawnGreen,.488,.99,0;%
LemonChiffon,1,.98,.804;%
LightBlue,.68,.848,.9;%
LightCoral,.94,.5,.5;%
LightCyan,.88,1,1;%
LightGoldenrod,.933,.867,.51;%
LightGoldenrodYellow,.98,.98,.824;%
LightGray,.828,.828,.828;%
LightGreen,.565,.932,.565;%
LightGrey,.828,.828,.828;%
LightPink,1,.712,.756;%
LightSalmon,1,.628,.48;%
LightSeaGreen,.125,.698,.668;%
LightSkyBlue,.53,.808,.98;%
LightSlateBlue,.518,.44,1;%
LightSlateGray,.468,.532,.6;%
LightSlateGrey,.468,.532,.6;%
LightSteelBlue,.69,.77,.87;%
LightYellow,1,1,.88;%
Lime,0,1,0;%
LimeGreen,.196,.804,.196;%
Linen,.98,.94,.9;%
Magenta,1,0,1;%
Maroon,.5,0,0;%
MediumAquamarine,.4,.804,.668;%
MediumBlue,0,0,.804;%
MediumOrchid,.73,.332,.828;%
MediumPurple,.576,.44,.86;%
MediumSeaGreen,.235,.7,.444;%
MediumSlateBlue,.484,.408,.932;%
MediumSpringGreen,0,.98,.604;%
MediumTurquoise,.284,.82,.8;%
MediumVioletRed,.78,.084,.52;%
MidnightBlue,.098,.098,.44;%
MintCream,.96,1,.98;%
MistyRose,1,.894,.884;%
Moccasin,1,.894,.71;%
NavajoWhite,1,.87,.68;%
Navy,0,0,.5;%
NavyBlue,0,0,.5;%
OldLace,.992,.96,.9;%
Olive,.5,.5,0;%
OliveDrab,.42,.556,.136;%
Orange,1,.648,0;%
OrangeRed,1,.27,0;%
Orchid,.855,.44,.84;%
PaleGoldenrod,.932,.91,.668;%
PaleGreen,.596,.985,.596;%
PaleTurquoise,.688,.932,.932;%
PaleVioletRed,.86,.44,.576;%
PapayaWhip,1,.936,.835;%
PeachPuff,1,.855,.725;%
Peru,.804,.52,.248;%
Pink,1,.752,.796;%
Plum,.868,.628,.868;%
PowderBlue,.69,.88,.9;%
Purple,.5,0,.5;%
Red,1,0,0;%
RosyBrown,.736,.56,.56;%
RoyalBlue,.255,.41,.884;%
SaddleBrown,.545,.27,.075;%
Salmon,.98,.5,.448;%
SandyBrown,.956,.644,.376;%
SeaGreen,.18,.545,.34;%
Seashell,1,.96,.932;%
Sienna,.628,.32,.176;%
Silver,.752,.752,.752;%
SkyBlue,.53,.808,.92;%
SlateBlue,.415,.352,.804;%
SlateGray,.44,.5,.565;%
SlateGrey,.44,.5,.565;%
Snow,1,.98,.98;%
SpringGreen,0,1,.498;%
SteelBlue,.275,.51,.705;%
Tan,.824,.705,.55;%
Teal,0,.5,.5;%
Thistle,.848,.75,.848;%
Tomato,1,.39,.28;%
Turquoise,.25,.88,.815;%
Violet,.932,.51,.932;%
VioletRed,.816,.125,.565;%
Wheat,.96,.87,.7;%
White,1,1,1;%
WhiteSmoke,.96,.96,.96;%
Yellow,1,1,0;%
YellowGreen,.604,.804,.196}
%</svgnames>
%
%<*x11names>
\preparecolorset{rgb}{}{}{%
AntiqueWhite1,1,.936,.86;%
AntiqueWhite2,.932,.875,.8;%
AntiqueWhite3,.804,.752,.69;%
AntiqueWhite4,.545,.512,.47;%
Aquamarine1,.498,1,.83;%
Aquamarine2,.464,.932,.776;%
Aquamarine3,.4,.804,.668;%
Aquamarine4,.27,.545,.455;%
Azure1,.94,1,1;%
Azure2,.88,.932,.932;%
Azure3,.756,.804,.804;%
Azure4,.512,.545,.545;%
Bisque1,1,.894,.77;%
Bisque2,.932,.835,.716;%
Bisque3,.804,.716,.62;%
Bisque4,.545,.49,.42;%
Blue1,0,0,1;%
Blue2,0,0,.932;%
Blue3,0,0,.804;%
Blue4,0,0,.545;%
Brown1,1,.25,.25;%
Brown2,.932,.23,.23;%
Brown3,.804,.2,.2;%
Brown4,.545,.136,.136;%
Burlywood1,1,.828,.608;%
Burlywood2,.932,.772,.57;%
Burlywood3,.804,.668,.49;%
Burlywood4,.545,.45,.332;%
CadetBlue1,.596,.96,1;%
CadetBlue2,.556,.898,.932;%
CadetBlue3,.48,.772,.804;%
CadetBlue4,.325,.525,.545;%
Chartreuse1,.498,1,0;%
Chartreuse2,.464,.932,0;%
Chartreuse3,.4,.804,0;%
Chartreuse4,.27,.545,0;%
Chocolate1,1,.498,.14;%
Chocolate2,.932,.464,.13;%
Chocolate3,.804,.4,.112;%
Chocolate4,.545,.27,.075;%
Coral1,1,.448,.336;%
Coral2,.932,.415,.312;%
Coral3,.804,.356,.27;%
Coral4,.545,.244,.185;%
Cornsilk1,1,.972,.864;%
Cornsilk2,.932,.91,.804;%
Cornsilk3,.804,.785,.694;%
Cornsilk4,.545,.532,.47;%
Cyan1,0,1,1;%
Cyan2,0,.932,.932;%
Cyan3,0,.804,.804;%
Cyan4,0,.545,.545;%
DarkGoldenrod1,1,.725,.06;%
DarkGoldenrod2,.932,.68,.055;%
DarkGoldenrod3,.804,.585,.048;%
DarkGoldenrod4,.545,.396,.03;%
DarkOliveGreen1,.792,1,.44;%
DarkOliveGreen2,.736,.932,.408;%
DarkOliveGreen3,.635,.804,.352;%
DarkOliveGreen4,.43,.545,.24;%
DarkOrange1,1,.498,0;%
DarkOrange2,.932,.464,0;%
DarkOrange3,.804,.4,0;%
DarkOrange4,.545,.27,0;%
DarkOrchid1,.75,.244,1;%
DarkOrchid2,.698,.228,.932;%
DarkOrchid3,.604,.196,.804;%
DarkOrchid4,.408,.132,.545;%
DarkSeaGreen1,.756,1,.756;%
DarkSeaGreen2,.705,.932,.705;%
DarkSeaGreen3,.608,.804,.608;%
DarkSeaGreen4,.41,.545,.41;%
DarkSlateGray1,.592,1,1;%
DarkSlateGray2,.552,.932,.932;%
DarkSlateGray3,.475,.804,.804;%
DarkSlateGray4,.32,.545,.545;%
DeepPink1,1,.08,.576;%
DeepPink2,.932,.07,.536;%
DeepPink3,.804,.064,.464;%
DeepPink4,.545,.04,.312;%
DeepSkyBlue1,0,.75,1;%
DeepSkyBlue2,0,.698,.932;%
DeepSkyBlue3,0,.604,.804;%
DeepSkyBlue4,0,.408,.545;%
DodgerBlue1,.116,.565,1;%
DodgerBlue2,.11,.525,.932;%
DodgerBlue3,.094,.455,.804;%
DodgerBlue4,.064,.305,.545;%
Firebrick1,1,.19,.19;%
Firebrick2,.932,.172,.172;%
Firebrick3,.804,.15,.15;%
Firebrick4,.545,.1,.1;%
Gold1,1,.844,0;%
Gold2,.932,.79,0;%
Gold3,.804,.68,0;%
Gold4,.545,.46,0;%
Goldenrod1,1,.756,.145;%
Goldenrod2,.932,.705,.132;%
Goldenrod3,.804,.608,.112;%
Goldenrod4,.545,.41,.08;%
Green1,0,1,0;%
Green2,0,.932,0;%
Green3,0,.804,0;%
Green4,0,.545,0;%
Honeydew1,.94,1,.94;%
Honeydew2,.88,.932,.88;%
Honeydew3,.756,.804,.756;%
Honeydew4,.512,.545,.512;%
HotPink1,1,.43,.705;%
HotPink2,.932,.415,.655;%
HotPink3,.804,.376,.565;%
HotPink4,.545,.228,.385;%
IndianRed1,1,.415,.415;%
IndianRed2,.932,.39,.39;%
IndianRed3,.804,.332,.332;%
IndianRed4,.545,.228,.228;%
Ivory1,1,1,.94;%
Ivory2,.932,.932,.88;%
Ivory3,.804,.804,.756;%
Ivory4,.545,.545,.512;%
Khaki1,1,.965,.56;%
Khaki2,.932,.9,.52;%
Khaki3,.804,.776,.45;%
Khaki4,.545,.525,.305;%
LavenderBlush1,1,.94,.96;%
LavenderBlush2,.932,.88,.898;%
LavenderBlush3,.804,.756,.772;%
LavenderBlush4,.545,.512,.525;%
LemonChiffon1,1,.98,.804;%
LemonChiffon2,.932,.912,.75;%
LemonChiffon3,.804,.79,.648;%
LemonChiffon4,.545,.536,.44;%
LightBlue1,.75,.936,1;%
LightBlue2,.698,.875,.932;%
LightBlue3,.604,.752,.804;%
LightBlue4,.408,.512,.545;%
LightCyan1,.88,1,1;%
LightCyan2,.82,.932,.932;%
LightCyan3,.705,.804,.804;%
LightCyan4,.48,.545,.545;%
LightGoldenrod1,1,.925,.545;%
LightGoldenrod2,.932,.864,.51;%
LightGoldenrod3,.804,.745,.44;%
LightGoldenrod4,.545,.505,.298;%
LightPink1,1,.684,.725;%
LightPink2,.932,.635,.68;%
LightPink3,.804,.55,.585;%
LightPink4,.545,.372,.396;%
LightSalmon1,1,.628,.48;%
LightSalmon2,.932,.585,.448;%
LightSalmon3,.804,.505,.385;%
LightSalmon4,.545,.34,.26;%
LightSkyBlue1,.69,.888,1;%
LightSkyBlue2,.644,.828,.932;%
LightSkyBlue3,.552,.712,.804;%
LightSkyBlue4,.376,.484,.545;%
LightSteelBlue1,.792,.884,1;%
LightSteelBlue2,.736,.824,.932;%
LightSteelBlue3,.635,.71,.804;%
LightSteelBlue4,.43,.484,.545;%
LightYellow1,1,1,.88;%
LightYellow2,.932,.932,.82;%
LightYellow3,.804,.804,.705;%
LightYellow4,.545,.545,.48;%
Magenta1,1,0,1;%
Magenta2,.932,0,.932;%
Magenta3,.804,0,.804;%
Magenta4,.545,0,.545;%
Maroon1,1,.204,.7;%
Maroon2,.932,.19,.655;%
Maroon3,.804,.16,.565;%
Maroon4,.545,.11,.385;%
MediumOrchid1,.88,.4,1;%
MediumOrchid2,.82,.372,.932;%
MediumOrchid3,.705,.32,.804;%
MediumOrchid4,.48,.215,.545;%
MediumPurple1,.67,.51,1;%
MediumPurple2,.624,.475,.932;%
MediumPurple3,.536,.408,.804;%
MediumPurple4,.365,.28,.545;%
MistyRose1,1,.894,.884;%
MistyRose2,.932,.835,.824;%
MistyRose3,.804,.716,.71;%
MistyRose4,.545,.49,.484;%
NavajoWhite1,1,.87,.68;%
NavajoWhite2,.932,.81,.63;%
NavajoWhite3,.804,.7,.545;%
NavajoWhite4,.545,.475,.37;%
OliveDrab1,.752,1,.244;%
OliveDrab2,.7,.932,.228;%
OliveDrab3,.604,.804,.196;%
OliveDrab4,.41,.545,.132;%
Orange1,1,.648,0;%
Orange2,.932,.604,0;%
Orange3,.804,.52,0;%
Orange4,.545,.352,0;%
OrangeRed1,1,.27,0;%
OrangeRed2,.932,.25,0;%
OrangeRed3,.804,.215,0;%
OrangeRed4,.545,.145,0;%
Orchid1,1,.512,.98;%
Orchid2,.932,.48,.912;%
Orchid3,.804,.41,.79;%
Orchid4,.545,.28,.536;%
PaleGreen1,.604,1,.604;%
PaleGreen2,.565,.932,.565;%
PaleGreen3,.488,.804,.488;%
PaleGreen4,.33,.545,.33;%
PaleTurquoise1,.732,1,1;%
PaleTurquoise2,.684,.932,.932;%
PaleTurquoise3,.59,.804,.804;%
PaleTurquoise4,.4,.545,.545;%
PaleVioletRed1,1,.51,.67;%
PaleVioletRed2,.932,.475,.624;%
PaleVioletRed3,.804,.408,.536;%
PaleVioletRed4,.545,.28,.365;%
PeachPuff1,1,.855,.725;%
PeachPuff2,.932,.796,.68;%
PeachPuff3,.804,.688,.585;%
PeachPuff4,.545,.468,.396;%
Pink1,1,.71,.772;%
Pink2,.932,.664,.72;%
Pink3,.804,.57,.62;%
Pink4,.545,.39,.424;%
Plum1,1,.732,1;%
Plum2,.932,.684,.932;%
Plum3,.804,.59,.804;%
Plum4,.545,.4,.545;%
Purple1,.608,.19,1;%
Purple2,.57,.172,.932;%
Purple3,.49,.15,.804;%
Purple4,.332,.1,.545;%
Red1,1,0,0;%
Red2,.932,0,0;%
Red3,.804,0,0;%
Red4,.545,0,0;%
RosyBrown1,1,.756,.756;%
RosyBrown2,.932,.705,.705;%
RosyBrown3,.804,.608,.608;%
RosyBrown4,.545,.41,.41;%
RoyalBlue1,.284,.464,1;%
RoyalBlue2,.264,.43,.932;%
RoyalBlue3,.228,.372,.804;%
RoyalBlue4,.152,.25,.545;%
Salmon1,1,.55,.41;%
Salmon2,.932,.51,.385;%
Salmon3,.804,.44,.33;%
Salmon4,.545,.298,.224;%
SeaGreen1,.33,1,.624;%
SeaGreen2,.305,.932,.58;%
SeaGreen3,.264,.804,.5;%
SeaGreen4,.18,.545,.34;%
Seashell1,1,.96,.932;%
Seashell2,.932,.898,.87;%
Seashell3,.804,.772,.75;%
Seashell4,.545,.525,.51;%
Sienna1,1,.51,.28;%
Sienna2,.932,.475,.26;%
Sienna3,.804,.408,.224;%
Sienna4,.545,.28,.15;%
SkyBlue1,.53,.808,1;%
SkyBlue2,.494,.752,.932;%
SkyBlue3,.424,.65,.804;%
SkyBlue4,.29,.44,.545;%
SlateBlue1,.512,.435,1;%
SlateBlue2,.48,.404,.932;%
SlateBlue3,.41,.35,.804;%
SlateBlue4,.28,.235,.545;%
SlateGray1,.776,.888,1;%
SlateGray2,.725,.828,.932;%
SlateGray3,.624,.712,.804;%
SlateGray4,.424,.484,.545;%
Snow1,1,.98,.98;%
Snow2,.932,.912,.912;%
Snow3,.804,.79,.79;%
Snow4,.545,.536,.536;%
SpringGreen1,0,1,.498;%
SpringGreen2,0,.932,.464;%
SpringGreen3,0,.804,.4;%
SpringGreen4,0,.545,.27;%
SteelBlue1,.39,.72,1;%
SteelBlue2,.36,.675,.932;%
SteelBlue3,.31,.58,.804;%
SteelBlue4,.21,.392,.545;%
Tan1,1,.648,.31;%
Tan2,.932,.604,.288;%
Tan3,.804,.52,.248;%
Tan4,.545,.352,.17;%
Thistle1,1,.884,1;%
Thistle2,.932,.824,.932;%
Thistle3,.804,.71,.804;%
Thistle4,.545,.484,.545;%
Tomato1,1,.39,.28;%
Tomato2,.932,.36,.26;%
Tomato3,.804,.31,.224;%
Tomato4,.545,.21,.15;%
Turquoise1,0,.96,1;%
Turquoise2,0,.898,.932;%
Turquoise3,0,.772,.804;%
Turquoise4,0,.525,.545;%
VioletRed1,1,.244,.59;%
VioletRed2,.932,.228,.55;%
VioletRed3,.804,.196,.47;%
VioletRed4,.545,.132,.32;%
Wheat1,1,.905,.73;%
Wheat2,.932,.848,.684;%
Wheat3,.804,.73,.59;%
Wheat4,.545,.494,.4;%
Yellow1,1,1,0;%
Yellow2,.932,.932,0;%
Yellow3,.804,.804,0;%
Yellow4,.545,.545,0;%
Gray0,.745,.745,.745;%
Green0,0,1,0;%
Grey0,.745,.745,.745;%
Maroon0,.69,.19,.376;%
Purple0,.628,.125,.94}
%</x11names>
%
%<*test1>
\documentclass[a4paper]{article}

\usepackage{array,multicol,multido,textcomp}
\usepackage{xcolor}[2005/03/24]
\usepackage[hmargin={1.25cm,.75cm},vmargin=1.25cm,footskip=.5cm,nohead]{geometry}

\newdimen\Argwd
\newdimen\Errsum
\newdimen\Errmax
\newcount\Colors
\newcount\Errors
\newcount\Loops
\newif\ifColor

\makeatletter

\def\DisplayColor#1#2#3%
 {\global\advance\Loops\@ne
  \@tempdima=#1\p@ \edef\@tempa{\the\@tempdima}%
  \edef\Colori{\strip@pt\@tempdima}%
  \ifColor
    \@tempdimb=#2\p@ \edef\@tempb{\the\@tempdimb}%
    \@tempdimc=#3\p@ \edef\@tempc{\the\@tempdimc}%
    \edef\Colori{\Colori,\strip@pt\@tempdimb,\strip@pt\@tempdimc}%
  \fi
  \Make12\Make23\Make34\Make45\Make56\Make67%
  \begin{tabular}{@{}ll*4{@{ }p{\Argwd}}@{}}
  \Row1\Row2\Row3\Row4\Row5\Row6\noalign{\medskip}
  \end{tabular}
  \global\advance\Colors1 \relax\ifnum\Colors=30 \newpage\global\Colors=0 \fi}

\def\Make#1#2%
 {\edef\@@tmp
   {\noexpand\definecolor{Color\romannumeral#1}%
     {\@nameuse{Model\romannumeral#1}}{\@nameuse{Color\romannumeral#1}}%
   }\@@tmp
  \relax\ifnum#1<6
    \convertcolorspec
     {\@nameuse{Model\romannumeral#1}}{\@nameuse{Color\romannumeral#1}}%
     {\@nameuse{Model\romannumeral#2}}\@@tmp
    \XC@let@cN{Color\romannumeral#2}\@@tmp
  \fi}
\def\Row#1%
 {\edef\@@tmp{\@nameuse{Color\romannumeral#1}\@nameuse{Row\romannumeral#1}}%
  \expandafter\@Row\@@tmp}

\def\@Row#1,#2,#3,#4,#5#6%
 {\fcolorbox{black}{Color\romannumeral#5}{\phantom{000}}&
  \csname Model\romannumeral#5\endcsname &
  \ifodd#6 \@Error{#1}\@tempa \else #1\fi &
  \ifColor\ifodd#6 \@Error{#2}\@tempb \else #2\fi\else #2\fi &
  \ifColor\ifodd#6 \@Error{#3}\@tempc \else #3\fi\else #3\fi &
  #4\\}

\def\defModel#1#2#3#4% number, name, commas, check
 {\@namedef{Model\romannumeral#1}{#2}\@namedef{Row\romannumeral#1}{#3#1#4}}

\def\@Error#1#2%
 {\ifdim#1\p@=#2\relax #1\else
    \textcolor{red}{#1}\global\advance\Errors\@ne
    \dimen@#2\advance\dimen@-#1\p@ \ifdim\dimen@<\z@\dimen@-\dimen@\fi
    \global\advance\Errsum\dimen@
    \ifdim\dimen@>\Errmax \global\Errmax\dimen@
      \dimen@\@tempa \edef\@@tempa{\strip@pt\dimen@}%
      \ifColor
        \dimen@\@tempb \edef\@@tempb{\strip@pt\dimen@}%
        \dimen@\@tempc \edef\@@tempc{\strip@pt\dimen@}%
        \xdef\Errcase{\@@tempa\noexpand~\@@tempb\noexpand~\@@tempc}%
      \else
        \xdef\Errcase{\@@tempa}%
      \fi
    \fi
  \fi}

\newenvironment{ColorTest}[1]%
 {\addcontentsline{toc}{section}{Color conversion chain: #1}
  \Colors\z@ \Errors\z@ \Loops\z@ \Errsum\z@ \Errmax\z@
  \begin{multicols}{3}\centering}%
 {\end{multicols}\bigskip
  \begin{tabular}{@{}l@{ = }l@{}}
  \multicolumn2{@{}l@{}}{Rounding error statistics of color conversion test}\\
  \multicolumn2{@{}l@{}}%
   {$\textbf\Modeli\rightarrow \textbf\Modelii\rightarrow \textbf\Modeliii\rightarrow
     \textbf\Modeliv\rightarrow \textbf\Modelv\rightarrow \textbf\Modelvi$:}\\[1ex]
  number of examples& \number\Loops\\
  number of errors& \number\Errors\\
  sum of absolute errors& \strip@pt\Errsum\\
  \ifnum\Errors>\z@
    average error& \Errsum100\Errsum \dimen@\Errors\p@ \divide\dimen@\@m
    \rdivide\Errsum\dimen@ \strip@pt\Errsum\textperiodcentered10\textsuperscript{-5}\\
    maximum error& \strip@pt\Errmax{} @ \Modeli~\Errcase\\
  \fi
  \end{tabular}\newpage}

\def\thepage{\sffamily\footnotesize\@nameuse{@arabic}\c@page}

\makeatother

\parindent0pt
\setcounter{secnumdepth}{-1}

\begin{document}

\title{Color conversion with the \textsf{xcolor} package --- Examples}
\author{Dr. Uwe Kern\thanks{This file is part of the \textsf{xcolor} distribution which can be downloaded from the CTAN mirrors (\texttt{macros/latex/contrib/xcolor/}) or the homepage \texttt{www.ukern.de/tex/xcolor.html}. Please send error reports and suggestions for improvements to \texttt{xcolor@ukern.de}.}}
\date{\XCfileversion{} (\XCfiledate)}
\maketitle

\begin{center}
\begin{minipage}{.75\textwidth}
\tableofcontents
\end{minipage}
\end{center}
\newpage

\sffamily\footnotesize
\fboxrule.25pt
\settowidth\Argwd{0.00000}

\defModel1{rgb}{,,}0
\defModel2{cmy}{,,}0
\defModel3{cmyk}{,}0
\defModel4{hsb}{,,}0
\defModel5{rgb}{,,}1
\defModel6{gray}{,,,,}0
\Colortrue

\begin{ColorTest}{rgb, cmy, cmyk, hsb, rgb, gray}
\multido{\nR=1+-.1}{11}%
 {\multido{\nG=1+-.1}{11}%
  {\multido{\nB=1+-.1}{11}%
   {\DisplayColor{\nR}{\nG}{\nB}}}}%
\end{ColorTest}

\defModel1{gray}{,,,,}0
\defModel2{rgb}{,,}0
\defModel3{cmy}{,,}0
\defModel4{cmyk}{,}0
\defModel5{hsb}{,,}0
\defModel6{gray}{,,,,}1
\Colorfalse

\begin{ColorTest}{gray, rgb, cmy, cmyk, hsb, gray}
\multido{\nG=1+-.01}{101}{\DisplayColor{\nG}{}{}}%
\end{ColorTest}

\end{document}
%</test1>
%
%<*test2>
\listfiles
\documentclass{article}

\usepackage{pstricks,pst-tree,pst-slpe,multido}
\makeatletter
\makeatother
\usepackage{fvrb-ex}

\def\textfraction{0.01}
\def\topfraction{0.99}
\def\bottomfraction{0.99}
\def\floatpagefraction{0.70}
\setlength\abovecaptionskip{12pt}
\setlength\belowcaptionskip{10pt}
\parindent0pt

\begin{document}
\title{Color extensions with the \textsf{xcolor} package --- \textsf{pstricks} examples}
\author{Dr. Uwe Kern\thanks{This file is part of the \textsf{xcolor} distribution which can be downloaded from the CTAN mirrors (\texttt{macros/latex/contrib/xcolor/}) or the homepage \texttt{www.ukern.de/tex/xcolor.html}. Please send error reports and suggestions for improvements to \texttt{xcolor@ukern.de}.}}
\date{\XCfileversion{} (\XCfiledate)}
\maketitle

\centerline{\fcolorbox{red}{yellow!50}{This document is not suitable for pdf\LaTeX! Please use \LaTeX{} + \texttt{dvips} etc.}}

\begin{figure}[htb]\caption{Modified version of an example from the \textsf{pstricks} manual; requires \textsf{pst-tree}}
\begin{SideBySideExample}[fontsize=\footnotesize,xrightmargin=.45\textwidth]
  \begin{pspicture}(-0.5,-2)(3,2)
  \cnode(0,0){.5cm}{root}
  \cnode*[linecolor=red](3,1.5){4pt}{A}
  \cnode*[linecolor=red!72.5375!blue](3,0){4pt}{B}
  \cnode*[linecolor=-red](3,-1.5){4pt}{C}
  \psset{nodesep=3pt}
  \ncline[linecolor=green!50!red]{root}{A}
  \ncline[linecolor=blue]{root}{B}
  \ncline[linecolor=-green!50!red]{root}{C}
  \end{pspicture}
\end{SideBySideExample}
\end{figure}

\begin{figure}[htb]\caption{Moving from one color to its complement; requires \textsf{pst-slpe}}
\begin{SideBySideExample}[fontsize=\footnotesize,xrightmargin=.45\textwidth]
  \begin{pspicture}(4,1)
  \psframe[fillstyle=slope,
           slopeangle=30,
           slopebegin=red!72.5375!blue,
           slopeend=-red!72.5375!blue](4,1)
  \end{pspicture}
\end{SideBySideExample}
\end{figure}

\begin{figure}[htb]\caption{Explicit color specification via a loop command; requires \textsf{multido}}
\begin{SideBySideExample}[fontsize=\footnotesize,xrightmargin=.45\textwidth]
  \psset{unit=1.75}%
  \begin{pspicture}(0,-1)(2,1)
  \multido{\rHue=0.00+0.01}{100}%
   {\pscircle[linewidth=0.01,
              linecolor={[hsb]{\rHue,1,1}}](1,0){\rHue}}
  \end{pspicture}
\end{SideBySideExample}
\end{figure}

\begin{figure}[htb]\caption{Color series --- modified version of an example from the \textsf{pst-fill} manual; note that the \texttt{\string\multirput} command does not give the desired result here}
\begin{SideBySideExample}[fontsize=\footnotesize,xrightmargin=.45\textwidth]
  \newcommand*\Sheep
   {\begin{pspicture}(3,1.5)
    \pscustom[liftpen=2,fillstyle=solid,fillcolor=sheep!!+]%
     {\pscurve(0.5,-0.2)(0.6,0.5)(0.2,1.3)(0,1.5)(0,1.5)
       (0.4,1.3)(0.8,1.5)(2.2,1.9)(3,1.5)(3,1.5)(3.2,1.3)
       (3.6,0.5)(3.4,-0.3)(3,0)(2.2,0.4)(0.5,-0.2)}
    \pscircle*(2.65,1.25){0.12\psunit}% Eye
    \psccurve*(3.5,0.3)(3.35,0.45)(3.5,0.6)(3.6,0.4)% Muzzle
    \pscurve(3,0.35)(3.3,0.1)(3.6,0.05)% Mouth
    \pscurve(2.3,1.3)(2.1,1.5)(2.15,1.7)
    \pscurve(2.1,1.7)(2.35,1.6)(2.45,1.4)% Ear
    \end{pspicture}}
  \definecolorseries
   {sheep}{rgb}{step}[rgb]{.95,.85,.55}{.17,.47,.37}
  \resetcolorseries{sheep}
  \psset{unit=0.4}
  \begin{pspicture}(-3,-6)(0,7.5)
  \Multido{\ry=6.0+-1.5}{5}%
   {\rput(0,\ry){\Multido{}{5}{\Sheep}}}
  \resetcolorseries{sheep}%
  \multirput(-6,-6)(3,0)5{\Sheep}
  \end{pspicture}
\end{SideBySideExample}
\end{figure}

\begin{figure}[htb]\caption{Interaction with native PostScript code --- $\gamma$-corrected wavelengths}
\begin{Example}[fontsize=\footnotesize,xrightmargin=.45\textwidth]
  \newcount\WL \unitlength.75pt
  \def\WaveToPS#1%
   {\definecolor{tmp}{rgb:wave}{#1}\extractcolorspecs{tmp}\tmpm\tmpc
    \expandafter\WaveToPSi\tmpc,}
  \def\WaveToPSi#1,#2,#3,{\pstVerb{/Red{#1}def /Green{#2}def /Blue{#3}def}}
  \def\DisplayBar#1#2%
   {\linethickness{1.25\unitlength}\WL=360
    \pstVerb{/Gamma{#1}def}%
    \multiput(360,#2)(1,0){456}%
     {\WaveToPS{\the\WL}{\color{lambda}\line(0,1){50}}\global\advance\WL1}%
    \linethickness{0.25\unitlength}\WL=360
    \multiput(360,#2)(20,0){23}%
     {\picture(0,0)
      \line(0,-1){5}\multiput(5,0)(5,0){3}{\line(0,-1){2.5}}%
      \put(0,-10){\makebox(0,0){\the\WL}}\global\advance\WL20
      \endpicture}%
    \put(350,#2){\makebox(0,50)[r]{\small$\gamma$\,=\,#1}}}
  \pstVerb{/Corr{dup 0 gt {Gamma exp}if}def}
  \definecolor[ps]{lambda}{rgb}{Red Corr Green Corr Blue Corr}%
  \begin{picture}(510,345)(310,-10)
  \sffamily\tiny
  \DisplayBar{0.4}{0}%
  \DisplayBar{0.6}{70}%
  \DisplayBar{0.8}{140}%
  \DisplayBar{1.0}{210}%
  \DisplayBar{1.2}{280}%
  \end{picture}
\end{Example}
\end{figure}

\end{document}
%</test2>
%
%<*test3>
\listfiles
\documentclass[a4paper]{article}
\usepackage[showerrors,table,dvipsnames*,hyperref]{xcolor}[2005/12/21]
\usepackage[margin=2.25cm]{geometry}
\usepackage
 [\GinDriver,hyperindex=false,bookmarks,bookmarksopen,bookmarksopenlevel=1,%
  pdftitle={xcolor3 \XCfileversion{} (\XCfiledate)},pdfauthor={Dr. Uwe Kern},%
  pdfsubject={Color extensions for LaTeX and pdfLaTeX},%
  pdfkeywords={xcolor,color,colour,model,tint,tone,shade,harmony,spot,latex,pdftex,dvips,%
   conversion,blend,mix,mask,separation,rgb,cmy,cmyk,hsb,gray,html,wave,thsb,wheel}]{hyperref}

\tracingcolors=4
%%\tracingcolors=3
%%\tracingcolors=2
%%\tracingcolors=1
%%\tracingcolors=0

\parindent0pt
\pagecolor{gray!25}

\definecolors{JungleGreen,DarkOrchid}

\begin{document}
\title{Color extensions with the \textsf{xcolor} package --- various examples}
\author{\href{mailto:xcolor@ukern.de}{\fboxrule0pt\fboxsep2pt\fbox{Dr. Uwe Kern}}}
\date{\XCfileversion{} (\XCfiledate)
\thanks{This file (\texttt{\jobname.tex}) is part of the \textsf{xcolor} distribution which can be downloaded from the CTAN mirrors \texttt{\href{http://www.ctan.org/tex-archive/macros/latex/contrib/xcolor/}{CTAN/macros/latex/contrib/xcolor/}} or the homepage \texttt{\href{http://www.ukern.de/tex/xcolor.html}{www.ukern.de/tex/xcolor.html}}. Please send error reports and suggestions for improvements to \texttt{\href{mailto:xcolor@ukern.de}{xcolor@ukern.de}}.}}
\maketitle

The purpose of this file is to demonstrate a variety of capabilities including the logging facilities of the \textsf{xcolor} package.
By playing around with different values of \texttt{\string\tracingcolors}, one can observe the different behavior in the \texttt{log} file.

\section{Predefined colors}

\begingroup
\small\sffamily
\rowcolors1{}{}
\begin{testcolors}[rgb,cmyk,hsb,HTML,gray]
\testcolor{red}
\testcolor{green}
\testcolor{blue}
\testcolor{cyan}
\testcolor{magenta}
\testcolor{yellow}
\testcolor{orange}
\testcolor{violet}
\testcolor{purple}
\testcolor{brown}
\testcolor{pink}
\testcolor{olive}
\testcolor{black}
\testcolor{darkgray}
\testcolor{gray}
\testcolor{lightgray}
\testcolor{white}
\noalign{\medskip}\hline\noalign{\medskip}
\testcolor{-red}
\testcolor{-green}
\testcolor{-blue}
\testcolor{-cyan}
\testcolor{-magenta}
\testcolor{-yellow}
\testcolor{-orange}
\testcolor{-violet}
\testcolor{-purple}
\testcolor{-brown}
\testcolor{-pink}
\testcolor{-olive}
\testcolor{-black}
\testcolor{-darkgray}
\testcolor{-gray}
\testcolor{-lightgray}
\testcolor{-white}
\noalign{\medskip}\hline\noalign{\medskip}
\testcolor{JungleGreen}
\testcolor{DarkOrchid}
\noalign{\medskip}\hline\noalign{\medskip}
\testcolor{-JungleGreen}
\testcolor{-DarkOrchid}
\end{testcolors}
\endgroup

\vfill

\clearpage
\nopagecolor
Switch off \texttt{\string\pagecolor} by \texttt{\string\nopagecolor}.
The driver may or may not obey this command \dots

\clearpage
\pagecolor{white}

\section{Color definition and application}

\providecolor{dummy}{rgb}{.6,.5,.4}
\definecolor{dummy}{rgb}{.6,.5,.4}
\providecolor{dummy}{rgb}{.6,.5,.4}
\hbox{\textcolor{dummy}{Test with \texttt{\string\definecolor}}}

\bigskip

Comma-separated and space-separated definitions:

\definecolor{c1}{rgb}{.7,.6,.5}
\definecolor{c2}{rgb}{.7 .6 .5}
\colorlet{c1a}{c1}
\colorlet{c2a}{c2}

\textcolor{c1}{identical} =
\textcolor{c2}{identical} =
\textcolor{c1a}{identical} =
\textcolor{c2a}{identical} =
\textcolor[rgb]{.7,.6,.5}{identical} =
\textcolor[rgb]{.7 .6 .5}{identical} =
\textcolor{rgb,10:red,7;green,6;blue,5}{identical}
\textcolor{rgb,15:red,10.5;green,9;blue,7.5}{identical}

\medskip

\begingroup
\sffamily
\begin{testcolors}
\testcolor{c1}
\testcolor{c2}
\testcolor{c1a}
\testcolor{c2a}
\testcolor[rgb]{.7,.6,.5}
\testcolor[rgb]{.7 .6 .5}
\testcolor{rgb,10:red,7;green,6;blue,5}
\testcolor{rgb,15:red,10.5;green,9;blue,7.5}
\end{testcolors}
\endgroup

\bigskip

\textcolor{rgb:red!50,4;green!25,2}{Another extended color expression (rgb:red!50,4;green!25,2)}.

\bigskip

\begingroup
\color{black}
Test with named colors:\par
\color{blue}
Test: \textcolor[named]{JungleGreen}{JungleGreen};
Test: \textcolor{JungleGreen}{JungleGreen};
Test: \textcolor{JungleGreen!50!DarkOrchid}{JungleGreen!50!DarkOrchid};
Test: \textcolor{green!50!red}{green!50!red}.
\endgroup

\bigskip

{\color[rgb]{.4,.5,.6}Test with \texttt{\string\color}}

\bigskip
Current color application:\par
\def\test{current, \textcolor{.!50}{50\%}, \textcolor{-.}{complement},
          \textcolor{yellow!50!.}{mix}}
\textcolor{blue}{\test} and \textcolor{red}{\test},\par
\def\Test{\color{.!80}Test}
\textcolor{blue}{\Test\Test\Test\Test\Test} and
\textcolor{red}{\Test\Test\Test\Test\Test}.

\bigskip
Current color test with \texttt{\string\definecolorseries}:\par
\begingroup
\color{blue}
\definecolorseries{foo}{rgb}{last}{.}{-.}
\resetcolorseries[5]{foo}
\def\test{\hbox to 1em{{\color{foo!!+}\vrule width 1em height 1.5ex}}}
Test\test\test\test\test\test\test Test

\resetcolorseries[5]{foo}
\def\test{\hbox to 1em{{\color{foo!!++}\vrule width 1em height 1.5ex}}}
Test\test\test\test\test\test\test Test

\resetcolorseries[5]{foo}
\def\test{\hbox to 1em{{\color{foo!![2]}\vrule width 1em height 1.5ex}}}
Test\test\test\test\test\test\test Test

\endgroup

\section{Color in tables}

\rowcolors[\hline]{1}{green!25}{yellow!50}
\begin{tabular}{ll}
test & row \number\rownum\\
test & row \number\rownum\\
\rowcolor{blue!25}
test & row \number\rownum\\
test & row \number\rownum\\
\hiderowcolors
test & row \number\rownum\\
test & row \number\rownum\\
\showrowcolors
test & row \number\rownum\\
test & row \number\rownum\\
\multicolumn{1}%
 {>{\columncolor{red!12}}l}{test} & row \number\rownum\\
\end{tabular}

\section{Color information}

Type test:
\makeatletter
\@namedef{\string\color@foo1}{foo1{}{}{}{}}\edef\tempa{\XC@type{foo1}}\tempa
\@namedef{\string\color@foo2}{\xcolor@{foo2}{}{}{}}\edef\tempb{\XC@type{foo2}}\tempb
\@namedef{\string\color@foo3}{\xcolor@{}{foo3}{}{}}\edef\tempc{\XC@type{foo3}}\tempc
\@namedef{\string\color@foo4}{\xcolor@{}{}{foo4}{}}\edef\tempd{\XC@type{foo4}}\tempd
\makeatother

\end{document}
%</test3>
%
%<*test4>
\listfiles
\documentclass[a4paper]{article}
%%\PassOptionsToPackage{dvipdf}{xcolor}
%%\PassOptionsToPackage{dvipdfm}{xcolor}
%%\PassOptionsToPackage{dvipdfmx}{xcolor}
%%\PassOptionsToPackage{dvips}{xcolor}
%%\PassOptionsToPackage{dvipsone}{xcolor}
%%\PassOptionsToPackage{dviwin}{xcolor}
%%\PassOptionsToPackage{dviwindo}{xcolor}
%%\PassOptionsToPackage{emtex}{xcolor}
%%\PassOptionsToPackage{oztex}{xcolor}
%%\PassOptionsToPackage{luatex}{xcolor}
%%\PassOptionsToPackage{pctex32}{xcolor}
%%\PassOptionsToPackage{pctexhp}{xcolor}
%%\PassOptionsToPackage{pctexps}{xcolor}
%%\PassOptionsToPackage{pctexwin}{xcolor}
%%\PassOptionsToPackage{pdftex}{xcolor}
%%\PassOptionsToPackage{tcidvi}{xcolor}
%%\PassOptionsToPackage{textures}{xcolor}
%%\PassOptionsToPackage{truetex}{xcolor}
%%\PassOptionsToPackage{vtex}{xcolor}
%%\PassOptionsToPackage{xdvi}{xcolor}
%%\PassOptionsToPackage{xetex}{xcolor}
%%\PassOptionsToPackage{prologue}{xcolor}
%%\PassOptionsToPackage{kernelfbox}{xcolor}
%%\PassOptionsToPackage{xcdraw}{xcolor}
\usepackage[emtex]{graphics}
\usepackage{xcolor}
\usepackage[margin=1.25cm,noheadfoot]{geometry}
\pagestyle{empty}
\parindent0pt
\nofiles
\let\familydefault\sfdefault
\makeatletter
%% special code for driver list construction via
%%   latex \def\xcdriverlist{1}\input{xcolor4}
%% writes list in file xcolor4.tmp
\@ifundefined{xcdriverlist}{}{%
%% optional * (skips test whether #1.def exists)
%% #1 = driver
%% #2 = additional options (stored in \options@#2)
%% #3 = processor 1
%% #4 = output format 1
%% #5 = processor 2
%% #6 = output format 2
%% #7 = processor 3
%% #8 = output format 3
\def\0{\@ifstar
  {\def\@@tmp####1{\@firstoftwo}\1}{\def\@@tmp####1{\IfFileExists{####1.def}}\1}}
\def\1#1#2#3#4#5#6#7#8{\@@tmp{#1}%
  {\XC@let@Nc\@@tmp{options@#2}
   \ifx\@@tmp\@empty\else
     \edef\@@tmp{,\@@tmp}\XC@replace\@@tmp,{;#1-}\XC@replace\@@tmp;,
   \fi
   \edef\@@tmp{:=#1\@@tmp}
   \expandafter\@for\expandafter\@tempa\@@tmp\do
    {\let\@@tmp\@tempa\XC@replace\@@tmp-,
     \edef\@@tmp{\@tempa\space\string\PassOptionsToPackage{\@@tmp}{xcolor}}
     \@namexdef{list@#4}{\@nameuse{list@#4},#3 \@@tmp}
     \@namexdef{list@#6}{\@nameuse{list@#6},#5 \@@tmp}
     \@namexdef{list@#8}{\@nameuse{list@#8},#7 \@@tmp}}}%
  {\typeout{No file `#1.def' found.}}}
\def\list@{}
\def\list@dvi{}
\def\list@ps{}
\def\list@pdf{}
\@namedef{options@0}{}
\@namedef{options@1}{kernelfbox,prologue,xcdraw,kernelfbox-xcdraw,prologue-xcdraw}
\0{dvips}1{latex}{dvi}{dvips}{ps}{ps2pdf}{pdf}
\0{pctex32}0{latex}{dvi}{dvips}{ps}{ps2pdf}{pdf}
\0{dvipdf}0{latex}{dvi}{dvipdf}{pdf}{}{}
\0{dvipdfm}1{latex}{dvi}{dvipdfm}{pdf}{}{}
\0{dvipdfmx}0{latex}{dvi}{dvipdfmx}{pdf}{}{}
\0{dvipsone}0{latex}{dvi}{}{}{}{}
\0{dviwin}0{latex}{dvi}{}{}{}{}
\0*{dviwindo}0{latex}{dvi}{}{}{}{}
\0{emtex}0{latex}{dvi}{}{}{}{}
\0*{oztex}0{latex}{dvi}{}{}{}{}
\0{pctexhp}0{latex}{dvi}{}{}{}{}
\0{pctexps}0{latex}{dvi}{}{}{}{}
\0{pctexwin}0{latex}{dvi}{}{}{}{}
\0{tcidvi}0{latex}{dvi}{}{}{}{}
\0{textures}0{latex}{dvi}{}{}{}{}
\0{truetex}0{latex}{dvi}{}{}{}{}
\0*{xdvi}0{latex}{dvi}{}{}{}{}
\0{pdftex}1{pdflatex}{pdf}{}{}{}{}
\0{vtex}0{vlatex}{pdf}{}{}{}{}
\0{xetex}0{xelatex}{pdf}{}{}{}{}
\newwrite\@tempa\immediate\openout\@tempa=\jobname.tmp
\@tfor\@tempb:={dvi}{ps}{pdf}\do
 {\edef\@@tmp{\@nameuse{list@\@tempb}}\edef\@@tmp{:=\expandafter\@gobble\@@tmp}
  \expandafter\@for\expandafter\@@tmp\@@tmp\do
   {\immediate\write\@tempa{\@@tmp}}}
\immediate\closeout\@tempa
\@@end}% end of driver list construction code
\edef\Options{\expandafter\@gobble\XC@@opt}
\@tfor\@@tmp:={dvipdf}{dvipdfm}{dvipdfmx}{dvips}{dvipsone}{dviwin}{dviwindo}%
              {emtex}{oztex}{pctex32}{pctexhp}{pctexps}{pctexwin}{pdftex}%
              {tcidvi}{textures}{truetex}{vtex}{xdvi}{xetex}%
              {natural}{table}{fixpdftex}{hyperref}{showerrors}{hideerrors}%
              {override}{usenames}{nodvipsnames}{debugshow}\do
 {\expandafter\XC@replace\expandafter\Options\expandafter{\@@tmp,}{}}
\edef\Options{\XC@@drv,\Options}
\def\@@tmp#1,#2%
 {\ifx,#2#1\expandafter\remove@to@nnil\else#1', `\expandafter\@@tmp\fi#2}
\edef\Options{`\expandafter\@@tmp\Options,,\@nnil'}
\makeatother
\begin{document}
\vbox to\textheight{\vss\centering
{\Large\textbf{xcolor} driver test: \Options}
\vskip0.5cm
\begin{testcolors}[rgb,hsb,cmyk,gray,HTML]
\testcolor{magenta}
\testcolor[rgb]{1,0,1}
\testcolor[hsb]{0.83333,1,1}
\testcolor[cmyk]{0,1,0,0}
\testcolor[gray]{0.41}
\noalign{\medskip}
\testcolor{blue}
\testcolor[rgb]{0,0,1}
\testcolor[hsb]{0.66667,1,1}
\testcolor[cmyk]{1,1,0,0}
\testcolor[gray]{0.11}
\noalign{\medskip}
\testcolor{cyan}
\testcolor[rgb]{0,1,1}
\testcolor[hsb]{0.5,1,1}
\testcolor[cmyk]{1,0,0,0}
\testcolor[gray]{0.7}
\noalign{\medskip}
\testcolor{green}
\testcolor[rgb]{0,1,0}
\testcolor[hsb]{0.33333,1,1}
\testcolor[cmyk]{1,0,1,0}
\testcolor[gray]{0.59}
\noalign{\medskip}
\testcolor{yellow}
\testcolor[rgb]{1,1,0}
\testcolor[hsb]{0.16667,1,1}
\testcolor[cmyk]{0,0,1,0}
\testcolor[gray]{0.89}
\noalign{\medskip}
\testcolor{red}
\testcolor[rgb]{1,0,0}
\testcolor[hsb]{0,1,1}
\testcolor[cmyk]{0,1,1,0}
\testcolor[gray]{0.3}
\noalign{\medskip}
\testcolor{black}
\testcolor[rgb]{0,0,0}
\testcolor[hsb]{0,0,0}
\testcolor[cmyk]{0,0,0,1}
\testcolor[gray]{0}
\noalign{\medskip}
\testcolor{gray}
\testcolor[rgb]{0.5,0.5,0.5}
\testcolor[hsb]{0,0,0.5}
\testcolor[cmyk]{0,0,0,0.5}
\testcolor[gray]{0.5}
\noalign{\medskip}
\testcolor{white}
\testcolor[rgb]{1,1,1}
\testcolor[hsb]{0,0,1}
\testcolor[cmyk]{0,0,0,0}
\testcolor[gray]{1}
\noalign{\medskip\smallskip}
f(color)box &
\multicolumn5{c}{\def\i{\fbox{\a}}\def\ii{\fcolorbox{red}{yellow}{\a}}\def\iii{\scalebox{3}}%
\def\a{{\setbox0=\hbox to3ex{\hss\textcolor{blue}{\vrule width .75ex height1.5ex depth1.5ex}\hss}\ht0=0pt\dp0=0pt\box0}}%
\fboxsep0.333ex \i\quad\ii\quad\iii\i\quad\iii\ii\quad\fboxrule.75ex \iii\i\quad\iii\ii}
\end{testcolors}
\vskip0.5cm
{\footnotesize This table was generated with \textbf{xcolor4.tex} which is part of the \textbf{xcolor} package \XCfileversion{} (\XCfiledate) by Uwe Kern.}
\vss}
\end{document}
%</test4>
%
% \fi
\endinput
%%
%% End of file `xcolor-fr.dtx'.
